{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Op = require(\"../../../operators\");\n\nconst Utils = require(\"../../../utils\");\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: \"=\",\n    [Op.ne]: \"!=\",\n    [Op.gte]: \">=\",\n    [Op.gt]: \">\",\n    [Op.lte]: \"<=\",\n    [Op.lt]: \"<\",\n    [Op.not]: \"IS NOT\",\n    [Op.is]: \"IS\",\n    [Op.in]: \"IN\",\n    [Op.notIn]: \"NOT IN\",\n    [Op.like]: \"LIKE\",\n    [Op.notLike]: \"NOT LIKE\",\n    [Op.iLike]: \"ILIKE\",\n    [Op.notILike]: \"NOT ILIKE\",\n    [Op.startsWith]: \"LIKE\",\n    [Op.endsWith]: \"LIKE\",\n    [Op.substring]: \"LIKE\",\n    [Op.regexp]: \"~\",\n    [Op.notRegexp]: \"!~\",\n    [Op.iRegexp]: \"~*\",\n    [Op.notIRegexp]: \"!~*\",\n    [Op.between]: \"BETWEEN\",\n    [Op.notBetween]: \"NOT BETWEEN\",\n    [Op.overlap]: \"&&\",\n    [Op.contains]: \"@>\",\n    [Op.contained]: \"<@\",\n    [Op.adjacent]: \"-|-\",\n    [Op.strictLeft]: \"<<\",\n    [Op.strictRight]: \">>\",\n    [Op.noExtendRight]: \"&<\",\n    [Op.noExtendLeft]: \"&>\",\n    [Op.any]: \"ANY\",\n    [Op.all]: \"ALL\",\n    [Op.and]: \" AND \",\n    [Op.or]: \" OR \",\n    [Op.col]: \"COL\",\n    [Op.placeholder]: \"$$PLACEHOLDER$$\",\n    [Op.match]: \"@@\"\n  },\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = __spreadValues({}, aliases);\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n\n      obj[prop] = item;\n    });\n\n    return obj;\n  }\n\n};\nmodule.exports = OperatorHelpers;","map":{"version":3,"mappings":"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","names":["_","require","Op","Utils","OperatorHelpers","OperatorMap","eq","ne","gte","gt","lte","lt","not","is","in","notIn","like","notLike","iLike","notILike","startsWith","endsWith","substring","regexp","notRegexp","iRegexp","notIRegexp","between","notBetween","overlap","contains","contained","adjacent","strictLeft","strictRight","noExtendRight","noExtendLeft","any","all","and","or","col","placeholder","match","OperatorsAliasMap","setOperatorsAliases","aliases","isEmpty","__spreadValues","_replaceAliases","orig","obj","getOperators","forEach","op","item","isPlainObject","forOwn","prop","module","exports"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\abstract\\query-generator\\operators.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.match]: '@@'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = { ...aliases };\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"]},"metadata":{},"sourceType":"script"}