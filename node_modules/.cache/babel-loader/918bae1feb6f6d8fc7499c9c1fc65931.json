{"ast":null,"code":"const {\n  Cart,\n  CartItem,\n  Product,\n  Order,\n  OrderItem,\n  Profile\n} = require('../db');\n\nconst {\n  Op,\n  where\n} = require(\"sequelize\");\n\nexports.createCart = async (req, res) => {\n  const profile = await Profile.findOne({\n    where: {\n      UserId: req.user.id\n    }\n  });\n  Cart.addHook(\"beforeCreate\", 'deactivateOldCarts', () => {\n    Cart.findAll({\n      where: {\n        ACTIVECARTId: profile.id\n      }\n    }).then(carts => {\n      carts.forEach(cart => {\n        Cart.update({\n          status: \"INACTIVE\"\n        });\n      });\n    });\n  });\n  Cart.create({\n    ACTIVECARTId: profile.id\n  }).then(cart => {\n    return res.status(201).send(cart);\n  });\n};\n\nexports.createCartItems = async (req, res, done) => {\n  const cartId = req.params.cartId;\n  const userId = req.user.id;\n  const productName = req.body.productName;\n  const product = await Product.findOne({\n    where: {\n      productName: productName\n    }\n  }).then(item => {\n    return item;\n  });\n  const cartItem = {\n    CartId: cartId,\n    ProductId: product.id,\n    price: product.price,\n    quantity: req.body.quantity,\n    total: this.total\n  };\n\n  if (!Product.isOutOfStock()) {\n    CartItem.create(cartItem).then(newItem => {\n      if (newItem) {\n        return res.status(201).send(newItem);\n      } else {\n        res.send(Error('Item not Added'));\n      }\n    });\n  }\n};\n\nexports.removeCartItem = (req, res) => {\n  CartItem.delete({\n    where: {\n      id: id\n    }\n  }).then(deleted => {\n    res.status(200).send(deleted);\n  });\n};\n\nexports.loadCart = async (req, res) => {\n  const userId = req.user.id;\n  const profile = await Profile.findOne({\n    where: {\n      UserId: userId\n    }\n  });\n  await Cart.findOne({\n    where: {\n      ACTIVECARTId: profile.id\n    },\n    include: [{\n      all: true\n    }]\n  }).then(carts => {\n    if (carts) {\n      console.log(carts);\n      res.status(202).send(carts);\n    }\n  }).catch(err => {\n    res.send(err.message);\n  });\n};\n\nexports.updateCartItem = (req, res) => {\n  const id = req.params.cartId;\n  const quantity = req.body.quantity;\n  CartItem.addHook(afterUpdate, \"UpdateTotal\", quantity => {\n    const sum = quantity * this.price;\n    CartItem.update({\n      total: sum\n    }, {\n      where: {\n        CartId: id\n      }\n    });\n  });\n  CartItem.update({\n    quantity: quantity\n  }, {\n    where: {\n      CartId: id\n    }\n  }).then(updatedProduct => {\n    if (updatedProduct) {\n      res.status(200).send(updatedProduct);\n    }\n  });\n};\n\nexports.checkout = async (req, res) => {\n  try {\n    const id = req.user.id;\n    const profile = await Profile.findOne({\n      where: {\n        UserId: id\n      }\n    }); //Get Cart ID by User\n\n    const stripe = require('stripe')('sk_test_51KJmHTAjEYOrlpJbcRtNktEFaSBqHxaUsaAcPgjDQojexeyRbcGbKnqGwLIFhD0C7PP6EVUivLLYRdJMC216kzvI00hK4IjFwh');\n\n    const cartItems = await CartItem.findAll({\n      where: {\n        CartId: req.params.cartId\n      }\n    }).then(items => {\n      return items;\n    });\n    const cart = await Cart.findOne({\n      where: {\n        ACTIVECARTId: profile.id\n      }\n    });\n    const orderItems = await cartItems.map(item => OrderItem.create({\n      id: item.id,\n      quantity: item.quantity,\n      total: item.total,\n      ...item\n    }).then(items => {\n      return items;\n    }));\n    const total = cartItems.reduce((total, item) => {\n      return total += parseInt(item.price.replace(/[^0-9]/g, \"\"));\n    }, 0);\n    console.log(total);\n    const order = await Order.create({\n      cart,\n      total: total,\n      items: orderItems,\n      profileId: profile.id\n    }).then(order => {\n      return order;\n    });\n    console.log(order, order.total); // Generate total price from cart items\n    // Generate initial order\n    // Make charge to payment method (not required in this project)\n\n    const customer = await stripe.customers.create({\n      description: req.user.username,\n      email: req.user.email,\n      source: 'tok_mastercard'\n    });\n    const charge = await stripe.charges.create({\n      amount: total,\n      currency: 'usd',\n      customer: customer.id,\n      description: 'Jordan ButtCharge'\n    }); // On successful charge to payment method, update order status to COMPLETE\n\n    res.status(200).send(charge);\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Services/CartService.js"],"names":["Cart","CartItem","Product","Order","OrderItem","Profile","require","Op","where","exports","createCart","req","res","profile","findOne","UserId","user","id","addHook","findAll","ACTIVECARTId","then","carts","forEach","cart","update","status","create","send","createCartItems","done","cartId","params","userId","productName","body","product","item","cartItem","CartId","ProductId","price","quantity","total","isOutOfStock","newItem","Error","removeCartItem","delete","deleted","loadCart","include","all","console","log","catch","err","message","updateCartItem","afterUpdate","sum","updatedProduct","checkout","stripe","cartItems","items","orderItems","map","reduce","parseInt","replace","order","profileId","customer","customers","description","username","email","source","charge","charges","amount","currency"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA,KAA3B;AAAkCC,EAAAA,SAAlC;AAA6CC,EAAAA;AAA7C,IAAyDC,OAAO,CAAC,OAAD,CAAtE;;AACA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAgBF,OAAO,CAAC,WAAD,CAA7B;;AAIAG,OAAO,CAACC,UAAR,GAAqB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACrC,QAAMC,OAAO,GAAE,MAAOR,OAAO,CAACS,OAAR,CAAgB;AAACN,IAAAA,KAAK,EAAC;AAACO,MAAAA,MAAM,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAAlB;AAAP,GAAhB,CAAtB;AACAjB,EAAAA,IAAI,CAACkB,OAAL,CAAa,cAAb,EAA6B,oBAA7B,EAAmD,MAAM;AACrDlB,IAAAA,IAAI,CAACmB,OAAL,CAAa;AAAEX,MAAAA,KAAK,EAAE;AAACY,QAAAA,YAAY,EAAEP,OAAO,CAACI;AAAvB;AAAT,KAAb,EAAoDI,IAApD,CAAyDC,KAAK,IAAI;AAC9DA,MAAAA,KAAK,CAACC,OAAN,CAAcC,IAAI,IAAI;AAClBxB,QAAAA,IAAI,CAACyB,MAAL,CAAY;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAZ;AAEH,OAHD;AAIH,KALD;AAMH,GAPD;AAQA1B,EAAAA,IAAI,CAAC2B,MAAL,CAAY;AACRP,IAAAA,YAAY,EAAGP,OAAO,CAACI;AADf,GAAZ,EAEGI,IAFH,CAEQG,IAAI,IAAI;AACZ,WAAOZ,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBJ,IAArB,CAAP;AACH,GAJD;AAKH,CAfD;;AAiBAf,OAAO,CAACoB,eAAR,GAA0B,OAAOlB,GAAP,EAAYC,GAAZ,EAAiBkB,IAAjB,KAA0B;AAChD,QAAMC,MAAM,GAAGpB,GAAG,CAACqB,MAAJ,CAAWD,MAA1B;AACA,QAAME,MAAM,GAAGtB,GAAG,CAACK,IAAJ,CAASC,EAAxB;AACA,QAAMiB,WAAW,GAAGvB,GAAG,CAACwB,IAAJ,CAASD,WAA7B;AACA,QAAME,OAAO,GAAG,MAAMlC,OAAO,CAACY,OAAR,CAAgB;AAAEN,IAAAA,KAAK,EAAE;AAAE0B,MAAAA,WAAW,EAAEA;AAAf;AAAT,GAAhB,EAA0Db,IAA1D,CAA+DgB,IAAI,IAAI;AAAC,WAAQA,IAAR;AAAa,GAArF,CAAtB;AAGA,QAAMC,QAAQ,GAAG;AAEbC,IAAAA,MAAM,EAAER,MAFK;AAGbS,IAAAA,SAAS,EAAEJ,OAAO,CAACnB,EAHN;AAIbwB,IAAAA,KAAK,EAAEL,OAAO,CAACK,KAJF;AAKbC,IAAAA,QAAQ,EAAE/B,GAAG,CAACwB,IAAJ,CAASO,QALN;AAMbC,IAAAA,KAAK,EAAE,KAAKA;AANC,GAAjB;;AAWA,MAAI,CAACzC,OAAO,CAAC0C,YAAR,EAAL,EAA6B;AACzB3C,IAAAA,QAAQ,CAAC0B,MAAT,CAAgBW,QAAhB,EAA0BjB,IAA1B,CAA+BwB,OAAO,IAAI;AACtC,UAAIA,OAAJ,EAAa;AACX,eAAQjC,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBiB,OAArB,CAAR;AAED,OAHD,MAGO;AAEHjC,QAAAA,GAAG,CAACgB,IAAJ,CAASkB,KAAK,CAAC,gBAAD,CAAd;AACH;AAEJ,KATD;AAUH;AACJ,CA9BD;;AAgCArC,OAAO,CAACsC,cAAR,GAAyB,CAACpC,GAAD,EAAMC,GAAN,KAAc;AACnCX,EAAAA,QAAQ,CAAC+C,MAAT,CAAgB;AACZxC,IAAAA,KAAK,EAAE;AACHS,MAAAA,EAAE,EAAEA;AADD;AADK,GAAhB,EAIGI,IAJH,CAIQ4B,OAAO,IAAI;AACfrC,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBqB,OAArB;AACH,GAND;AAOH,CARD;;AAYAxC,OAAO,CAACyC,QAAR,GAAmB,OAAOvC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,QAAMqB,MAAM,GAAGtB,GAAG,CAACK,IAAJ,CAASC,EAAxB;AACD,QAAMJ,OAAO,GAAG,MAAMR,OAAO,CAACS,OAAR,CAAgB;AAACN,IAAAA,KAAK,EAAC;AAACO,MAAAA,MAAM,EAAEkB;AAAT;AAAP,GAAhB,CAAtB;AACC,QAAMjC,IAAI,CAACc,OAAL,CAAa;AAAEN,IAAAA,KAAK,EAAE;AAAEY,MAAAA,YAAY,EAAEP,OAAO,CAACI;AAAxB,KAAT;AAAuCkC,IAAAA,OAAO,EAAE,CAAC;AAACC,MAAAA,GAAG,EAAC;AAAL,KAAD;AAAhD,GAAb,EACD/B,IADC,CACIC,KAAK,IAAI;AACX,QAAIA,KAAJ,EAAW;AACP+B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,KAAZ;AACAV,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBN,KAArB;AACH;AACJ,GANC,EAMCiC,KAND,CAMOC,GAAG,IAAI;AACZ5C,IAAAA,GAAG,CAACgB,IAAJ,CAAS4B,GAAG,CAACC,OAAb;AACH,GARC,CAAN;AAUH,CAbD;;AAeAhD,OAAO,CAACiD,cAAR,GAAyB,CAAC/C,GAAD,EAAMC,GAAN,KAAc;AACnC,QAAMK,EAAE,GAAGN,GAAG,CAACqB,MAAJ,CAAWD,MAAtB;AACA,QAAMW,QAAQ,GAAG/B,GAAG,CAACwB,IAAJ,CAASO,QAA1B;AACAzC,EAAAA,QAAQ,CAACiB,OAAT,CAAiByC,WAAjB,EAA8B,aAA9B,EAA8CjB,QAAD,IAAc;AACvD,UAAMkB,GAAG,GAAGlB,QAAQ,GAAG,KAAKD,KAA5B;AACAxC,IAAAA,QAAQ,CAACwB,MAAT,CAAgB;AAAEkB,MAAAA,KAAK,EAAEiB;AAAT,KAAhB,EACD;AAACpD,MAAAA,KAAK,EAAE;AAAC+B,QAAAA,MAAM,EAAEtB;AAAT;AAAR,KADC;AAEH,GAJD;AAMAhB,EAAAA,QAAQ,CAACwB,MAAT,CAAgB;AAACiB,IAAAA,QAAQ,EAAEA;AAAX,GAAhB,EAAsC;AAClClC,IAAAA,KAAK,EAAC;AAAC+B,MAAAA,MAAM,EAACtB;AAAR;AAD4B,GAAtC,EAEGI,IAFH,CAEQwC,cAAc,IAAI;AACtB,QAAIA,cAAJ,EAAoB;AAChBjD,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBiC,cAArB;AACH;AACJ,GAND;AAOH,CAhBD;;AAkBApD,OAAO,CAACqD,QAAR,GAAmB,OAAOnD,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAI;AACA,UAAMK,EAAE,GAAGN,GAAG,CAACK,IAAJ,CAASC,EAApB;AAEA,UAAMJ,OAAO,GAAG,MAAMR,OAAO,CAACS,OAAR,CAAgB;AAAEN,MAAAA,KAAK,EAAE;AAAEO,QAAAA,MAAM,EAAEE;AAAV;AAAT,KAAhB,CAAtB,CAHA,CAIA;;AACA,UAAM8C,MAAM,GAAGzD,OAAO,CAAC,QAAD,CAAP,CAAkB,6GAAlB,CAAf;;AACA,UAAM0D,SAAS,GAAG,MAAM/D,QAAQ,CAACkB,OAAT,CAAiB;AAAEX,MAAAA,KAAK,EAAE;AAAE+B,QAAAA,MAAM,EAAE5B,GAAG,CAACqB,MAAJ,CAAWD;AAArB;AAAT,KAAjB,EAA2DV,IAA3D,CAAgE4C,KAAK,IAAI;AAC7F,aAAOA,KAAP;AACH,KAFuB,CAAxB;AAGA,UAAMzC,IAAI,GAAI,MAAOxB,IAAI,CAACc,OAAL,CAAa;AAACN,MAAAA,KAAK,EAAE;AAACY,QAAAA,YAAY,EAACP,OAAO,CAACI;AAAtB;AAAR,KAAb,CAArB;AAEF,UAAOiD,UAAU,GAAG,MAAMF,SAAS,CAACG,GAAV,CAAc9B,IAAI,IAAIjC,SAAS,CAACuB,MAAV,CAAiB;AAACV,MAAAA,EAAE,EAAEoB,IAAI,CAACpB,EAAV;AAAeyB,MAAAA,QAAQ,EAAEL,IAAI,CAACK,QAA9B;AAAwCC,MAAAA,KAAK,EAAEN,IAAI,CAACM,KAApD;AAA2D,SAAGN;AAA9D,KAAjB,EAAuFhB,IAAvF,CAA4F4C,KAAK,IAAI;AAC/I,aAAOA,KAAP;AACH,KAF6C,CAAtB,CAA1B;AAIE,UAAMtB,KAAK,GAAGqB,SAAS,CAACI,MAAV,CAAiB,CAACzB,KAAD,EAAQN,IAAR,KAAiB;AAC5C,aAAOM,KAAK,IAAI0B,QAAQ,CAAChC,IAAI,CAACI,KAAL,CAAW6B,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAD,CAAxB;AACH,KAFa,EAEX,CAFW,CAAd;AAIAjB,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AAEA,UAAM4B,KAAK,GAAG,MAAMpE,KAAK,CAACwB,MAAN,CAAa;AAAEH,MAAAA,IAAF;AAASmB,MAAAA,KAAK,EAAEA,KAAhB;AAAuBsB,MAAAA,KAAK,EAACC,UAA7B;AAAyCM,MAAAA,SAAS,EAAE3D,OAAO,CAACI;AAA5D,KAAb,EAA8EI,IAA9E,CAAoFkD,KAAK,IAAI;AAEzG,aAAOA,KAAP;AACH,KAHe,CAApB;AAOAlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ,EAAmBA,KAAK,CAAC5B,KAAzB,EA5BA,CAgCJ;AAEA;AAGA;;AAEA,UAAM8B,QAAQ,GAAG,MAAMV,MAAM,CAACW,SAAP,CAAiB/C,MAAjB,CAAwB;AAC3CgD,MAAAA,WAAW,EAAEhE,GAAG,CAACK,IAAJ,CAAS4D,QADqB;AAE3CC,MAAAA,KAAK,EAAElE,GAAG,CAACK,IAAJ,CAAS6D,KAF2B;AAG3CC,MAAAA,MAAM,EAAE;AAHmC,KAAxB,CAAvB;AAUA,UAAMC,MAAM,GAAG,MAAMhB,MAAM,CAACiB,OAAP,CAAerD,MAAf,CAAsB;AACvCsD,MAAAA,MAAM,EAAEtC,KAD+B;AAEvCuC,MAAAA,QAAQ,EAAE,KAF6B;AAGvCT,MAAAA,QAAQ,EAAEA,QAAQ,CAACxD,EAHoB;AAIvC0D,MAAAA,WAAW,EAAE;AAJ0B,KAAtB,CAArB,CAjDI,CAwDJ;;AACF/D,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBmD,MAArB;AACD,GA1DG,CA6DA,OAAOvB,GAAP,EAAY;AACR,UAAMA,GAAN;AACH;AACJ,CAjED","sourcesContent":["const { Cart, CartItem, Product, Order, OrderItem, Profile } = require('../db');\r\nconst { Op, where } = require(\"sequelize\");\r\n\r\n\r\n\r\nexports.createCart = async (req, res) => {\r\n    const profile =await  Profile.findOne({where:{UserId: req.user.id}})\r\n    Cart.addHook(\"beforeCreate\", 'deactivateOldCarts', () => {\r\n        Cart.findAll({ where: {ACTIVECARTId: profile.id} }).then(carts => {\r\n            carts.forEach(cart => {\r\n                Cart.update({ status: \"INACTIVE\" }\r\n                )                \r\n            });\r\n        })\r\n    } )\r\n    Cart.create({\r\n        ACTIVECARTId : profile.id\r\n    }).then(cart => {\r\n        return res.status(201).send(cart)\r\n    })\r\n}\r\n\r\nexports.createCartItems = async (req, res, done) => {\r\n    const cartId = req.params.cartId\r\n    const userId = req.user.id\r\n    const productName = req.body.productName\r\n    const product = await Product.findOne({ where: { productName: productName } } ).then(item => {return  item})\r\n\r\n\r\n    const cartItem = {\r\n        \r\n        CartId: cartId,\r\n        ProductId: product.id, \r\n        price: product.price,\r\n        quantity: req.body.quantity,  \r\n        total: this.total\r\n    \r\n        \r\n    }\r\n\r\n    if (!Product.isOutOfStock()) {\r\n        CartItem.create(cartItem).then(newItem => {\r\n            if (newItem) {\r\n              return  res.status(201).send(newItem)\r\n                \r\n            } else {\r\n                \r\n                res.send(Error('Item not Added'))\r\n            }\r\n            \r\n        })\r\n    }\r\n}\r\n\r\nexports.removeCartItem = (req, res) => {\r\n    CartItem.delete({\r\n        where: {\r\n            id: id\r\n        }\r\n    }).then(deleted => {\r\n        res.status(200).send(deleted)\r\n    })\r\n}\r\n\r\n\r\n\r\nexports.loadCart = async (req, res) => {\r\n    const userId = req.user.id;\r\n   const profile = await Profile.findOne({where:{UserId: userId}})\r\n    await Cart.findOne({ where: { ACTIVECARTId: profile.id }, include: [{all:true}] })\r\n        .then(carts => {\r\n            if (carts) {\r\n                console.log(carts)\r\n                res.status(202).send(carts)\r\n            }\r\n        }).catch(err => {\r\n            res.send(err.message)\r\n        })\r\n        \r\n}\r\n    \r\nexports.updateCartItem = (req, res) => {\r\n    const id = req.params.cartId;\r\n    const quantity = req.body.quantity;\r\n    CartItem.addHook(afterUpdate, \"UpdateTotal\", (quantity) => {\r\n        const sum = quantity * this.price\r\n        CartItem.update({ total: sum },\r\n       {where: {CartId: id}} )\r\n    })\r\n\r\n    CartItem.update({quantity: quantity}, {\r\n        where:{CartId:id}\r\n    }).then(updatedProduct => {\r\n        if (updatedProduct) {\r\n            res.status(200).send(updatedProduct)\r\n        }\r\n    })\r\n}\r\n\r\nexports.checkout = async (req, res) => {\r\n    try {\r\n        const id = req.user.id\r\n\r\n        const profile = await Profile.findOne({ where: { UserId: id } })\r\n        //Get Cart ID by User\r\n        const stripe = require('stripe')('sk_test_51KJmHTAjEYOrlpJbcRtNktEFaSBqHxaUsaAcPgjDQojexeyRbcGbKnqGwLIFhD0C7PP6EVUivLLYRdJMC216kzvI00hK4IjFwh');\r\n        const cartItems = await CartItem.findAll({ where: { CartId: req.params.cartId } }).then(items => {\r\n            return items\r\n        });\r\n        const cart =  await  Cart.findOne({where: {ACTIVECARTId:profile.id}})\r\n\r\n      const  orderItems = await cartItems.map(item => OrderItem.create({id: item.id,  quantity: item.quantity, total: item.total, ...item }).then(items => {\r\n            return items\r\n        }))\r\n      \r\n        const total = cartItems.reduce((total, item) => {\r\n            return total += parseInt(item.price.replace(/[^0-9]/g, \"\"));\r\n        }, 0);\r\n\r\n        console.log(total)\r\n        \r\n        const order = await Order.create({ cart , total: total, items:orderItems, profileId: profile.id}).then( order => {\r\n            \r\n                return order\r\n            })\r\n            \r\n        \r\n       \r\n        console.log(order, order.total)\r\n\r\n        \r\n        \r\n    // Generate total price from cart items\r\n\r\n    // Generate initial order\r\n    \r\n\r\n    // Make charge to payment method (not required in this project)\r\n\r\n    const customer = await stripe.customers.create({\r\n        description: req.user.username,\r\n        email: req.user.email,\r\n        source: 'tok_mastercard'\r\n\r\n\r\n\r\n\r\n    })\r\n\r\n    const charge = await stripe.charges.create({\r\n        amount: total,\r\n        currency: 'usd',\r\n        customer: customer.id,\r\n        description: 'Jordan ButtCharge'\r\n    });\r\n\r\n    // On successful charge to payment method, update order status to COMPLETE\r\n  res.status(200).send(charge)\r\n}\r\n\r\n\r\n    catch (err) {\r\n        throw err;\r\n    }\r\n}"]},"metadata":{},"sourceType":"script"}