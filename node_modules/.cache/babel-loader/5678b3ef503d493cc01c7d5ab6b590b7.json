{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"db2\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst moment = require(\"moment\");\n\nconst debug = logger.debugContext(\"sql:db2\");\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(value) {\n    const param = {\n      ParamType: \"INPUT\",\n      Data: value\n    };\n\n    if (Buffer.isBuffer(value)) {\n      param.DataType = \"BLOB\";\n      return param;\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err2 => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? JSON.stringify(parameters) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n\n                result.closeSync();\n              }\n\n              stmt.closeSync();\n              const datalen = data.length;\n\n              if (datalen > 0) {\n                const coltypes = {};\n\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                }\n\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") != -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") != -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n\n    if (err && err.length === 0) {\n      err = null;\n    }\n\n    return err;\n  }\n\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err[\"message\"] = \"No error message found.\";\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(\" \"), column => {\n          let columnName = column.trim();\n\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","parserStore","_","logger","moment","debug","debugContext","getInsertIdField","getSQLTypeFromJsType","value","param","ParamType","Data","Buffer","isBuffer","DataType","connection","sql","parameters","benchmark","sequelize","options","queryBegin","Date","now","log","uuid","errStack","Error","stack","Promise","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","commitTransaction","rollbackTransaction","err2","transaction","name","params","forOwn","key","push","SQL","toUpperCase","newSql","isSelectQuery","indexOf","charAt","length","slice","prepare","stmt","execute","result","outparams","JSON","stringify","message","filterSQLError","closeSync","data","metadata","affectedRows","getAffectedRowsSync","fetchAllSync","getColumnMetadataSync","datalen","coltypes","i","SQL_DESC_NAME","SQL_DESC_TYPE_NAME","column","parse","get","utc","from","unshift","_run","values","dialect","bindParam","replacementFunc","match","values2","formatBindParameters","Array","isArray","search","isDropSchemaQuery","querySync","table","mtarray","split","dropTable","substring","rowCount","conn","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","type","Type","allowNull","IsNull","defaultValue","primaryKey","KeySeq","autoIncrement","IsIdentity","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","handleSelectQuery","isUpsertQuery","query","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","VERSION","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","handleShowTablesQuery","results","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","remove","constraint","constraintName","uniqueIndexName","uniqueKey","fields","model","uniqueKeys","where","dataValues","msg","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","currItem","forEach","item","Key_name","primary","keyType","unique","COLNAMES","x","columnName","trim","attribute","order","collate","metaData","autoIncrementAttribute","id","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","module","exports","Query","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\db2\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    const param = { ParamType: 'INPUT', Data: value };\n    if (Buffer.isBuffer(value)) {\n      param.DataType = 'BLOB';\n      return param;\n    }\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\t\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? JSON.stringify(parameters) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${ this.connection.uuid || 'default' }): ${ newSql} ${parameters ? JSON.stringify(parameters) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n  \n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n        \n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;    \n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}