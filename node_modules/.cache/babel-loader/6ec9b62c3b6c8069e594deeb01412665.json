{"ast":null,"code":"const {\n  DataTypes,\n  Model,\n  Op\n} = require('sequelize');\n\nconst bcrypt = require('bcrypt');\n\nmodule.exports = (sequelize, Sequelize) => {\n  class UserModel extends Model {\n    static async validatePassword(password, hashpass, done, user) {\n      await bcrypt.compare(password, hashpass, function (err, isMatch) {\n        if (err) {\n          console.log(err);\n        } else if (isMatch) {\n          done(null, user);\n        } else {\n          done(null, false);\n        }\n      });\n    }\n\n    static async userExist(username, email) {\n      let user = await this.findOne({\n        where: {\n          username: username\n        }\n      });\n\n      if (user) {\n        return {\n          username: 'This username already taken '\n        };\n      }\n\n      ;\n      user = await this.findOne({\n        where: {\n          email: email\n        }\n      });\n\n      if (user) {\n        return {\n          email: 'This email address is already associated with another user'\n        };\n      }\n\n      ;\n      return false;\n    }\n\n  }\n\n  UserModel.init({\n    id: {\n      type: DataTypes.UUID,\n      defaultValue: DataTypes.UUIDV4,\n      primaryKey: true\n    },\n    username: {\n      type: DataTypes.STRING,\n      unique: true,\n      allowNull: false\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true\n    },\n    role: {\n      type: DataTypes.ENUM({\n        values: ['ADMIN', 'EMP', 'CUSTOMER']\n      }),\n      allowNull: false\n    }\n  }, {\n    hooks: {\n      beforeSave: hashPassword = async user => {\n        if (user.isNewRecord) {\n          const salt = await bcrypt.genSalt(10, \"b\");\n          user.password = await bcrypt.hashSync(user.password, salt);\n          console.log(user.password);\n          console.log(user.isNewRecord);\n        }\n      },\n      beforeUpdate: async user => {\n        if (user.password) {\n          const salt = await bcrypt.genSalt(10, \"b\");\n          user.password = await bcrypt.hashSync(user.password, salt);\n          console.log(user.password);\n        }\n      }\n    },\n    sequelize,\n    modelName: 'User'\n  });\n  return UserModel;\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Models/Users/User.js"],"names":["DataTypes","Model","Op","require","bcrypt","module","exports","sequelize","Sequelize","UserModel","validatePassword","password","hashpass","done","user","compare","err","isMatch","console","log","userExist","username","email","findOne","where","init","id","type","UUID","defaultValue","UUIDV4","primaryKey","STRING","unique","allowNull","role","ENUM","values","hooks","beforeSave","hashPassword","isNewRecord","salt","genSalt","hashSync","beforeUpdate","modelName"],"mappings":"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","sourcesContent":["const { DataTypes, Model, Op } = require('sequelize');\r\nconst bcrypt = require('bcrypt')\r\n\r\n        \r\nmodule.exports = (sequelize, Sequelize) => {\r\n    class UserModel extends Model {\r\n        static async validatePassword(password, hashpass, done, user) {\r\n            \r\n            await bcrypt.compare(password, hashpass, function (err, isMatch) {\r\n                if (err) {\r\n                    console.log(err)\r\n                }\r\n                else if (isMatch) {\r\n                    done(null, user)\r\n                } else {\r\n                    done(null, false)\r\n                }\r\n               \r\n            })\r\n        \r\n        }\r\n    \r\n        \r\n        static async userExist  (username, email) {\r\n            let user = await this.findOne({ where: { username: username } });\r\n            if (user) { return { username: 'This username already taken ' } };\r\n            user = await this.findOne({ where: { email: email } });\r\n            if (user) { return { email: 'This email address is already associated with another user' } };\r\n            return false\r\n        }\r\n  \r\n         \r\n\r\n\r\n\r\n    }\r\n\r\n    \r\n    UserModel.init({\r\n        \r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true,\r\n            \r\n        },\r\n\r\n        username: {\r\n            type: DataTypes.STRING,\r\n            unique: true,\r\n            allowNull: false\r\n        },\r\n        password: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n        },\r\n        email: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n            unique: true\r\n        },\r\n        role: {\r\n            type: DataTypes.ENUM({\r\n                values: ['ADMIN', 'EMP', 'CUSTOMER']\r\n            }),\r\n            allowNull: false\r\n        }\r\n    },\r\n      \r\n        {\r\n            \r\n            hooks: {\r\n                beforeSave: hashPassword = async (user) => {\r\n                    if (user.isNewRecord) {\r\n                        const salt = await bcrypt.genSalt(10, \"b\");\r\n                        user.password = await bcrypt.hashSync(user.password, salt)\r\n                        console.log(user.password)\r\n                        console.log(user.isNewRecord)\r\n                    }\r\n                },\r\n                beforeUpdate: async (user) => {\r\n                    if (user.password) {\r\n                        const salt = await bcrypt.genSalt(10, \"b\");\r\n                        user.password = await bcrypt.hashSync(user.password, salt);\r\n                        console.log(user.password)\r\n                        \r\n                    }\r\n                }\r\n            },\r\n            sequelize, modelName: 'User'\r\n        })\r\n        \r\n\r\n    return UserModel\r\n}\r\n"]},"metadata":{},"sourceType":"script"}