{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst Utils = require(\"./../utils\");\n\nconst Helpers = require(\"./helpers\");\n\nconst _ = require(\"lodash\");\n\nconst Association = require(\"./base\");\n\nconst BelongsTo = require(\"./belongs-to\");\n\nconst HasMany = require(\"./has-many\");\n\nconst HasOne = require(\"./has-one\");\n\nconst AssociationError = require(\"../errors\").AssociationError;\n\nconst EmptyResultError = require(\"../errors\").EmptyResultError;\n\nconst Op = require(\"../operators\");\n\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === void 0 || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = \"BelongsToMany\";\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = __spreadValues({}, this.options.through);\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError(\"'as' must be defined for many-to-many self-associations\");\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(this.source.tableName, this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName);\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    _.each(this.target.associations, association => {\n      if (association.associationType !== \"BelongsToMany\") return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === \"string\") {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [],\n          paranoid: this.through.paranoid ? this.through.paranoid : false,\n          validate: {}\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\"timestamps\", \"createdAt\", \"updatedAt\", \"deletedAt\", \"paranoid\"]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n\n        this._createForeignAndOtherKeys();\n      }\n\n      if (this.paired.targetKeyDefault) {\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n\n          this.paired._createForeignAndOtherKeys();\n\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n\n      if (this.paired.otherKeyDefault) {\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n    this.associationAccessor = this.as;\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize([this.source.options.name.singular, this.sourceKey].join(\"_\"));\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize([this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular, this.targetKey].join(\"_\"));\n    }\n  }\n\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          attribute.primaryKey = false;\n        } else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n\n    const sourceAttribute = __spreadValues({\n      type: sourceKeyType\n    }, this.foreignKeyAttribute);\n\n    const targetAttribute = __spreadValues({\n      type: targetKeyType\n    }, this.otherKeyAttribute);\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n\n      if (typeof this.options.uniqueKey === \"string\" && this.options.uniqueKey !== \"\") {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, \"unique\"].join(\"_\");\n      }\n\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = \"CASCADE\";\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = \"CASCADE\";\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = \"CASCADE\";\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = \"CASCADE\";\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n    this.through.model.refreshAttributes();\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    if (this.options.sequelize.options.dialect === \"db2\" && this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = [\"get\", \"count\", \"hasSingle\", \"hasAll\", \"set\", \"add\", \"addMultiple\", \"remove\", \"removeMultiple\", \"create\"];\n    const aliases = {\n      hasSingle: \"has\",\n      hasAll: \"has\",\n      addMultiple: \"add\",\n      removeMultiple: \"remove\"\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = __spreadValues({}, this.scope);\n    }\n\n    options.where = {\n      [Op.and]: [scopeWhere, options.where]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, \"paranoid\", true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n    options = Utils.cloneDeep(options);\n    options.attributes = [[sequelize.fn(\"COUNT\", sequelize.col([this.target.name, this.targetKeyField].join(\".\"))), \"count\"]];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n    const result = await this.get(instance, options);\n    return parseInt(result.count, 10);\n  }\n\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = __spreadProps(__spreadValues({\n      raw: true\n    }, options), {\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    });\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.targetKey]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [{\n        [Op.or]: instancePrimaryKeys\n      }, options.where]\n    };\n    const associatedObjects = await this.get(sourceInstance, options);\n    return _.differenceWith(instancePrimaryKeys, associatedObjects, (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey)\n    }, this.through.scope);\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n      const unassociatedObjects = newAssociatedObjects.filter(obj => !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey)));\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).length) {\n            promises.push(this.through.model.update(attributes, Object.assign(options, {\n              where: {\n                [identifier]: sourceInstance.get(sourceKey),\n                [foreignIdentifier]: newObj.get(targetKey)\n              }\n            })));\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(this.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n          where: __spreadValues({\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier])\n          }, this.through.scope)\n        })));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, defaultAttributes), unassociatedObject[this.through.model.name]), {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey)\n          }), this.through.scope);\n        });\n        promises.push(this.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  async add(sourceInstance, newInstances, options) {\n    if (!newInstances) return Promise.resolve();\n    options = __spreadValues({}, options);\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = __spreadValues({\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey))\n    }, association.through.scope);\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n\n          const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n          Object.assign(attributes, association.through.scope);\n          return attributes;\n        });\n        promises.push(association.through.model.bulkCreate(bulk, __spreadValues({\n          validate: true\n        }, options)));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n\n        const attributes = __spreadValues(__spreadValues({}, defaultAttributes), throughAttributes);\n\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, {\n          where: {\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: assoc.get(targetKey)\n          }\n        })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll(__spreadProps(__spreadValues({}, options), {\n        where,\n        raw: true\n      }));\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n    options = options || {};\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n    return association.through.model.destroy(__spreadProps(__spreadValues({}, options), {\n      where\n    }));\n  }\n\n  async create(sourceInstance, values, options) {\n    const association = this;\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    const newAssociatedObject = await association.target.create(values, options);\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, [\"fields\"]));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;","map":{"version":3,"mappings":"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","names":["Utils","require","Helpers","_","Association","BelongsTo","HasMany","HasOne","AssociationError","EmptyResultError","Op","constructor","source","target","options","through","name","model","associationType","targetAssociation","sequelize","__spreadValues","isMultiAssociation","doubleLinked","as","isSelfAssociation","isAliased","isPlainObject","plural","singular","singularize","combinedTableName","combineTableNames","tableName","each","associations","association","paired","sourceKey","primaryKeyAttribute","sourceKeyField","rawAttributes","field","targetKey","targetKeyField","targetKeyDefault","_createForeignAndOtherKeys","isDefined","define","Object","assign","indexes","paranoid","validate","pick","needInjectPaired","otherKey","otherKeyDefault","foreignKey","_injectAttributes","throughModel","combinedName","associationAccessor","upperFirst","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","isObject","foreignKeyAttribute","fieldName","camelize","join","otherKeyAttribute","identifier","foreignIdentifier","attribute","attributeName","primaryKey","_autoGenerated","includes","primaryKeyDeleted","sourceKeyType","type","targetKeyType","sourceAttribute","targetAttribute","unique","uniqueKey","constraints","references","getTableName","key","onDelete","onUpdate","refreshAttributes","identifierField","foreignIdentifierField","dialect","toSource","manyFromSource","oneFromSource","toTarget","manyFromTarget","oneFromTarget","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instance","cloneDeep","scopeWhere","throughWhere","scope","where","and","include","push","attributes","joinTableAttributes","required","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","findAll","fn","col","raw","plain","result","parseInt","sourceInstance","instances","Array","isArray","__spreadProps","instancePrimaryKeys","map","or","associatedObjects","differenceWith","a","b","isEqual","length","newAssociatedObjects","toInstanceArray","updateAssociations","currentRows","obsoleteAssociations","promises","defaultAttributes","unassociatedObjects","filter","some","currentRow","newObj","find","throughAttributes","keys","update","destroy","obsoleteAssociation","bulk","unassociatedObject","bulkCreate","Promise","all","error","newInstances","resolve","newInstance","changedAssociations","existingAssociation","current","assoc","oldAssociatedObjects","values","fields","concat","newAssociatedObject","omit","verifyAssociationAlias","alias","module","exports","BelongsToMany","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\associations\\belongs-to-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst BelongsTo = require('./belongs-to');\nconst HasMany = require('./has-many');\nconst HasOne = require('./has-one');\nconst AssociationError = require('../errors').AssociationError;\nconst EmptyResultError = require('../errors').EmptyResultError;\nconst Op = require('../operators');\n\n/**\n * Many-to-many association with a join table.\n *\n * When the join table has additional attributes, these can be passed in the options object:\n *\n * ```js\n * UserProject = sequelize.define('user_project', {\n *   role: Sequelize.STRING\n * });\n * User.belongsToMany(Project, { through: UserProject });\n * Project.belongsToMany(User, { through: UserProject });\n * // through is required!\n *\n * user.addProject(project, { through: { role: 'manager' }});\n * ```\n *\n * All methods allow you to pass either a persisted instance, its primary key, or a mixture:\n *\n * ```js\n * const project = await Project.create({ id: 11 });\n * await user.addProjects([project, 12]);\n * ```\n *\n * If you want to set several target instances, but with different attributes you have to set the attributes on the instance, using a property with the name of the through model:\n *\n * ```js\n * p1.UserProjects = {\n *   started: true\n * }\n * user.setProjects([p1, p2], { through: { started: false }}) // The default value is false, but p1 overrides that.\n * ```\n *\n * Similarly, when fetching through a join table with custom attributes, these attributes will be available as an object with the name of the through model.\n * ```js\n * const projects = await user.getProjects();\n * const p1 = projects[0];\n * p1.UserProjects.started // Is this project started yet?\n * ```\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsToMany(Project)` the getter will be `user.getProjects()`.\n *\n * @see {@link Model.belongsToMany}\n */\nclass BelongsToMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    if (this.options.through === undefined || this.options.through === true || this.options.through === null) {\n      throw new AssociationError(`${source.name}.belongsToMany(${target.name}) requires through option, pass either a string or a model`);\n    }\n\n    if (!this.options.through.model) {\n      this.options.through = {\n        model: options.through\n      };\n    }\n\n    this.associationType = 'BelongsToMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.through = { ...this.options.through };\n    this.isMultiAssociation = true;\n    this.doubleLinked = false;\n\n    if (!this.as && this.isSelfAssociation) {\n      throw new AssociationError('\\'as\\' must be defined for many-to-many self-associations');\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    this.combinedTableName = Utils.combineTableNames(\n      this.source.tableName,\n      this.isSelfAssociation ? this.as || this.target.tableName : this.target.tableName\n    );\n\n    /*\n    * If self association, this is the target association - Unless we find a pairing association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    /*\n    * Find paired association (if exists)\n    */\n    _.each(this.target.associations, association => {\n      if (association.associationType !== 'BelongsToMany') return;\n      if (association.target !== this.source) return;\n\n      if (this.options.through.model === association.options.through.model) {\n        this.paired = association;\n        association.paired = this;\n      }\n    });\n\n    /*\n    * Default/generated source/target keys\n    */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    if (this.options.targetKey) {\n      this.targetKey = this.options.targetKey;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    } else {\n      this.targetKeyDefault = true;\n      this.targetKey = this.target.primaryKeyAttribute;\n      this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    }\n\n    this._createForeignAndOtherKeys();\n\n    if (typeof this.through.model === 'string') {\n      if (!this.sequelize.isDefined(this.through.model)) {\n        this.through.model = this.sequelize.define(this.through.model, {}, Object.assign(this.options, {\n          tableName: this.through.model,\n          indexes: [], //we don't want indexes here (as referenced in #2416)\n          paranoid: this.through.paranoid ? this.through.paranoid : false, // Default to non-paranoid join (referenced in #11991)\n          validate: {} // Don't propagate model-level validations\n        }));\n      } else {\n        this.through.model = this.sequelize.model(this.through.model);\n      }\n    }\n\n    Object.assign(this.options, _.pick(this.through.model.options, [\n      'timestamps', 'createdAt', 'updatedAt', 'deletedAt', 'paranoid'\n    ]));\n\n    if (this.paired) {\n      let needInjectPaired = false;\n\n      if (this.targetKeyDefault) {\n        this.targetKey = this.paired.sourceKey;\n        this.targetKeyField = this.paired.sourceKeyField;\n        this._createForeignAndOtherKeys();\n      }\n      if (this.paired.targetKeyDefault) {\n        // in this case paired.otherKey depends on paired.targetKey,\n        // so cleanup previously wrong generated otherKey\n        if (this.paired.targetKey !== this.sourceKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.targetKey = this.sourceKey;\n          this.paired.targetKeyField = this.sourceKeyField;\n          this.paired._createForeignAndOtherKeys();\n          needInjectPaired = true;\n        }\n      }\n\n      if (this.otherKeyDefault) {\n        this.otherKey = this.paired.foreignKey;\n      }\n      if (this.paired.otherKeyDefault) {\n        // If paired otherKey was inferred we should make sure to clean it up\n        // before adding a new one that matches the foreignKey\n        if (this.paired.otherKey !== this.foreignKey) {\n          delete this.through.model.rawAttributes[this.paired.otherKey];\n          this.paired.otherKey = this.foreignKey;\n          needInjectPaired = true;\n        }\n      }\n\n      if (needInjectPaired) {\n        this.paired._injectAttributes();\n      }\n    }\n\n    if (this.through) {\n      this.throughModel = this.through.model;\n    }\n\n    this.options.tableName = this.combinedName = this.through.model === Object(this.through.model) ? this.through.model.tableName : this.through.model;\n\n    this.associationAccessor = this.as;\n\n    // Get singular and plural names, trying to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  _createForeignAndOtherKeys() {\n    /*\n    * Default/generated foreign/other keys\n    */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else {\n      this.foreignKeyAttribute = {};\n      this.foreignKey = this.options.foreignKey || Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.sourceKey\n        ].join('_')\n      );\n    }\n\n    if (_.isObject(this.options.otherKey)) {\n      this.otherKeyAttribute = this.options.otherKey;\n      this.otherKey = this.otherKeyAttribute.name || this.otherKeyAttribute.fieldName;\n    } else {\n      if (!this.options.otherKey) {\n        this.otherKeyDefault = true;\n      }\n\n      this.otherKeyAttribute = {};\n      this.otherKey = this.options.otherKey || Utils.camelize(\n        [\n          this.isSelfAssociation ? Utils.singularize(this.as) : this.target.options.name.singular,\n          this.targetKey\n        ].join('_')\n      );\n    }\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    this.identifier = this.foreignKey;\n    this.foreignIdentifier = this.otherKey;\n\n    // remove any PKs previously defined by sequelize\n    // but ignore any keys that are part of this association (#5865)\n    _.each(this.through.model.rawAttributes, (attribute, attributeName) => {\n      if (attribute.primaryKey === true && attribute._autoGenerated === true) {\n        if ([this.foreignKey, this.otherKey].includes(attributeName)) {\n          // this key is still needed as it's part of the association\n          // so just set primaryKey to false\n          attribute.primaryKey = false;\n        }\n        else {\n          delete this.through.model.rawAttributes[attributeName];\n        }\n        this.primaryKeyDeleted = true;\n      }\n    });\n\n    const sourceKey = this.source.rawAttributes[this.sourceKey];\n    const sourceKeyType = sourceKey.type;\n    const sourceKeyField = this.sourceKeyField;\n    const targetKey = this.target.rawAttributes[this.targetKey];\n    const targetKeyType = targetKey.type;\n    const targetKeyField = this.targetKeyField;\n    const sourceAttribute = { type: sourceKeyType, ...this.foreignKeyAttribute };\n    const targetAttribute = { type: targetKeyType, ...this.otherKeyAttribute };\n\n    if (this.primaryKeyDeleted === true) {\n      targetAttribute.primaryKey = sourceAttribute.primaryKey = true;\n    } else if (this.through.unique !== false) {\n      let uniqueKey;\n      if (typeof this.options.uniqueKey === 'string' && this.options.uniqueKey !== '') {\n        uniqueKey = this.options.uniqueKey;\n      } else {\n        uniqueKey = [this.through.model.tableName, this.foreignKey, this.otherKey, 'unique'].join('_');\n      }\n      targetAttribute.unique = sourceAttribute.unique = uniqueKey;\n    }\n\n    if (!this.through.model.rawAttributes[this.foreignKey]) {\n      this.through.model.rawAttributes[this.foreignKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (!this.through.model.rawAttributes[this.otherKey]) {\n      this.through.model.rawAttributes[this.otherKey] = {\n        _autoGenerated: true\n      };\n    }\n\n    if (this.options.constraints !== false) {\n      sourceAttribute.references = {\n        model: this.source.getTableName(),\n        key: sourceKeyField\n      };\n      // For the source attribute the passed option is the priority\n      sourceAttribute.onDelete = this.options.onDelete || this.through.model.rawAttributes[this.foreignKey].onDelete;\n      sourceAttribute.onUpdate = this.options.onUpdate || this.through.model.rawAttributes[this.foreignKey].onUpdate;\n\n      if (!sourceAttribute.onDelete) sourceAttribute.onDelete = 'CASCADE';\n      if (!sourceAttribute.onUpdate) sourceAttribute.onUpdate = 'CASCADE';\n\n      targetAttribute.references = {\n        model: this.target.getTableName(),\n        key: targetKeyField\n      };\n      // But the for target attribute the previously defined option is the priority (since it could've been set by another belongsToMany call)\n      targetAttribute.onDelete = this.through.model.rawAttributes[this.otherKey].onDelete || this.options.onDelete;\n      targetAttribute.onUpdate = this.through.model.rawAttributes[this.otherKey].onUpdate || this.options.onUpdate;\n\n      if (!targetAttribute.onDelete) targetAttribute.onDelete = 'CASCADE';\n      if (!targetAttribute.onUpdate) targetAttribute.onUpdate = 'CASCADE';\n    }\n\n    Object.assign(this.through.model.rawAttributes[this.foreignKey], sourceAttribute);\n    Object.assign(this.through.model.rawAttributes[this.otherKey], targetAttribute);\n\n    this.through.model.refreshAttributes();\n\n    this.identifierField = this.through.model.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignIdentifierField = this.through.model.rawAttributes[this.otherKey].field || this.otherKey;\n\n    // For Db2 server, a reference column of a FOREIGN KEY must be unique\n    // else, server throws SQL0573N error. Hence, setting it here explicitly\n    // for non primary columns.\n    if (this.options.sequelize.options.dialect === 'db2' &&\n        this.source.rawAttributes[this.sourceKey].primaryKey !== true) {\n      this.source.rawAttributes[this.sourceKey].unique = true;\n    }\n\n    if (this.paired && !this.paired.foreignIdentifierField) {\n      this.paired.foreignIdentifierField = this.through.model.rawAttributes[this.paired.otherKey].field || this.paired.otherKey;\n    }\n\n    this.toSource = new BelongsTo(this.through.model, this.source, {\n      foreignKey: this.foreignKey\n    });\n    this.manyFromSource = new HasMany(this.source, this.through.model, {\n      foreignKey: this.foreignKey\n    });\n    this.oneFromSource = new HasOne(this.source, this.through.model, {\n      foreignKey: this.foreignKey,\n      sourceKey: this.sourceKey,\n      as: this.through.model.name\n    });\n\n    this.toTarget = new BelongsTo(this.through.model, this.target, {\n      foreignKey: this.otherKey\n    });\n    this.manyFromTarget = new HasMany(this.target, this.through.model, {\n      foreignKey: this.otherKey\n    });\n    this.oneFromTarget = new HasOne(this.target, this.through.model, {\n      foreignKey: this.otherKey,\n      sourceKey: this.targetKey,\n      as: this.through.model.name\n    });\n\n    if (this.paired && this.paired.otherKeyDefault) {\n      this.paired.toTarget = new BelongsTo(this.paired.through.model, this.paired.target, {\n        foreignKey: this.paired.otherKey\n      });\n\n      this.paired.oneFromTarget = new HasOne(this.paired.target, this.paired.through.model, {\n        foreignKey: this.paired.otherKey,\n        sourceKey: this.paired.targetKey,\n        as: this.paired.through.model.name\n      });\n    }\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @see\n   * {@link Model} for a full explanation of options\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   * @param {object} [options.through.where] An optional where clause applied to through model (join table)\n   * @param {boolean} [options.through.paranoid=true] If true, only non-deleted records will be returned from the join table. If false, both deleted and non-deleted records will be returned. Only applies if through model is paranoid\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  async get(instance, options) {\n    options = Utils.cloneDeep(options) || {};\n\n    const through = this.through;\n    let scopeWhere;\n    let throughWhere;\n\n    if (this.scope) {\n      scopeWhere = { ...this.scope };\n    }\n\n    options.where = {\n      [Op.and]: [\n        scopeWhere,\n        options.where\n      ]\n    };\n\n    if (Object(through.model) === through.model) {\n      throughWhere = {};\n      throughWhere[this.foreignKey] = instance.get(this.sourceKey);\n\n      if (through.scope) {\n        Object.assign(throughWhere, through.scope);\n      }\n\n      //If a user pass a where on the options through options, make an \"and\" with the current throughWhere\n      if (options.through && options.through.where) {\n        throughWhere = {\n          [Op.and]: [throughWhere, options.through.where]\n        };\n      }\n\n      options.include = options.include || [];\n      options.include.push({\n        association: this.oneFromTarget,\n        attributes: options.joinTableAttributes,\n        required: true,\n        paranoid: _.get(options.through, 'paranoid', true),\n        where: throughWhere\n      });\n    }\n\n    let model = this.target;\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        model = model.unscoped();\n      } else {\n        model = model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      model = model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return model.findAll(options);\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model} instance instance\n   * @param {object} [options] find options\n   * @param {object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  async count(instance, options) {\n    const sequelize = this.target.sequelize;\n\n    options = Utils.cloneDeep(options);\n    options.attributes = [\n      [sequelize.fn('COUNT', sequelize.col([this.target.name, this.targetKeyField].join('.'))), 'count']\n    ];\n    options.joinTableAttributes = [];\n    options.raw = true;\n    options.plain = true;\n\n    const result = await this.get(instance, options);\n\n    return parseInt(result.count, 10);\n  }\n\n  /**\n   * Check if one or more instance(s) are associated with this. If a list of instances is passed, the function returns true if _all_ instances are associated\n   *\n   * @param {Model} sourceInstance source instance to check for an association with\n   * @param {Model|Model[]|string[]|string|number[]|number} [instances] Can be an array of instances or their primary keys\n   * @param {object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise<boolean>}\n   */\n  async has(sourceInstance, instances, options) {\n    if (!Array.isArray(instances)) {\n      instances = [instances];\n    }\n\n    options = {\n      raw: true,\n      ...options,\n      scope: false,\n      attributes: [this.targetKey],\n      joinTableAttributes: []\n    };\n\n    const instancePrimaryKeys = instances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.targetKey]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        { [Op.or]: instancePrimaryKeys },\n        options.where\n      ]\n    };\n\n    const associatedObjects = await this.get(sourceInstance, options);\n\n    return _.differenceWith(instancePrimaryKeys, associatedObjects,\n      (a, b) => _.isEqual(a[this.targetKey], b[this.targetKey])).length === 0;\n  }\n\n  /**\n   * Set the associated models by passing an array of instances or their primary keys.\n   * Everything that it not in the passed array will be un-associated.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newAssociatedObjects] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate`, `update` and `destroy`\n   * @param {object} [options.validate] Run validation for the join model\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, newAssociatedObjects, options) {\n    options = options || {};\n\n    const sourceKey = this.sourceKey;\n    const targetKey = this.targetKey;\n    const identifier = this.identifier;\n    const foreignIdentifier = this.foreignIdentifier;\n\n    if (newAssociatedObjects === null) {\n      newAssociatedObjects = [];\n    } else {\n      newAssociatedObjects = this.toInstanceArray(newAssociatedObjects);\n    }\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      ...this.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const obsoleteAssociations = [];\n      const promises = [];\n      const defaultAttributes = options.through || {};\n\n      const unassociatedObjects = newAssociatedObjects.filter(obj =>\n        !currentRows.some(currentRow => currentRow[foreignIdentifier] === obj.get(targetKey))\n      );\n\n      for (const currentRow of currentRows) {\n        const newObj = newAssociatedObjects.find(obj => currentRow[foreignIdentifier] === obj.get(targetKey));\n\n        if (!newObj) {\n          obsoleteAssociations.push(currentRow);\n        } else {\n          let throughAttributes = newObj[this.through.model.name];\n          // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n          if (throughAttributes instanceof this.through.model) {\n            throughAttributes = {};\n          }\n\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).length) {\n            promises.push(\n              this.through.model.update(attributes, Object.assign(options, {\n                where: {\n                  [identifier]: sourceInstance.get(sourceKey),\n                  [foreignIdentifier]: newObj.get(targetKey)\n                }\n              }\n              ))\n            );\n          }\n        }\n      }\n\n      if (obsoleteAssociations.length > 0) {\n        promises.push(\n          this.through.model.destroy({\n            ...options,\n            where: {\n              [identifier]: sourceInstance.get(sourceKey),\n              [foreignIdentifier]: obsoleteAssociations.map(obsoleteAssociation => obsoleteAssociation[foreignIdentifier]),\n              ...this.through.scope\n            }\n          })\n        );\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          return {\n            ...defaultAttributes,\n            ...unassociatedObject[this.through.model.name],\n            [identifier]: sourceInstance.get(sourceKey),\n            [foreignIdentifier]: unassociatedObject.get(targetKey),\n            ...this.through.scope\n          };\n        });\n\n        promises.push(this.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await this.through.model.findAll({ ...options, where, raw: true });\n      return await updateAssociations(currentRows);\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations([]);\n      throw error;\n    }\n  }\n\n  /**\n   * Associate one or several rows with source instance. It will not un-associate any already associated instance\n   * that may be missing from `newInstances`.\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [newInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {object} [options] Options passed to `through.findAll`, `bulkCreate` and `update`\n   * @param {object} [options.validate] Run validation for the join model.\n   * @param {object} [options.through] Additional attributes for the join table.\n   *\n   * @returns {Promise}\n   */\n  async add(sourceInstance, newInstances, options) {\n    // If newInstances is null or undefined, no-op\n    if (!newInstances) return Promise.resolve();\n\n    options = { ...options };\n\n    const association = this;\n    const sourceKey = association.sourceKey;\n    const targetKey = association.targetKey;\n    const identifier = association.identifier;\n    const foreignIdentifier = association.foreignIdentifier;\n    const defaultAttributes = options.through || {};\n\n    newInstances = association.toInstanceArray(newInstances);\n\n    const where = {\n      [identifier]: sourceInstance.get(sourceKey),\n      [foreignIdentifier]: newInstances.map(newInstance => newInstance.get(targetKey)),\n      ...association.through.scope\n    };\n\n    const updateAssociations = currentRows => {\n      const promises = [];\n      const unassociatedObjects = [];\n      const changedAssociations = [];\n      for (const obj of newInstances) {\n        const existingAssociation = currentRows && currentRows.find(current => current[foreignIdentifier] === obj.get(targetKey));\n\n        if (!existingAssociation) {\n          unassociatedObjects.push(obj);\n        } else {\n          const throughAttributes = obj[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          if (Object.keys(attributes).some(attribute => attributes[attribute] !== existingAssociation[attribute])) {\n            changedAssociations.push(obj);\n          }\n        }\n      }\n\n      if (unassociatedObjects.length > 0) {\n        const bulk = unassociatedObjects.map(unassociatedObject => {\n          const throughAttributes = unassociatedObject[association.through.model.name];\n          const attributes = { ...defaultAttributes, ...throughAttributes };\n\n          attributes[identifier] = sourceInstance.get(sourceKey);\n          attributes[foreignIdentifier] = unassociatedObject.get(targetKey);\n\n          Object.assign(attributes, association.through.scope);\n\n          return attributes;\n        });\n\n        promises.push(association.through.model.bulkCreate(bulk, { validate: true, ...options }));\n      }\n\n      for (const assoc of changedAssociations) {\n        let throughAttributes = assoc[association.through.model.name];\n        const attributes = { ...defaultAttributes, ...throughAttributes };\n        // Quick-fix for subtle bug when using existing objects that might have the through model attached (not as an attribute object)\n        if (throughAttributes instanceof association.through.model) {\n          throughAttributes = {};\n        }\n\n        promises.push(association.through.model.update(attributes, Object.assign(options, { where: {\n          [identifier]: sourceInstance.get(sourceKey),\n          [foreignIdentifier]: assoc.get(targetKey)\n        } })));\n      }\n\n      return Promise.all(promises);\n    };\n\n    try {\n      const currentRows = await association.through.model.findAll({ ...options, where, raw: true });\n      const [associations] = await updateAssociations(currentRows);\n      return associations;\n    } catch (error) {\n      if (error instanceof EmptyResultError) return updateAssociations();\n      throw error;\n    }\n  }\n\n  /**\n   * Un-associate one or more instance(s).\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [oldAssociatedObjects] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {object} [options] Options passed to `through.destroy`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, oldAssociatedObjects, options) {\n    const association = this;\n\n    options = options || {};\n\n    oldAssociatedObjects = association.toInstanceArray(oldAssociatedObjects);\n\n    const where = {\n      [association.identifier]: sourceInstance.get(association.sourceKey),\n      [association.foreignIdentifier]: oldAssociatedObjects.map(newInstance => newInstance.get(association.targetKey))\n    };\n\n    return association.through.model.destroy({ ...options, where });\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {object} [values] values for target model\n   * @param {object} [options] Options passed to create and add\n   * @param {object} [options.through] Additional attributes for the join table\n   *\n   * @returns {Promise}\n   */\n  async create(sourceInstance, values, options) {\n    const association = this;\n\n    options = options || {};\n    values = values || {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (association.scope) {\n      Object.assign(values, association.scope);\n      if (options.fields) {\n        options.fields = options.fields.concat(Object.keys(association.scope));\n      }\n    }\n\n    // Create the related model instance\n    const newAssociatedObject = await association.target.create(values, options);\n\n    await sourceInstance[association.accessors.add](newAssociatedObject, _.omit(options, ['fields']));\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsToMany;\nmodule.exports.BelongsToMany = BelongsToMany;\nmodule.exports.default = BelongsToMany;\n"]},"metadata":{},"sourceType":"script"}