{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.sqlite = [\"DATETIME\"];\n  BaseTypes.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"];\n  BaseTypes.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"];\n  BaseTypes.TEXT.types.sqlite = [\"TEXT\"];\n  BaseTypes.TINYINT.types.sqlite = [\"TINYINT\"];\n  BaseTypes.SMALLINT.types.sqlite = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"];\n  BaseTypes.INTEGER.types.sqlite = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.sqlite = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.sqlite = [\"FLOAT\"];\n  BaseTypes.TIME.types.sqlite = [\"TIME\"];\n  BaseTypes.DATEONLY.types.sqlite = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.sqlite = [\"TINYINT\"];\n  BaseTypes.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.sqlite = [\"DECIMAL\"];\n  BaseTypes.UUID.types.sqlite = [\"UUID\"];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = [\"REAL\"];\n  BaseTypes.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes(\"+\")) {\n        return new Date(date + options.timezone);\n      }\n\n      return new Date(date);\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql(this);\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n\n      return \"TEXT\";\n    }\n\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n\n      if (this._length) {\n        result += `(${this._length}`;\n\n        if (typeof this._decimals === \"number\") {\n          result += `,${this._decimals}`;\n        }\n\n        result += \")\";\n      }\n\n      return result;\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {}\n\n  class DOUBLE extends BaseTypes.DOUBLE {}\n\n  class REAL extends BaseTypes.REAL {}\n\n  function parseFloating(value) {\n    if (typeof value !== \"string\") {\n      return value;\n    }\n\n    if (value === \"NaN\") {\n      return NaN;\n    }\n\n    if (value === \"Infinity\") {\n      return Infinity;\n    }\n\n    if (value === \"-Infinity\") {\n      return -Infinity;\n    }\n  }\n\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_zerofill","_unsigned","key","DATE","types","sqlite","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","data","parse","date","options","includes","Date","timezone","toSql","_binary","_length","CITEXT","NUMBER","result","_decimals","constructor","length","removeUnsupportedIntegerOptions","value","NaN","Infinity","floating","parseFloating","num","prototype","JSONTYPE"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\data-types.js"],"sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}