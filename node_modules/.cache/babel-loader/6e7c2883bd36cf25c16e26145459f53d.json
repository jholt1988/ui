{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst Utils = require(\"./../utils\");\n\nconst Helpers = require(\"./helpers\");\n\nconst _ = require(\"lodash\");\n\nconst Association = require(\"./base\");\n\nconst Op = require(\"../operators\");\n\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"BelongsTo\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.as, this.target.primaryKeyAttribute].join(\"_\"));\n    }\n\n    this.identifier = this.foreignKey;\n\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? \"SET NULL\" : \"NO ACTION\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n    this.source.refreshAttributes();\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, {\n          raw: true\n        })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  async set(sourceInstance, associatedInstance) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n    if (options.save === false) return;\n    options = __spreadValues({\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true\n    }, options);\n    return await sourceInstance.save(options);\n  }\n\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;","map":{"version":3,"mappings":"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","names":["Utils","require","Helpers","_","Association","Op","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","identifier","rawAttributes","identifierField","field","targetKey","Error","targetKeyField","targetKeyIsPrimary","targetIdentifier","associationAccessor","useHooks","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","__spreadValues","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","in","map","_instance","findByPk","limit","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","value","save","fields","association","values","newAssociatedObject","verifyAssociationAlias","alias","module","exports","BelongsTo","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\associations\\belongs-to.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"]},"metadata":{},"sourceType":"script"}