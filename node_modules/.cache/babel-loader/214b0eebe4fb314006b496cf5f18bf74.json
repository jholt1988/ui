{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst TableHints = require(\"../../table-hints\");\n\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\n\nconst randomBytes = require(\"crypto\").randomBytes;\n\nconst semver = require(\"semver\");\n\nconst Op = require(\"../../operators\");\n\nconst throwMethodUndefined = function (methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      collate: null\n    }, options);\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : \"\";\n    return [\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =\", wrapSingleQuote(databaseName), \")\", \"BEGIN\", \"CREATE DATABASE\", this.quoteIdentifier(databaseName), `${collation};`, \"END;\"].join(\" \");\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\"IF EXISTS (SELECT * FROM sys.databases WHERE name =\", wrapSingleQuote(databaseName), \")\", \"BEGIN\", \"DROP DATABASE\", this.quoteIdentifier(databaseName), \";\", \"END;\"].join(\" \");\n  }\n\n  createSchema(schema) {\n    return [\"IF NOT EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", wrapSingleQuote(schema), \")\", \"BEGIN\", \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(schema), \";'\", \"END;\"].join(\" \");\n  }\n\n  dropSchema(schema) {\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\"IF EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", quotedSchema, \")\", \"BEGIN\", \"DECLARE @id INT, @ms_sql NVARCHAR(2000);\", \"DECLARE @cascade TABLE (\", \"id INT NOT NULL IDENTITY PRIMARY KEY,\", \"ms_sql NVARCHAR(2000) NOT NULL );\", \"INSERT INTO @cascade ( ms_sql )\", \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", \"FROM sys.objects o\", \"JOIN sys.schemas s on o.schema_id = s.schema_id\", \"LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id\", \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema, \"ORDER BY o.type ASC;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"WHILE @id IS NOT NULL\", \"BEGIN\", \"BEGIN TRY EXEC sp_executesql @ms_sql; END TRY\", \"BEGIN CATCH BREAK; THROW; END CATCH;\", \"DELETE FROM @cascade WHERE id = @id;\", \"SELECT @id = NULL, @ms_sql = NULL;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"END\", \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\", \"END;\"].join(\" \");\n  }\n\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", \")\", \"AND\", '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(\" \");\n  }\n\n  versionQuery() {\n    return [\"DECLARE @ms_ver NVARCHAR(20);\", \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(\" \");\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n          foreignKeys = {},\n          attributesClauseParts = [];\n    let commentStr = \"\";\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes(\"COMMENT \")) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes(\"REFERENCES\")) {\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n          }\n        } else if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n\n          attributesClauseParts.push(`CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`, `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(\", \")})`, \";\", commentStr]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\"SELECT\", \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\", \"CAST(prop.value AS NVARCHAR) AS 'Comment'\", \"FROM\", \"INFORMATION_SCHEMA.TABLES t\", \"INNER JOIN\", \"INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA\", \"LEFT JOIN (SELECT tc.table_schema, tc.table_name, \", \"cu.column_name, tc.CONSTRAINT_TYPE \", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu \", \"ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name \", \"and tc.constraint_name=cu.constraint_name \", \"and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk \", \"ON pk.table_schema=c.table_schema \", \"AND pk.table_name=c.table_name \", \"AND pk.column_name=c.column_name \", \"INNER JOIN sys.columns AS sc\", \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\", \"LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id\", \"AND prop.minor_id = sc.column_id\", \"AND prop.name = 'MS_Description'\", \"WHERE t.TABLE_NAME =\", wrapSingleQuote(tableName)].join(\" \");\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([`IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`, \"DROP TABLE\", quoteTbl, \";\"]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n    let commentStr = \"\";\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      delete dataType[\"comment\"];\n    }\n\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(table), \"ADD\", this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n      context: \"addColumn\"\n    }), \";\", commentStr]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(comment)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP COLUMN\", this.quoteIdentifier(attributeName), \";\"]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n          constraintString = [];\n    let commentString = \"\";\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n\n      if (definition.includes(\"COMMENT \")) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace(\"COMMENT\", \"\").trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        definition = commentMatch[1];\n      }\n\n      if (definition.includes(\"REFERENCES\")) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, \"\")}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), attrString.length && `ALTER COLUMN ${attrString.join(\", \")}`, constraintString.length && `ADD ${constraintString.join(\", \")}`, \";\", commentString]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\"EXEC sp_rename\", `'${this.quoteTable(tableName)}.${attrBefore}',`, `'${newName}',`, \"'COLUMN'\", \";\"]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let needIdentityInsertWrapper = false,\n        outputFragment = \"\";\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n    attrValueHashes.forEach(attrValueHash => {\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${allAttributes.map(key => this.escape(attrValueHash[key])).join(\",\")})`);\n      });\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(\",\");\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === \"string\" ? v : v(tupleStr)).join(\";\");\n\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n\n    return commands.join(\";\");\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace(\"UPDATE\", updateArgs);\n    }\n\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === \"string\" ? field : field.name || field.attribute;\n\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(\", \");\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(\", \");\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`;\n    let joinCondition;\n    identityAttrs.forEach(key => {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n      }\n    });\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n\n      for (const key in clause) {\n        if (typeof clause[key] === \"undefined\" || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    });\n\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n    } else {\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(\" AND \");\n          break;\n        }\n      }\n\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(\" AND \");\n      }\n    }\n\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key)).map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(\", \")}` : \"\";\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n    return Utils.joinSQLFragments([\"DELETE\", options.limit && `TOP(${this.escape(options.limit)})`, \"FROM\", table, whereClause && `WHERE ${whereClause}`, \";\", \"SELECT @@ROWCOUNT AS AFFECTEDROWS\", \";\"]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log(\"MSSQL does not support self referencial constraints, we will remove it but we recommend restructuring your query\");\n        attribute.onDelete = \"\";\n        attribute.onUpdate = \"\";\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(\", \")}))`;\n      return template;\n    }\n\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += \" NULL\";\n    }\n\n    if (attribute.autoIncrement) {\n      template += \" IDENTITY(1,1)\";\n    }\n\n    if (attribute.type !== \"TEXT\" && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n          existingConstraints = [];\n    let key, attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          attribute.onDelete = \"\";\n          attribute.onUpdate = \"\";\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n          attribute.onUpdate = \"\";\n        }\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined(\"createTrigger\");\n  }\n\n  dropTrigger() {\n    throwMethodUndefined(\"dropTrigger\");\n  }\n\n  renameTrigger() {\n    throwMethodUndefined(\"renameTrigger\");\n  }\n\n  createFunction() {\n    throwMethodUndefined(\"createFunction\");\n  }\n\n  dropFunction() {\n    throwMethodUndefined(\"dropFunction\");\n  }\n\n  renameFunction() {\n    throwMethodUndefined(\"renameFunction\");\n  }\n\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${\"SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, \"}${catalogName ? `constraintCatalog = '${catalogName}', ` : \"\"}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), tableName = TB.NAME, tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : \"\"}columnName = COL.NAME, referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : \"\"}referencedTableName = RTB.NAME, referencedColumnName = RCOL.NAME FROM sys.foreign_key_columns FKC INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID`;\n  }\n\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([this._getForeignKeysQueryPrefix(), \"WHERE\", `TB.NAME =${wrapSingleQuote(tableName)}`, \"AND\", `COL.NAME =${wrapSingleQuote(attributeName)}`, table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\"SELECT K.TABLE_NAME AS tableName,\", \"K.COLUMN_NAME AS columnName,\", \"K.CONSTRAINT_NAME AS constraintName\", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C\", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K\", \"ON C.TABLE_NAME = K.TABLE_NAME\", \"AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG\", \"AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA\", \"AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME\", \"WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'\", `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`, `AND K.TABLE_NAME = ${tableName}`, \";\"]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP\", this.quoteIdentifier(foreignKey)]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\"SELECT name FROM sys.default_constraints\", `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`, `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`, `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`, \";\"]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP CONSTRAINT\", this.quoteIdentifier(constraintName), \";\"]);\n  }\n\n  setIsolationLevelQuery() {}\n\n  generateTransactionId() {\n    return randomBytes(10).toString(\"hex\");\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return \"BEGIN TRANSACTION;\";\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return \"COMMIT TRANSACTION;\";\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return \"ROLLBACK TRANSACTION;\";\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, {\n      modelName: model && model.name,\n      as: mainTableAs\n    });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, \"11.0.0\");\n\n    if (isSQLServer2008 && options.offset) {\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = {\n        mainQueryOrder: []\n      };\n\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || \"OffsetTable\";\n\n      if (options.include) {\n        const subQuery = options.subQuery === void 0 ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n        let mainJoinQueries = [];\n\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n\n          const joinQueries = this.generateInclude(include, {\n            externalAs: mainTableAs,\n            internalAs: mainTableAs\n          }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n\n        return Utils.joinSQLFragments([\"SELECT TOP 100 PERCENT\", attributes.join(\", \"), \"FROM (\", [\"SELECT\", options.limit && `TOP ${options.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", orders.mainQueryOrder.join(\", \")], `) as row_num, ${tmpTable}.* FROM (`, [\"SELECT DISTINCT\", `${tmpTable}.* FROM ${tables} AS ${tmpTable}`, mainJoinQueries, where && `WHERE ${where}`], `) AS ${tmpTable}`], `) AS ${tmpTable} WHERE row_num > ${offset}`], `) AS ${tmpTable}`]);\n      }\n\n      return Utils.joinSQLFragments([\"SELECT TOP 100 PERCENT\", attributes.join(\", \"), \"FROM (\", [\"SELECT\", options.limit && `TOP ${options.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", orders.mainQueryOrder.join(\", \")], `) as row_num, * FROM ${tables} AS ${tmpTable}`, where && `WHERE ${where}`], `) AS ${tmpTable} WHERE row_num > ${offset}`], `) AS ${tmpTable}`]);\n    }\n\n    return Utils.joinSQLFragments([\"SELECT\", isSQLServer2008 && options.limit && `TOP ${options.limit}`, attributes.join(\", \"), `FROM ${tables}`, mainTableAs && `AS ${mainTableAs}`, options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`]);\n  }\n\n  addLimitAndOffset(options, model) {\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, \"11.0.0\")) {\n      return \"\";\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === void 0 ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;\n    let fragment = \"\";\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, order => order[0]);\n\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? \", \" : \" ORDER BY \";\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/[[\\]']+/g, \"\")}]`;\n  }\n\n}\n\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;","map":{"version":3,"mappings":"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","names":["_","require","Utils","DataTypes","TableHints","AbstractQueryGenerator","randomBytes","semver","Op","throwMethodUndefined","methodName","Error","createDatabaseQuery","databaseName","options","__spreadValues","collate","collation","escape","wrapSingleQuote","quoteIdentifier","join","dropDatabaseQuery","createSchema","schema","dropSchema","quotedSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","primaryKeys","foreignKeys","attributesClauseParts","commentStr","attr","Object","prototype","hasOwnProperty","call","dataType","match","includes","commentMatch","commentText","replace","trim","commentTemplate","push","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","quotedTableName","quoteTable","joinSQLFragments","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","dropTableQuery","quoteTbl","addColumnQuery","table","key","comment","isString","attributeToSQL","context","column","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","commentString","quotedAttrName","definition","renameColumnQuery","attrBefore","newName","keys","bulkInsertQuery","attrValueHashes","quotedTable","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","returnValues","generateReturnValues","emptyQuery","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","quotedAttributes","tupleStr","commands","offset","batch","Math","floor","max","slice","min","generatedQuery","v","updateQuery","where","limit","updateArgs","query","upsertQuery","insertValues","updateValues","model","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","index","_indexes","fieldName","name","attribute","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","filteredUpdateClauses","updateSnippet","insertSnippet","truncateTableQuery","deleteQuery","whereClause","getWhereConditions","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","sequelize","log","onDelete","onUpdate","template","ENUM","values","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","toUpperCase","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","_getForeignKeysQueryPrefix","catalogName","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","dropConstraintQuery","constraintName","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","_throwOnEmptyAttributes","modelName","as","dbVersion","databaseVersion","isSQLServer2008","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","include","subQuery","mainTable","quotedName","topLevelInfo","names","mainJoinQueries","separate","joinQueries","generateInclude","externalAs","internalAs","concat","mainQuery","tableHint","addLimitAndOffset","fragment","subQueryOrder","tablePkFragment","tableAs","orderFieldNames","primaryKeyFieldAlreadyPresent","booleanValue","identifier","force","addTicks","removeTicks","module","exports","MSSQLQueryGenerator"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\mssql\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = { collate: null, ...options };\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${\n            this.quoteIdentifier(indexName)\n          } UNIQUE (${\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n          })`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\n      ';',\n      commentStr\n    ]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      'DROP TABLE',\n      quoteTbl,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\n      ';',\n      commentStr\n    ]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n      commentString\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      'EXEC sp_rename',\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      ';'\n    ]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (insertValues[key] && insertValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      });\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(', ')}` : '';\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n\n    return Utils.joinSQLFragments([\n      'DELETE',\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      'FROM',\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      ';',\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\n      ';'\n    ]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      'WHERE',\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      'AND',\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      ';'\n    ]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      'SELECT name FROM sys.default_constraints',\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      ';'\n    ]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      this.quoteIdentifier(constraintName),\n      ';'\n    ]);\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n\n      if (options.include) {\n        const subQuery = options.subQuery === undefined ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n\n        return Utils.joinSQLFragments([\n          'SELECT TOP 100 PERCENT',\n          attributes.join(', '),\n          'FROM (',\n          [\n            'SELECT',\n            options.limit && `TOP ${options.limit}`,\n            '* FROM (',\n            [\n              'SELECT ROW_NUMBER() OVER (',\n              [\n                'ORDER BY',\n                orders.mainQueryOrder.join(', ')\n              ],\n              `) as row_num, ${tmpTable}.* FROM (`,\n              [\n                'SELECT DISTINCT',\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\n                mainJoinQueries,\n                where && `WHERE ${where}`\n              ],\n              `) AS ${tmpTable}`\n            ],\n            `) AS ${tmpTable} WHERE row_num > ${offset}`\n          ],\n          `) AS ${tmpTable}`\n        ]);\n      }\n      return Utils.joinSQLFragments([\n        'SELECT TOP 100 PERCENT',\n        attributes.join(', '),\n        'FROM (',\n        [\n          'SELECT',\n          options.limit && `TOP ${options.limit}`,\n          '* FROM (',\n          [\n            'SELECT ROW_NUMBER() OVER (',\n            [\n              'ORDER BY',\n              orders.mainQueryOrder.join(', ')\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(', '),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      // TODO: document why this is adding the primary key of the model in ORDER BY\n      //  if options.include is set\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, order => order[0]);\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}