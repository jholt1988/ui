{"ast":null,"code":"const {\n  Sequelize\n} = require('sequelize');\n\nconst UserModel = require('../Models/Users/User');\n\nconst ProfileModel = require('../Models/Users/Profile');\n\nconst AddressModel = require('../Models/PublicModels/Address/Address');\n\nconst ProductModel = require('../Models/Store/Product');\n\nconst VendorModel = require('../Models/Store/Vendors');\n\nconst CartModel = require('../Models/Carts/Carts');\n\nconst CartItemModel = require('../Models/Carts/CartItems');\n\nconst OrderModel = require('../Models/Orders/Orders');\n\nconst OrderItemsModel = require('../Models/Orders/OrderItems');\n\nconst {\n  cn\n} = require('../config');\n\nconst sequelize = new Sequelize(cn.database, cn.user, cn.password, {\n  host: cn.host,\n  dialect: 'postgres',\n  port: cn.port,\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 1000\n  }\n});\n\nasync function dbTest() {\n  try {\n    sequelize.authenticate();\n    console.log('Database Connection Successful Established');\n  } catch (error) {\n    console.log(' Error Connecting To Database');\n  }\n}\n\nconst db = {};\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\nconst User = UserModel(sequelize, Sequelize);\nconst Profile = ProfileModel(sequelize, Sequelize);\nconst Address = AddressModel(sequelize, Sequelize);\nconst Vendor = VendorModel(sequelize, Sequelize);\nconst Product = ProductModel(sequelize, Sequelize);\nconst Cart = CartModel(sequelize, Sequelize);\nconst CartItem = CartItemModel(sequelize, Sequelize);\nconst Order = OrderModel(sequelize, Sequelize);\nconst OrderItem = OrderItemsModel(sequelize, Sequelize);\nUser.hasOne(Profile);\nProfile.belongsTo(User);\nProfile.hasOne(Address, {\n  as: \"Billing Address\"\n});\nProfile.hasOne(Address, {\n  as: \"Shipping Address\"\n});\nAddress.belongsTo(Profile, {\n  as: \"Billing Address\"\n});\nAddress.belongsTo(Profile, {\n  as: 'Shipping Address'\n});\nVendor.hasOne(Address, {\n  as: \"Vendor Address\"\n});\nAddress.belongsTo(Vendor, {\n  as: \"Vendor Address\"\n});\nProfile.hasOne(Cart, {\n  as: 'ACTIVE-CART'\n});\nProfile.hasOne(Cart, {\n  as: 'INACTIVE-CART'\n});\nCart.belongsTo(Profile, {\n  as: 'ACTIVE-CART'\n});\nCart.belongsTo(Profile, {\n  as: 'INACTIVE-CART'\n});\nCart.hasMany(CartItem, {\n  as: 'Items'\n});\nCartItem.belongsTo(Cart, {\n  as: 'Items'\n});\nOrderItem.hasOne(CartItem);\nCartItem.belongsTo(CartItem);\nOrder.hasMany(OrderItem, {\n  as: 'Items'\n});\nOrderItem.belongsTo(Order, {\n  as: 'Item'\n});\nProfile.hasMany(Order);\nOrder.belongsTo(Profile);\nmodule.exports = {\n  db,\n  User,\n  Profile,\n  Address,\n  Product,\n  Vendor,\n  Cart,\n  CartItem,\n  Order,\n  OrderItem,\n  dbTest\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/db/index.js"],"names":["Sequelize","require","UserModel","ProfileModel","AddressModel","ProductModel","VendorModel","CartModel","CartItemModel","OrderModel","OrderItemsModel","cn","sequelize","database","user","password","host","dialect","port","pool","max","min","idle","dbTest","authenticate","console","log","error","db","User","Profile","Address","Vendor","Product","Cart","CartItem","Order","OrderItem","hasOne","belongsTo","as","hasMany","module","exports"],"mappings":"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","sourcesContent":["const { Sequelize } = require('sequelize');\r\nconst UserModel = require('../Models/Users/User');\r\nconst ProfileModel = require('../Models/Users/Profile');\r\nconst AddressModel = require('../Models/PublicModels/Address/Address');\r\nconst ProductModel = require('../Models/Store/Product');\r\nconst VendorModel = require('../Models/Store/Vendors');\r\nconst CartModel = require('../Models/Carts/Carts');\r\nconst CartItemModel = require('../Models/Carts/CartItems');\r\nconst OrderModel = require('../Models/Orders/Orders');\r\nconst OrderItemsModel = require('../Models/Orders/OrderItems');\r\nconst { cn } = require('../config');\r\nconst sequelize = new Sequelize(cn.database, cn.user, cn.password, {\r\n    host: cn.host,\r\n    dialect: 'postgres',\r\n    port: cn.port,\r\n    pool: {\r\n    max: 5,\r\n    min: 0,\r\n    idle: 1000\r\n     }\r\n})\r\n\r\n async function dbTest() {\r\n    try {\r\n        sequelize.authenticate();\r\n        console.log('Database Connection Successful Established')\r\n    } catch (error) {\r\n        console.log(' Error Connecting To Database')\r\n    }\r\n}\r\n\r\nconst db = {}\r\ndb.sequelize = sequelize;\r\ndb.Sequelize = Sequelize;\r\n\r\nconst User = UserModel(sequelize, Sequelize);\r\nconst Profile = ProfileModel(sequelize, Sequelize);\r\nconst Address = AddressModel(sequelize, Sequelize);\r\nconst Vendor = VendorModel(sequelize, Sequelize);\r\nconst Product = ProductModel(sequelize, Sequelize);\r\nconst Cart = CartModel(sequelize, Sequelize);\r\nconst CartItem = CartItemModel(sequelize, Sequelize);\r\nconst Order = OrderModel(sequelize, Sequelize);\r\nconst OrderItem = OrderItemsModel(sequelize, Sequelize);\r\n\r\nUser.hasOne(Profile);\r\nProfile.belongsTo(User);\r\nProfile.hasOne(Address, { as: \"Billing Address\" });\r\nProfile.hasOne(Address, { as: \"Shipping Address\" });\r\nAddress.belongsTo(Profile, { as: \"Billing Address\" });\r\nAddress.belongsTo(Profile, {as: 'Shipping Address'})\r\nVendor.hasOne(Address, {as: \"Vendor Address\"});\r\nAddress.belongsTo(Vendor, { as: \"Vendor Address\" });\r\nProfile.hasOne(Cart, { as: 'ACTIVE-CART' });\r\nProfile.hasOne(Cart, { as: 'INACTIVE-CART' });\r\nCart.belongsTo(Profile, { as: 'ACTIVE-CART' });\r\nCart.belongsTo(Profile, { as: 'INACTIVE-CART' });\r\nCart.hasMany(CartItem, { as: 'Items' });\r\nCartItem.belongsTo(Cart, { as: 'Items' });\r\nOrderItem.hasOne(CartItem);\r\nCartItem.belongsTo(CartItem);\r\nOrder.hasMany(OrderItem, { as: 'Items' });\r\nOrderItem.belongsTo(Order, {as: 'Item'})\r\nProfile.hasMany(Order);\r\nOrder.belongsTo(Profile);\r\n\r\n\r\nmodule.exports = {\r\n    db,\r\n    User, \r\n    Profile, \r\n    Address,\r\n    Product, \r\n    Vendor, \r\n    Cart, \r\n    CartItem, \r\n    Order,\r\n    OrderItem,\r\n    dbTest\r\n}"]},"metadata":{},"sourceType":"script"}