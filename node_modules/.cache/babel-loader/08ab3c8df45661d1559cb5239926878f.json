{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst fetchUser = createAsyncThunk('users/fetchUserStatus', async _ref => {\n  let {\n    thunkAPI\n  } = _ref;\n  const response = await authService.login();\n  return response.data;\n});\nconst status = {\n  IDLE: 'Idle',\n  LOADING: 'Loading',\n  FULFILLED: 'Fulfilled',\n  ERROR: 'Error'\n};\nconst initialState = {\n  status: status.IDLE,\n  user: {},\n  profile: {}\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: initialState,\n  reducers: {\n    loadUserStart(state) {\n      state.user = {};\n      state.profile = {};\n      state.status = status.LOADING;\n    },\n\n    loadUserComplete(state, action) {\n      state.user = action.payload;\n      state.profile = {};\n      state.status = status.LOADING;\n    },\n\n    loadProfileStart(state) {\n      state.status = status.LOADING;\n      state.profile = {};\n    },\n\n    loadProfileComplete(state, action) {\n      state.status = status.FULFILLED;\n      state.profile = action.payload;\n    },\n\n    loadProfileFailed(state) {\n      state.status = status.ERROR;\n    },\n\n    loadUserFailed(state) {\n      state.status = status.ERROR;\n      state.user = {};\n      state.profile = {};\n    },\n\n    createUserStart(state) {\n      state.status = status.LOADING;\n      state.user = {};\n      state.profile = {};\n    },\n\n    createUserComplete(state, action) {\n      state.status = status.FULFILLED;\n      state.user = action.payload;\n      state.profile = action.payload;\n    },\n\n    createUserFailed(state, action) {\n      state.status = status.ERROR;\n      state.user = {};\n      state.profile = {};\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUser.fulfilled), (state, action) => {\n      state.user = action.payload;\n    };\n  }\n});\nexport const {\n  loadUserStart,\n  loadUserComplete,\n  loadUserFailed,\n  loadProfileStart,\n  loadProfileComplete,\n  loadProfileFailed\n} = userSlice.actions;\n\nconst selectUser = state => state.user;\n\nconst selectProfile = state => state.profile;\n\nexport default userSlice.reducer;\nexport const getCompleteUser = (username, password) => async dispatch => {\n  try {\n    dispatch(loadUserStart());\n    const user = await fetchUser(username, password);\n    dispatch(loadUserComplete(user));\n    dispatch(loadProfileStart());\n    const profile = await fetchUserProfile();\n    dispatch(loadProfileComplete(profile));\n  } catch (err) {\n    dispatch(loadUserFailed);\n    dispatch(loadProfileFailed);\n  }\n};\ncons;","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/ui/src/app/userSlice.js"],"names":["createSlice","createAsyncThunk","fetchUser","thunkAPI","response","authService","login","data","status","IDLE","LOADING","FULFILLED","ERROR","initialState","user","profile","userSlice","name","reducers","loadUserStart","state","loadUserComplete","action","payload","loadProfileStart","loadProfileComplete","loadProfileFailed","loadUserFailed","createUserStart","createUserComplete","createUserFailed","extraReducers","builder","addCase","fulfilled","actions","selectUser","selectProfile","reducer","getCompleteUser","username","password","dispatch","fetchUserProfile","err","cons"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nconst fetchUser = createAsyncThunk(\r\n    'users/fetchUserStatus', \r\n    async ({ thunkAPI }) => {\r\n        const response = await authService.login();\r\n        return response.data;\r\n    }\r\n)\r\n\r\n\r\n\r\nconst status = {\r\n    IDLE: 'Idle',\r\n    LOADING: 'Loading', \r\n    FULFILLED: 'Fulfilled',\r\n    ERROR: 'Error'\r\n}\r\n\r\nconst initialState = {\r\n    status: status.IDLE,\r\n    user: {},\r\n    profile: {}\r\n}\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: initialState,\r\n    reducers: {\r\n        loadUserStart(state) {\r\n            state.user = {};\r\n            state.profile = {};\r\n            state.status = status.LOADING;\r\n        },\r\n        loadUserComplete(state, action) {\r\n            state.user = action.payload;\r\n            state.profile = {};\r\n            state.status = status.LOADING;\r\n        },\r\n        loadProfileStart(state) {\r\n            state.status = status.LOADING\r\n            state.profile = {};\r\n        },\r\n        loadProfileComplete(state, action) {\r\n            state.status = status.FULFILLED;\r\n            state.profile = action.payload;\r\n        },\r\n        loadProfileFailed(state) {\r\n            state.status = status.ERROR\r\n        },\r\n        loadUserFailed(state) {\r\n            state.status = status.ERROR;\r\n            state.user = {};\r\n            state.profile = {};\r\n        },\r\n\r\n        createUserStart(state) {\r\n            state.status = status.LOADING;\r\n            state.user = {};\r\n            state.profile = {};\r\n        },\r\n        createUserComplete(state, action) {\r\n            state.status = status.FULFILLED;\r\n            state.user = action.payload;\r\n            state.profile = action.payload;\r\n        },\r\n        createUserFailed(state, action) {\r\n            state.status = status.ERROR;\r\n            state.user = {};\r\n            state.profile = {};\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchUser.fulfilled), (state, action) => {\r\n            state.user = action.payload\r\n        }\r\n    \r\n    }\r\n   \r\n})\r\n\r\nexport const {\r\n    loadUserStart,\r\n    loadUserComplete, \r\n    loadUserFailed, \r\n    loadProfileStart, \r\n    loadProfileComplete,\r\n    loadProfileFailed\r\n} = userSlice.actions\r\n\r\nconst selectUser = (state) => state.user\r\nconst selectProfile = (state) => state.profile\r\n\r\n\r\nexport default userSlice.reducer\r\n\r\nexport const getCompleteUser = (username, password) => async (dispatch) => {\r\n    try {\r\n        dispatch(loadUserStart());\r\n        const user = await fetchUser(username, password);\r\n        dispatch(loadUserComplete(user));\r\n        dispatch(loadProfileStart())\r\n        const profile = await fetchUserProfile();\r\n        dispatch(loadProfileComplete(profile));\r\n\r\n        \r\n    } catch (err) {\r\n        dispatch(loadUserFailed);\r\n        dispatch(loadProfileFailed)\r\n    }\r\n}\r\n\r\n\r\ncons"]},"metadata":{},"sourceType":"module"}