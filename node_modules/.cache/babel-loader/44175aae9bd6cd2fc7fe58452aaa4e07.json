{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\n\nconst SequelizeErrors = require(\"../../errors\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst DataTypes = require(\"../../data-types\").mysql;\n\nconst momentTz = require(\"moment-timezone\");\n\nconst debug = logger.debugContext(\"connection:mysql\");\n\nconst parserStore = require(\"../parserStore\")(\"mysql\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mysql2\");\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n\n    return next();\n  }\n\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: \"-FOUND_ROWS\",\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true\n    }, config.dialectOptions);\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection2 = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          connection2.removeListener(\"connect\", connectHandler);\n          connection2.removeListener(\"error\", connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          connection2.removeListener(\"error\", errorHandler);\n          resolve(connection2);\n        };\n\n        connection2.on(\"error\", errorHandler);\n        connection2.once(\"connect\", connectHandler);\n      });\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n\n        case \"EHOSTUNREACH\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    if (connection._closing) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection && !connection._fatalError && !connection._protocolError && !connection._closing && !connection.stream.destroyed;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["AbstractConnectionManager","require","SequelizeErrors","logger","DataTypes","mysql","momentTz","debug","debugContext","parserStore","promisify","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","field","next","get","type","options","connectionConfig","__spreadValues","host","user","username","flags","password","database","timezone","typeCast","ConnectionManager","_typecast","bind","bigNumberStrings","supportBigNumbers","dialectOptions","connection","Promise","resolve","reject","connection2","createConnection","errorHandler","e","removeListener","connectHandler","on","once","error","code","pool","destroy","keepDefaultTimezone","tzOffset","test","tz","format","cb","query","err","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","_closing","callback","end","validate","_fatalError","_protocolError","stream","destroyed","module","exports","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\mysql\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}