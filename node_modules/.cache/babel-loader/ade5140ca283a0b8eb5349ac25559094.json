{"ast":null,"code":"const {\n  DataTypes,\n  Model\n} = require('sequelize');\n\nmodule.exports = (sequelize, Sequelize) => {\n  class ProductModel extends Model {\n    changeQuantity(order) {\n      const updateQuantity = this.quantity - order;\n\n      if (updateQuantity < 0) {\n        throw new Error(`Not Enough ${this.productName} in stock. Please lower desired quantity by ${updateQuantity}`);\n      } else {\n        this.quantity = updateQuantity;\n      }\n    }\n\n    static isOutOfStock() {\n      if (this.quantity <= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    productOrder(orderQuantity) {\n      while (this.quantity > 0) return this.quantity = this.quantity - orderQuantity;\n    }\n\n  }\n\n  ProductModel.init({\n    id: {\n      type: DataTypes.UUID,\n      defaultValue: DataTypes.UUIDV4,\n      primaryKey: true\n    },\n    productName: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    description: {\n      type: DataTypes.TEXT\n    },\n    price: {\n      type: DataTypes.DECIMAL,\n      allowNull: false\n    },\n    quantity: {\n      type: DataTypes.DECIMAL,\n      allowNull: false,\n      defaultValue: 0\n    },\n    vendorID: {\n      type: DataTypes.UUID,\n      defaultValue: DataTypes.UUIDV4\n    },\n    category: {\n      type: DataTypes.ENUM({\n        values: [\"Laptop\", \"Desktop\", \"Gaming Console\", \"Tablet\", \"Wearables\", \"Cellphone\"]\n      })\n    }\n  }, {\n    sequelize,\n    modelName: 'Product'\n  });\n  return ProductModel;\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Models/Store/Product.js"],"names":["DataTypes","Model","require","module","exports","sequelize","Sequelize","ProductModel","changeQuantity","order","updateQuantity","quantity","Error","productName","isOutOfStock","productOrder","orderQuantity","init","id","type","UUID","defaultValue","UUIDV4","primaryKey","STRING","allowNull","description","TEXT","price","DECIMAL","vendorID","category","ENUM","values","modelName"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAuBC,OAAO,CAAC,WAAD,CAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACvC,QAAMC,YAAN,SAA2BN,KAA3B,CAAiC;AAC7BO,IAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,YAAMC,cAAc,GAAG,KAAKC,QAAL,GAAgBF,KAAvC;;AACA,UAAIC,cAAc,GAAG,CAArB,EAAwB;AACpB,cAAM,IAAIE,KAAJ,CAAW,cAAa,KAAKC,WAAY,+CAA8CH,cAAe,EAAtG,CAAN;AACH,OAFD,MAEO;AACH,aAAKC,QAAL,GAAgBD,cAAhB;AACH;AACJ;;AACkB,WAAZI,YAAY,GAAG;AAClB,UAAI,KAAKH,QAAL,IAAiB,CAArB,EAAwB;AACpB,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;;AAEDI,IAAAA,YAAY,CAACC,aAAD,EAAgB;AACxB,aAAM,KAAKL,QAAL,GAAgB,CAAtB,EACF,OAAQ,KAAKA,QAAL,GAAgB,KAAKA,QAAL,GAAgBK,aAAxC;AACD;;AApB4B;;AAuBhCT,EAAAA,YAAY,CAACU,IAAb,CAAkB;AACfC,IAAAA,EAAE,EAAE;AACAC,MAAAA,IAAI,EAAEnB,SAAS,CAACoB,IADhB;AAEAC,MAAAA,YAAY,EAAErB,SAAS,CAACsB,MAFxB;AAGAC,MAAAA,UAAU,EAAE;AAHZ,KADW;AAMfV,IAAAA,WAAW,EAAE;AACTM,MAAAA,IAAI,EAAEnB,SAAS,CAACwB,MADP;AAETC,MAAAA,SAAS,EAAE;AAFF,KANE;AAWfC,IAAAA,WAAW,EAAE;AACTP,MAAAA,IAAI,EAAEnB,SAAS,CAAC2B;AADP,KAXE;AAefC,IAAAA,KAAK,EAAE;AACHT,MAAAA,IAAI,EAAEnB,SAAS,CAAC6B,OADb;AAEHJ,MAAAA,SAAS,EAAE;AAFR,KAfQ;AAmBfd,IAAAA,QAAQ,EAAE;AACNQ,MAAAA,IAAI,EAAEnB,SAAS,CAAC6B,OADV;AAENJ,MAAAA,SAAS,EAAE,KAFL;AAGNJ,MAAAA,YAAY,EAAE;AAHR,KAnBK;AAyBfS,IAAAA,QAAQ,EAAE;AACNX,MAAAA,IAAI,EAAEnB,SAAS,CAACoB,IADV;AAENC,MAAAA,YAAY,EAAErB,SAAS,CAACsB;AAFlB,KAzBK;AA6BfS,IAAAA,QAAQ,EAAE;AACNZ,MAAAA,IAAI,EAAEnB,SAAS,CAACgC,IAAV,CAAe;AACjBC,QAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,gBAAtB,EAAwC,QAAxC,EAAkD,WAAlD,EAA+D,WAA/D;AADS,OAAf;AADA;AA7BK,GAAlB,EAoCE;AAAC5B,IAAAA,SAAD;AAAY6B,IAAAA,SAAS,EAAE;AAAvB,GApCF;AAqCL,SAAO3B,YAAP;AACC,CA9DD","sourcesContent":["const { DataTypes, Model } = require('sequelize');\r\n\r\nmodule.exports = (sequelize, Sequelize) => {\r\n    class ProductModel extends Model {\r\n        changeQuantity(order) {\r\n            const updateQuantity = this.quantity - order;\r\n            if (updateQuantity < 0) {\r\n                throw new Error(`Not Enough ${this.productName} in stock. Please lower desired quantity by ${updateQuantity}`)\r\n            } else {\r\n                this.quantity = updateQuantity\r\n            }\r\n        }\r\n        static isOutOfStock() {\r\n            if (this.quantity <= 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n\r\n        productOrder(orderQuantity) {\r\n            while(this.quantity > 0)\r\n          return  this.quantity = this.quantity - orderQuantity\r\n        }\r\n\r\n    }\r\n     ProductModel.init({\r\n        id: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n            primaryKey: true\r\n        },\r\n        productName: {\r\n            type: DataTypes.STRING,\r\n            allowNull: false,\r\n          \r\n            },\r\n        description: {\r\n            type: DataTypes.TEXT,\r\n\r\n        },\r\n        price: {\r\n            type: DataTypes.DECIMAL,\r\n            allowNull: false\r\n        },\r\n        quantity: {\r\n            type: DataTypes.DECIMAL,\r\n            allowNull: false,\r\n            defaultValue: 0,\r\n           \r\n            },\r\n        vendorID: {\r\n            type: DataTypes.UUID,\r\n            defaultValue: DataTypes.UUIDV4,\r\n        },\r\n        category: {\r\n            type: DataTypes.ENUM({\r\n                values: [\"Laptop\", \"Desktop\", \"Gaming Console\", \"Tablet\", \"Wearables\", \"Cellphone\"]\r\n            })\r\n         },\r\n        \r\n      \r\n    }, {sequelize, modelName: 'Product'})\r\nreturn ProductModel\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script"}