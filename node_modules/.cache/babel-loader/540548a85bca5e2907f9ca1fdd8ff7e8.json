{"ast":null,"code":"\"use strict\";\n\nconst {\n  Pool,\n  TimeoutError\n} = require(\"sequelize-pool\");\n\nconst _ = require(\"lodash\");\n\nconst semver = require(\"semver\");\n\nconst errors = require(\"../../errors\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst deprecations = require(\"../../utils/deprecations\");\n\nconst debug = logger.debugContext(\"pool\");\n\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error(\"Support for pool:false was removed in v4.0\");\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 1e4,\n      acquire: 6e4,\n      evict: 1e3,\n      validate: this._validate.bind(this)\n    });\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, \"parse\")) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n\n      return require(moduleName);\n    } catch (err) {\n      if (err.code === \"MODULE_NOT_FOUND\") {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug(\"connection drain due to process exit\");\n    return await this.pool.destroyAllNow();\n  }\n\n  async close() {\n    this.getConnection = async function getConnection() {\n      throw new Error(\"ConnectionManager.getConnection was called after the connection manager was closed!\");\n    };\n\n    return await this._onProcessExit();\n  }\n\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: \"sequelize\",\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug(\"connection destroy\");\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, \"replication\"));\n    config.replication.read = config.replication.read.map(readConfig => _.defaults(readConfig, _.omit(this.config, \"replication\")));\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === \"read\") {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === void 0 ? false : useMaster;\n\n        if (queryType === \"SELECT\" && !useMaster) {\n          return this.pool.read.acquire();\n        }\n\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug(\"connection destroy\");\n      },\n      destroyAllNow: async () => {\n        await Promise.all([this.pool.read.destroyAllNow(), this.pool.write.destroyAllNow()]);\n        debug(\"all connections destroyed\");\n      },\n      drain: async () => Promise.all([this.pool.write.drain(), this.pool.read.drain()]),\n      read: new Pool({\n        name: \"sequelize:read\",\n        create: async () => {\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = \"read\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: \"sequelize:write\",\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = \"write\";\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n            _options.transaction = {\n              connection\n            };\n\n            _options.logging = () => {};\n\n            _options.logging.__testLoggingFn = true;\n\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), \"version\") || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion) ? parsedVersion : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug(\"connection acquired\");\n    return result;\n  }\n\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug(\"connection released\");\n  }\n\n  async _connect(config) {\n    await this.sequelize.runHooks(\"beforeConnect\", config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks(\"afterConnect\", connection, config);\n    return connection;\n  }\n\n  async _disconnect(connection) {\n    await this.sequelize.runHooks(\"beforeDisconnect\", connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks(\"afterDisconnect\", connection);\n  }\n\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"mappings":"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","names":["Pool","TimeoutError","require","_","semver","errors","logger","deprecations","debug","debugContext","constructor","dialect","sequelize","config","cloneDeep","versionPromise","dialectName","options","pool","Error","defaults","max","min","idle","acquire","evict","validate","_validate","bind","initPools","refreshTypeParser","dataTypes","each","dataType","Object","prototype","hasOwnProperty","call","types","_refreshTypeParser","key","_loadDialectModule","moduleName","dialectModulePath","dialectModule","err","code","drain","destroyAllNow","getConnection","_onProcessExit","replication","name","create","_connect","destroy","connection","result","_disconnect","acquireTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","maxUses","Array","isArray","read","write","omit","map","readConfig","reads","release","client","queryType","useMaster","Promise","all","nextRead","length","databaseVersion","_options","transaction","logging","__testLoggingFn","version","parsedVersion","get","coerce","valid","defaultVersion","lt","unsupportedEngine","type","error","ConnectionAcquireTimeoutError","runHooks","connectionManager","connect","disconnect","module","exports","ConnectionManager","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\abstract\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst { Pool, TimeoutError } = require('sequelize-pool');\nconst _ = require('lodash');\nconst semver = require('semver');\nconst errors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst deprecations = require('../../utils/deprecations');\nconst debug = logger.debugContext('pool');\n\n/**\n * Abstract Connection Manager\n *\n * Connection manager which handles pooling & replication.\n * Uses sequelize-pool for pooling\n *\n * @private\n */\nclass ConnectionManager {\n  constructor(dialect, sequelize) {\n    const config = _.cloneDeep(sequelize.config);\n\n    this.sequelize = sequelize;\n    this.config = config;\n    this.dialect = dialect;\n    this.versionPromise = null;\n    this.dialectName = this.sequelize.options.dialect;\n\n    if (config.pool === false) {\n      throw new Error('Support for pool:false was removed in v4.0');\n    }\n\n    config.pool = _.defaults(config.pool || {}, {\n      max: 5,\n      min: 0,\n      idle: 10000,\n      acquire: 60000,\n      evict: 1000,\n      validate: this._validate.bind(this)\n    });\n\n    this.initPools();\n  }\n\n  refreshTypeParser(dataTypes) {\n    _.each(dataTypes, dataType => {\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\n        if (dataType.types[this.dialectName]) {\n          this._refreshTypeParser(dataType);\n        } else {\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Try to load dialect module from various configured options.\n   * Priority goes like dialectModulePath > dialectModule > require(default)\n   *\n   * @param {string} moduleName Name of dialect module to lookup\n   *\n   * @private\n   * @returns {object}\n   */\n  _loadDialectModule(moduleName) {\n    try {\n      if (this.sequelize.config.dialectModulePath) {\n        return require(this.sequelize.config.dialectModulePath);\n      }\n      if (this.sequelize.config.dialectModule) {\n        return this.sequelize.config.dialectModule;\n      }\n      return require(moduleName);\n\n    } catch (err) {\n      if (err.code === 'MODULE_NOT_FOUND') {\n        if (this.sequelize.config.dialectModulePath) {\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\n        }\n        throw new Error(`Please install ${moduleName} package manually`);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Handler which executes on process exit or connection manager shutdown\n   *\n   * @private\n   * @returns {Promise}\n   */\n  async _onProcessExit() {\n    if (!this.pool) {\n      return;\n    }\n\n    await this.pool.drain();\n    debug('connection drain due to process exit');\n\n    return await this.pool.destroyAllNow();\n  }\n\n  /**\n   * Drain the pool and close it permanently\n   *\n   * @returns {Promise}\n   */\n  async close() {\n    // Mark close of pool\n    this.getConnection = async function getConnection() {\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\n    };\n\n    return await this._onProcessExit();\n  }\n\n  /**\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\n   * be created unless `pool.acquire` is called.\n   */\n  initPools() {\n    const config = this.config;\n\n    if (!config.replication) {\n      this.pool = new Pool({\n        name: 'sequelize',\n        create: () => this._connect(config),\n        destroy: async connection => {\n          const result = await this._disconnect(connection);\n          debug('connection destroy');\n          return result;\n        },\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      });\n\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\n\n      return;\n    }\n\n    if (!Array.isArray(config.replication.read)) {\n      config.replication.read = [config.replication.read];\n    }\n\n    // Map main connection config\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\n\n    // Apply defaults to each read config\n    config.replication.read = config.replication.read.map(readConfig =>\n      _.defaults(readConfig, _.omit(this.config, 'replication'))\n    );\n\n    // custom pooling for replication (original author @janmeier)\n    let reads = 0;\n    this.pool = {\n      release: client => {\n        if (client.queryType === 'read') {\n          this.pool.read.release(client);\n        } else {\n          this.pool.write.release(client);\n        }\n      },\n      acquire: (queryType, useMaster) => {\n        useMaster = useMaster === undefined ? false : useMaster;\n        if (queryType === 'SELECT' && !useMaster) {\n          return this.pool.read.acquire();\n        }\n        return this.pool.write.acquire();\n      },\n      destroy: connection => {\n        this.pool[connection.queryType].destroy(connection);\n        debug('connection destroy');\n      },\n      destroyAllNow: async () => {\n        await Promise.all([\n          this.pool.read.destroyAllNow(),\n          this.pool.write.destroyAllNow()\n        ]);\n\n        debug('all connections destroyed');\n      },\n      drain: async () => Promise.all([\n        this.pool.write.drain(),\n        this.pool.read.drain()\n      ]),\n      read: new Pool({\n        name: 'sequelize:read',\n        create: async () => {\n          // round robin config\n          const nextRead = reads++ % config.replication.read.length;\n          const connection = await this._connect(config.replication.read[nextRead]);\n          connection.queryType = 'read';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      }),\n      write: new Pool({\n        name: 'sequelize:write',\n        create: async () => {\n          const connection = await this._connect(config.replication.write);\n          connection.queryType = 'write';\n          return connection;\n        },\n        destroy: connection => this._disconnect(connection),\n        validate: config.pool.validate,\n        max: config.pool.max,\n        min: config.pool.min,\n        acquireTimeoutMillis: config.pool.acquire,\n        idleTimeoutMillis: config.pool.idle,\n        reapIntervalMillis: config.pool.evict,\n        maxUses: config.pool.maxUses\n      })\n    };\n\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\n  }\n\n  /**\n   * Get connection from pool. It sets database version if it's not already set.\n   * Call pool.acquire to get a connection\n   *\n   * @param {object}   [options]                 Pool options\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\n   *\n   * @returns {Promise<Connection>}\n   */\n  async getConnection(options) {\n    options = options || {};\n\n    if (this.sequelize.options.databaseVersion === 0) {\n      if (!this.versionPromise) {\n        this.versionPromise = (async () => {\n          try {\n            const connection = await this._connect(this.config.replication.write || this.config);\n            const _options = {};\n\n            _options.transaction = { connection }; // Cheat .query to use our private connection\n            _options.logging = () => {};\n            _options.logging.__testLoggingFn = true;\n\n            //connection might have set databaseVersion value at initialization,\n            //avoiding a useless round trip\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = await this.sequelize.databaseVersion(_options);\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\n                ? parsedVersion\n                : this.dialect.defaultVersion;\n            }\n\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\n              deprecations.unsupportedEngine();\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\n            }\n\n            this.versionPromise = null;\n            return await this._disconnect(connection);\n          } catch (err) {\n            this.versionPromise = null;\n            throw err;\n          }\n        })();\n      }\n      await this.versionPromise;\n    }\n\n    let result;\n\n    try {\n      result = await this.pool.acquire(options.type, options.useMaster);\n    } catch (error) {\n      if (error instanceof TimeoutError) throw new errors.ConnectionAcquireTimeoutError(error);\n      throw error;\n    }\n\n    debug('connection acquired');\n\n    return result;\n  }\n\n  /**\n   * Release a pooled connection so it can be utilized by other connection requests\n   *\n   * @param {Connection} connection\n   *\n   * @returns {Promise}\n   */\n  async releaseConnection(connection) {\n    this.pool.release(connection);\n    debug('connection released');\n  }\n\n  /**\n   * Call dialect library to get connection\n   *\n   * @param {*} config Connection config\n   * @private\n   * @returns {Promise<Connection>}\n   */\n  async _connect(config) {\n    await this.sequelize.runHooks('beforeConnect', config);\n    const connection = await this.dialect.connectionManager.connect(config);\n    await this.sequelize.runHooks('afterConnect', connection, config);\n    return connection;\n  }\n\n  /**\n   * Call dialect library to disconnect a connection\n   *\n   * @param {Connection} connection\n   * @private\n   * @returns {Promise}\n   */\n  async _disconnect(connection) {\n    await this.sequelize.runHooks('beforeDisconnect', connection);\n    await this.dialect.connectionManager.disconnect(connection);\n    return this.sequelize.runHooks('afterDisconnect', connection);\n  }\n\n  /**\n   * Determine if a connection is still valid or not\n   *\n   * @param {Connection} connection\n   *\n   * @returns {boolean}\n   */\n  _validate(connection) {\n    if (!this.dialect.connectionManager.validate) {\n      return true;\n    }\n\n    return this.dialect.connectionManager.validate(connection);\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}