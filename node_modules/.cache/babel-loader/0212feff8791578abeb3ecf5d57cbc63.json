{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nclass Transaction {\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n    this.options = __spreadValues({\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false\n    }, options);\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = \"commit\";\n      this.cleanup();\n\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error(\"Transaction cannot be rolled back because it never started\");\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().rollbackTransaction(this, this.options);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  async prepareEnvironment(useCLS) {\n    let connectionPromise;\n\n    if (useCLS === void 0) {\n      useCLS = true;\n    }\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = {\n        uuid: this.id\n      };\n\n      if (this.options.readOnly) {\n        acquireOptions.type = \"SELECT\";\n      }\n\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr;\n      }\n    }\n\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set(\"transaction\", this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this.sequelize.getQueryInterface().deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    if (this.parent || this.connection.uuid === void 0) return;\n\n    this._clearCls();\n\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = void 0;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get(\"transaction\") === this) {\n        cls.set(\"transaction\", null);\n      }\n    }\n  }\n\n  afterCommit(fn) {\n    if (!fn || typeof fn !== \"function\") {\n      throw new Error('\"fn\" must be a function');\n    }\n\n    this._afterCommitHooks.push(fn);\n  }\n\n  static get TYPES() {\n    return {\n      DEFERRED: \"DEFERRED\",\n      IMMEDIATE: \"IMMEDIATE\",\n      EXCLUSIVE: \"EXCLUSIVE\"\n    };\n  }\n\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n      READ_COMMITTED: \"READ COMMITTED\",\n      REPEATABLE_READ: \"REPEATABLE READ\",\n      SERIALIZABLE: \"SERIALIZABLE\"\n    };\n  }\n\n  static get LOCK() {\n    return {\n      UPDATE: \"UPDATE\",\n      SHARE: \"SHARE\",\n      KEY_SHARE: \"KEY SHARE\",\n      NO_KEY_UPDATE: \"NO KEY UPDATE\"\n    };\n  }\n\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;","map":{"version":3,"mappings":"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","names":["constructor","sequelize","options","savepoints","_afterCommitHooks","generateTransactionId","dialect","queryGenerator","__spreadValues","type","transactionType","isolationLevel","readOnly","parent","transaction","id","push","name","length","finished","Error","getQueryInterface","commitTransaction","cleanup","hook","apply","connection","rollbackTransaction","useCLS","connectionPromise","Promise","resolve","acquireOptions","uuid","connectionManager","getConnection","result","begin","setDeferrable","setupErr","rollback","_cls","set","deferrable","deferConstraints","queryInterface","supports","settingIsolationLevelDuringTransaction","startTransaction","setIsolationLevel","_clearCls","res","releaseConnection","cls","get","afterCommit","fn","DEFERRED","IMMEDIATE","EXCLUSIVE","READ_UNCOMMITTED","READ_COMMITTED","REPEATABLE_READ","SERIALIZABLE","UPDATE","SHARE","KEY_SHARE","NO_KEY_UPDATE","Transaction","LOCK","module","exports","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\transaction.js"],"sourcesContent":["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = 'commit';\n      this.cleanup();\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n    } finally {\n      this.cleanup();\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS) {\n    let connectionPromise;\n\n    if (useCLS === undefined) {\n      useCLS = true;\n    }\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) return;\n\n    this._clearCls();\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n    return res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"]},"metadata":{},"sourceType":"script"}