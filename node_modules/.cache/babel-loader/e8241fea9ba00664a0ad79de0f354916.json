{"ast":null,"code":"\"use strict\";\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\");\n          return \"VARBINARY(256)\";\n        }\n\n        warn(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n\n      return \"VARBINARY(MAX)\";\n    }\n\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n\n      return `BINARY(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n\n      return options.escape(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          warn(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\");\n          return \"NVARCHAR(256)\";\n        }\n\n        warn(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n\n      return \"NVARCHAR(MAX)\";\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._decimals) {\n        warn(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n\n      if (this._unsigned) {\n        warn(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n\n      if (this._zerofill) {\n        warn(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["moment","require","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","DATE","types","mssql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","toSql","toLowerCase","_hexify","hex","_binary","_stringify","value","prototype","escape","_bindParam","bindParam","Buffer","from","NOW","format","constructor","removeUnsupportedIntegerOptions","decimals","_decimals"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\mssql\\data-types.js"],"sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}