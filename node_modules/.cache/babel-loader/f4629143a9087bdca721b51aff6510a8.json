{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst wkx = require(\"wkx\");\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"http://www.postgresql.org/docs/9.4/static/datatype.html\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.UUID.types.postgres = [\"uuid\"];\n  BaseTypes.CIDR.types.postgres = [\"cidr\"];\n  BaseTypes.INET.types.postgres = [\"inet\"];\n  BaseTypes.MACADDR.types.postgres = [\"macaddr\"];\n  BaseTypes.TSVECTOR.types.postgres = [\"tsvector\"];\n  BaseTypes.JSON.types.postgres = [\"json\"];\n  BaseTypes.JSONB.types.postgres = [\"jsonb\"];\n  BaseTypes.TIME.types.postgres = [\"time\"];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return \"Infinity\";\n      }\n\n      if (value === -Infinity) {\n        return \"-Infinity\";\n      }\n\n      return super._stringify(value, options);\n    }\n\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n\n          if (lower === \"infinity\") {\n            return Infinity;\n          }\n\n          if (lower === \"-infinity\") {\n            return -Infinity;\n          }\n        }\n\n        return super._sanitize(value);\n      }\n\n      return value;\n    }\n\n    static parse(value) {\n      if (value === \"infinity\") {\n        return Infinity;\n      }\n\n      if (value === \"-infinity\") {\n        return -Infinity;\n      }\n\n      return value;\n    }\n\n  }\n\n  BaseTypes.DATEONLY.types.postgres = [\"date\"];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n\n  }\n\n  BaseTypes.DECIMAL.types.postgres = [\"numeric\"];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  BaseTypes.STRING.types.postgres = [\"varchar\"];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n\n      return \"TEXT\";\n    }\n\n  }\n\n  BaseTypes.TEXT.types.postgres = [\"text\"];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n\n  }\n\n  BaseTypes.CITEXT.types.postgres = [\"citext\"];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return \"BYTEA\";\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  BaseTypes.CHAR.types.postgres = [\"char\", \"bpchar\"];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n\n    _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n\n        if (typeof value === \"string\") {\n          return [\"true\", \"t\"].includes(value) ? true : [\"false\", \"f\"].includes(value) ? false : value;\n        }\n\n        if (typeof value === \"number\") {\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  BaseTypes.BOOLEAN.types.postgres = [\"bool\"];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP WITH TIME ZONE\";\n    }\n\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n\n      return true;\n    }\n\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return \"Infinity\";\n      }\n\n      if (value === -Infinity) {\n        return \"-Infinity\";\n      }\n\n      return super._stringify(value, options);\n    }\n\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === \"string\") {\n          const lower = value.toLowerCase();\n\n          if (lower === \"infinity\") {\n            return Infinity;\n          }\n\n          if (lower === \"-infinity\") {\n            return -Infinity;\n          }\n        }\n\n        return new Date(value);\n      }\n\n      return value;\n    }\n\n  }\n\n  BaseTypes.DATE.types.postgres = [\"timestamptz\"];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  BaseTypes.TINYINT.types.postgres = [\"int2\"];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  BaseTypes.SMALLINT.types.postgres = [\"int2\"];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  BaseTypes.INTEGER.types.postgres = [\"int4\"];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  BaseTypes.BIGINT.types.postgres = [\"int8\"];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  BaseTypes.REAL.types.postgres = [\"float4\"];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  BaseTypes.DOUBLE.types.postgres = [\"float8\"];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._decimals) {\n        warn(\"PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._decimals = void 0;\n      }\n\n      if (this._unsigned) {\n        warn(\"PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n\n      if (this._zerofill) {\n        warn(\"PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  delete FLOAT.parse;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn(\"PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.\");\n        this._length = void 0;\n      }\n\n      return \"BYTEA\";\n    }\n\n    _hexify(hex) {\n      return `E'\\\\\\\\x${hex}'`;\n    }\n\n  }\n\n  BaseTypes.BLOB.types.postgres = [\"bytea\"];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n\n      if (this.type) {\n        result += `(${this.type}`;\n\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n\n        result += \")\";\n      }\n\n      return result;\n    }\n\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({\n        shortCrs: true\n      });\n    }\n\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = [\"geometry\"];\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = \"GEOGRAPHY\";\n\n      if (this.type) {\n        result += `(${this.type}`;\n\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n\n        result += \")\";\n      }\n\n      return result;\n    }\n\n    static parse(value) {\n      const b = Buffer.from(value, \"hex\");\n      return wkx.Geometry.parse(b).toGeoJSON({\n        shortCrs: true\n      });\n    }\n\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = [\"geography\"];\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n    }\n\n    _value(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n\n      return hstore.stringify(value);\n    }\n\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n\n    static parse(value) {\n      if (!hstore) {\n        hstore = require(\"./hstore\");\n      }\n\n      return hstore.parse(value);\n    }\n\n  }\n\n  HSTORE.prototype.escape = false;\n  BaseTypes.HSTORE.types.postgres = [\"hstore\"];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, \"value\")) {\n          if (Object.prototype.hasOwnProperty.call(value, \"inclusive\")) {\n            valueInclusivity[index] = value.inclusive;\n          }\n\n          value = value.value;\n        }\n\n        if (value === null || value === -Infinity || value === Infinity) {\n          return value;\n        }\n\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n\n        return options.escape(value);\n      });\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n\n    _stringify(values, options) {\n      const value = this._value(values, options);\n\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n\n      return `'${value}'`;\n    }\n\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n\n      return options.bindParam(value);\n    }\n\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n\n    static parse(value) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        parser: val => val\n      };\n      return range.parse(value, options.parser);\n    }\n\n  }\n\n  const range = require(\"./range\");\n\n  RANGE.prototype.escape = false;\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: \"int4range\",\n      decimal: \"numrange\",\n      date: \"tstzrange\",\n      dateonly: \"daterange\",\n      bigint: \"int8range\"\n    },\n    castTypes: {\n      integer: \"int4\",\n      decimal: \"numeric\",\n      date: \"timestamptz\",\n      dateonly: \"date\",\n      bigint: \"int8\"\n    }\n  };\n  BaseTypes.ARRAY.prototype.escape = false;\n\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n\n      return options.escape(value);\n    }, this);\n  };\n\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(\",\")}]`;\n\n    if (this.type) {\n      const Utils = require(\"../../utils\");\n\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== void 0;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : \"\";\n        castKey = `${Utils.addTicks(Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field), '\"')}[]`;\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n\n    return str;\n  };\n\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};","map":{"version":3,"mappings":"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","names":["_","require","wkx","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","UUID","types","postgres","CIDR","INET","MACADDR","TSVECTOR","JSON","JSONB","TIME","DATEONLY","_stringify","value","Infinity","_sanitize","raw","lower","toLowerCase","DECIMAL","STRING","toSql","_binary","TEXT","CITEXT","CHAR","BOOLEAN","Buffer","isBuffer","includes","parse","prototype","DATE","validate","Date","TINYINT","constructor","removeUnsupportedIntegerOptions","SMALLINT","INTEGER","parseInt","BIGINT","REAL","DOUBLE","FLOAT","decimals","_decimals","BLOB","_hexify","hex","GEOMETRY","result","type","srid","b","from","Geometry","toGeoJSON","shortCrs","escape","stringify","_bindParam","bindParam","GEOGRAPHY","hstore","HSTORE","_value","RANGE","values","Array","isArray","subtype","valueInclusivity","valuesStringified","map","index","isObject","Object","hasOwnProperty","call","inclusive","range","toCastType","subtypes","_subtype","castTypes","parser","val","integer","decimal","date","dateonly","bigint","ARRAY","str","join","Utils","castKey","ENUM","table","field","Model","getTableName","useSchema","schema","schemaWithDelimiter","addTicks","delimiter","generateEnumName","tableName"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\postgres\\data-types.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  /**\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   *\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = ['uuid'];\n  BaseTypes.CIDR.types.postgres = ['cidr'];\n  BaseTypes.INET.types.postgres = ['inet'];\n  BaseTypes.MACADDR.types.postgres = ['macaddr'];\n  BaseTypes.TSVECTOR.types.postgres = ['tsvector'];\n  BaseTypes.JSON.types.postgres = ['json'];\n  BaseTypes.JSONB.types.postgres = ['jsonb'];\n  BaseTypes.TIME.types.postgres = ['time'];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === 'infinity') {\n        return Infinity;\n      }\n      if (value === '-infinity') {\n        return -Infinity;\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATEONLY.types.postgres = ['date'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = ['numeric'];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.STRING.types.postgres = ['varchar'];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  BaseTypes.TEXT.types.postgres = ['text'];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.CITEXT.types.postgres = ['citext'];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.CHAR.types.postgres = ['char', 'bpchar'];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          return ['true', 't'].includes(value) ? true : ['false', 'f'].includes(value) ? false : value;\n        }\n        if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  BaseTypes.BOOLEAN.types.postgres = ['bool'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH TIME ZONE';\n    }\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATE.types.postgres = ['timestamptz'];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.TINYINT.types.postgres = ['int2'];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.SMALLINT.types.postgres = ['int2'];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = ['int4'];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int8\n  BaseTypes.BIGINT.types.postgres = ['int8'];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float4\n  BaseTypes.REAL.types.postgres = ['float4'];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float8\n  BaseTypes.DOUBLE.types.postgres = ['float8'];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // POSTGRES does only support lengths as parameter.\n      // Values between 1-24 result in REAL\n      // Values between 25-53 result in DOUBLE PRECISION\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._decimals = undefined;\n      }\n      if (this._unsigned) {\n        warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n        this._length = undefined;\n      }\n      return 'BYTEA';\n    }\n    _hexify(hex) {\n      // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n\n  BaseTypes.BLOB.types.postgres = ['bytea'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = ['geometry'];\n\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = 'GEOGRAPHY';\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON({ shortCrs: true });\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = ['geography'];\n\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.parse(value);\n    }\n  }\n\n  HSTORE.prototype.escape = false;\n\n  BaseTypes.HSTORE.types.postgres = ['hstore'];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, 'value')) {\n          if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === -Infinity || value === Infinity) {\n          // Pass through \"unbounded\" bounds unchanged\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      // Array.map does not preserve extra array properties\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value, options = { parser: val => val }) {\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require('./range');\n\n  RANGE.prototype.escape = false;\n\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: 'int4range',\n      decimal: 'numrange',\n      date: 'tstzrange',\n      dateonly: 'daterange',\n      bigint: 'int8range'\n    },\n    castTypes: {\n      integer: 'int4',\n      decimal: 'numeric',\n      date: 'timestamptz',\n      dateonly: 'date',\n      bigint: 'int8'\n    }\n  };\n\n  // TODO: Why are base types being manipulated??\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this);\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(',')}]`;\n\n    if (this.type) {\n      const Utils = require('../../utils');\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        const table = options.field.Model.getTableName();\n        const useSchema = table.schema !== undefined;\n        const schemaWithDelimiter = useSchema ? `${Utils.addTicks(table.schema, '\"')}${table.delimiter}` : '';\n\n        castKey = `${Utils.addTicks(\n          Utils.generateEnumName(useSchema ? table.tableName : table, options.field.field),\n          '\"'\n        ) }[]`;\n\n        str += `::${schemaWithDelimiter}${castKey}`;\n      } else {\n        str += `::${castKey}`;\n      }\n    }\n\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};\n"]},"metadata":{},"sourceType":"script"}