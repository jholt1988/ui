{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"sql:pg\");\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n\n        return void 0;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(_ref => {\n        let [alias, original] = _ref;\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      });\n    }\n\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      if (err.code === \"ECONNRESET\") {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, _ref2) => {\n        let [key, value] = _ref2;\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n\n          if (!field) {\n            return null;\n          }\n\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n\n      return rows;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n\n      for (const row of rows) {\n        let defParts;\n\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n\n        result.push(row);\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      let result = rows;\n\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n\n            return key;\n          });\n        });\n      }\n\n      return this.handleSelectQuery(result);\n    }\n\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = {\n            \"false\": false,\n            \"true\": true\n          }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n\n      return this.handleSelectQuery(rows);\n    }\n\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount];\n    }\n\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case \"42704\":\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return \"id\";\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","logger","debug","debugContext","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","formatBindParameters","skipValueReplace","i","seen","replacementFunc","match","key","values2","push","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","alias","original","reg","RegExp","escapeRegExp","query","Promise","resolve","reject","error","result","complete","_logQuery","queryResult","errForStack","Error","err","code","_invalid","formatError","stack","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","aliasesMapping","row","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","Object","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","test","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","EmptyResultError","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","errStack","errors","message","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","Query","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}