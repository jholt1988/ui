{"ast":null,"code":"\"use strict\";\n\nconst Toposort = require(\"toposort-class\");\n\nconst _ = require(\"lodash\");\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: \"name\"\n    });\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep2 => tableName !== dep2);\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":{"version":3,"mappings":";;AAEA,MAAMA,WAAWC,QAAQ,gBAAR,CAAjB;;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEA,mBAAmB;AACjBE,cAAYC,SAAZ,EAAuB;AACrB,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAAiB;;AAGnBE,WAASC,KAAT,EAAgB;AACd,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;AACA,SAAKH,SAAL,CAAeC,MAAf,CAAsBE,MAAME,IAA5B,IAAoCF,KAApC;AAEA,WAAOA,KAAP;AAAO;;AAGTG,cAAYC,aAAZ,EAA2B;AACzB,SAAKN,MAAL,GAAc,KAAKA,MAAL,CAAYO,MAAZ,CAAmBL,SAASA,MAAME,IAAN,KAAeE,cAAcF,IAAzD,CAAd;AAEA,WAAO,KAAKL,SAAL,CAAeC,MAAf,CAAsBM,cAAcF,IAApC,CAAP;AAA2C;;AAG7CI,WAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACzBA,cAAUb,EAAEc,QAAF,CAAWD,WAAW,EAAtB,EAA0B;AAClCE,iBAAW;AADuB,KAA1B,CAAV;AAIA,WAAO,KAAKZ,MAAL,CAAYa,IAAZ,CAAiBX,SAASA,MAAMQ,QAAQE,SAAd,MAA6BH,OAAvD,CAAP;AAA8D;;AAG5D,YAAM;AACR,WAAO,KAAKT,MAAZ;AAAY;;AAWdc,eAAaC,QAAb,EAAuBL,OAAvB,EAAgC;AAC9B,UAAMV,SAAS,EAAf;AACA,UAAMgB,SAAS,IAAIrB,QAAJ,EAAf;AACA,QAAIsB,MAAJ;AACA,QAAIC,GAAJ;AAEAR,cAAUb,EAAEc,QAAF,CAAWD,WAAW,EAAtB,EAA0B;AAClCS,eAAS;AADyB,KAA1B,CAAV;;AAIA,eAAWjB,KAAX,IAAoB,KAAKF,MAAzB,EAAiC;AAC/B,UAAIoB,OAAO,EAAX;AACA,UAAIC,YAAYnB,MAAMoB,YAAN,EAAhB;;AAEA,UAAIzB,EAAE0B,QAAF,CAAWF,SAAX,CAAJ,EAA2B;AACzBA,oBAAY,GAAGA,UAAUG,UAAUH,UAAUA,WAA7C;AAA6C;;AAG/CrB,aAAOqB,SAAP,IAAoBnB,KAApB;;AAEA,iBAAWuB,QAAX,IAAuBvB,MAAMwB,aAA7B,EAA4C;AAC1C,YAAIC,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC5B,MAAMwB,aAA3C,EAA0DD,QAA1D,CAAJ,EAAyE;AACvE,gBAAMb,YAAYV,MAAMwB,aAAN,CAAoBD,QAApB,CAAlB;;AAEA,cAAIb,UAAUmB,UAAd,EAA0B;AACxBb,kBAAMN,UAAUmB,UAAV,CAAqB7B,KAA3B;;AAEA,gBAAIL,EAAE0B,QAAF,CAAWL,GAAX,CAAJ,EAAqB;AACnBA,oBAAM,GAAGA,IAAIM,UAAUN,IAAIG,WAA3B;AAA2B;;AAG7BD,iBAAKjB,IAAL,CAAUe,GAAV;AAAU;AAAA;AAAA;;AAKhBE,aAAOA,KAAKb,MAAL,CAAYyB,QAAOX,cAAcW,IAAjC,CAAP;AAEAhB,aAAOiB,GAAP,CAAWZ,SAAX,EAAsBD,IAAtB;AAAsB;;AAGxBH,aAASD,OAAOkB,IAAP,EAAT;;AACA,QAAIxB,QAAQS,OAAZ,EAAqB;AACnBF,eAASA,OAAOE,OAAP,EAAT;AAAgB;;AAElB,eAAWf,IAAX,IAAmBa,MAAnB,EAA2B;AACzBF,eAASf,OAAOI,IAAP,CAAT,EAAuBA,IAAvB;AAAuB;AAAA;;AArFV;;AA0FnB+B,OAAOC,OAAP,GAAiBC,YAAjB;AACAF,OAAOC,OAAP,CAAeC,YAAf,GAA8BA,YAA9B;AACAF,OAAOC,OAAP,CAAeE,OAAf,GAAyBD,YAAzB","names":["Toposort","require","_","constructor","sequelize","models","addModel","model","push","name","removeModel","modelToRemove","filter","getModel","against","options","defaults","attribute","find","forEachModel","iterator","sorter","sorted","dep","reverse","deps","tableName","getTableName","isObject","schema","attrName","rawAttributes","Object","prototype","hasOwnProperty","call","references","dep2","add","sort","module","exports","ModelManager","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\model-manager.js"],"sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"]},"metadata":{},"sourceType":"script"}