{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst Transaction = require(\"../../transaction\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  async showAllSchemas(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  async databaseVersion(options) {\n    return await this.sequelize.query(this.queryGenerator.versionQuery(), __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.VERSION\n    }));\n  }\n\n  async createTable(tableName, attributes, options, model) {\n    let sql = \"\";\n    options = __spreadValues({}, options);\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === void 0) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(attributes, attribute => this.sequelize.normalizeAttribute(attribute));\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (!tableName.schema && (options.schema || !!model && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: \"createTable\"\n    });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async dropTable(tableName, options) {\n    options = __spreadValues({}, options);\n    options.cascade = options.cascade || options.force || false;\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, __spreadProps(__spreadValues({}, options), {\n          cascade: true\n        }));\n      }\n    }\n  }\n\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showAllTables(options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === \"string\") {\n      schema = options;\n    } else if (typeof options === \"object\" && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === \"object\" && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.DESCRIBE\n    });\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === \"ER_NO_SUCH_TABLE\") {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error(\"addColumn takes at least 3 arguments (table, attribute name, attribute definition)\");\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = {\n        type: dataTypeOrOptions,\n        allowNull: true\n      };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  quoteIdentifier(identifier2, force) {\n    return this.queryGenerator.quoteIdentifier(identifier2, force);\n  }\n\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: \"changeColumn\",\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n    return this.sequelize.query(sql, options);\n  }\n\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n\n    if (description[columnName]) {\n      return description;\n    }\n\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n    const _options = {};\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, this.queryGenerator.attributesToSQL(_options));\n    return await this.sequelize.query(sql, options);\n  }\n\n  async addIndex(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      supportsSearchPath: false\n    }));\n  }\n\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SHOWINDEXES\n    }));\n  }\n\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const results = await Promise.all(tableNames.map(tableName => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n    const result = {};\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i]) ? results[i].map(r => r.constraint_name) : [results[i] && results[i].constraint_name];\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n    return result;\n  }\n\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error(\"Fields must be specified through options.fields\");\n    }\n\n    if (!options.type) {\n      throw new Error(\"Constraint type must be specified through options.type\");\n    }\n\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.SHOWCONSTRAINTS\n    }));\n  }\n\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n    return results;\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    const model = options.model;\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n      const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n\n        const indexKey = indexKeys.find(fields => fields.includes(field));\n\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      if (options.upsertKeys.length === 0 || _.intersection(options.updateOnDuplicate, primaryKeys).length) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkInsert(tableName, records, options, attributes) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.INSERT;\n    const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier2, options) {\n    options = __spreadValues({}, options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkUpdate(tableName, values, identifier2, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier2 === \"object\") identifier2 = Utils.cloneDeep(identifier2);\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier2, options, attributes);\n    const table = _.isObject(tableName) ? tableName : {\n      tableName\n    };\n\n    const model = _.find(this.sequelize.modelManager.models, {\n      tableName: table.tableName\n    });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier2, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier2, {}, instance.constructor);\n    options = __spreadValues({}, options);\n\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === \"cascade\" && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      limit: null\n    });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(this.queryGenerator.truncateTableQuery(tableName, options), options);\n    }\n\n    if (typeof identifier === \"object\") where = Utils.cloneDeep(where);\n    return await this.sequelize.query(this.queryGenerator.deleteQuery(tableName, where, options, model), options);\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = __spreadProps(__spreadValues({}, optionsArg), {\n      type: QueryTypes.SELECT,\n      model\n    });\n\n    return await this.sequelize.query(this.queryGenerator.selectQuery(tableName, options, model), options);\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"+\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.queryGenerator.arithmeticQuery(\"-\", tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === void 0) {\n      throw new Error(\"Please pass an attribute selector!\");\n    }\n\n    const data = await this.sequelize.query(sql, options);\n\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n\n    return result;\n  }\n\n  async createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  ensureEnums() {}\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to set isolation level for a transaction without transaction object!\");\n    }\n\n    if (transaction.parent || !value) {\n      return;\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to start a transaction without transaction object!\");\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to commit a transaction without transaction object!\");\n    }\n\n    if (transaction.parent) {\n      return;\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"commit\";\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error(\"Unable to rollback a transaction without transaction object!\");\n    }\n\n    options = __spreadProps(__spreadValues({}, options), {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    options.transaction.name = transaction.parent ? transaction.name : void 0;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = \"rollback\";\n    return await promise;\n  }\n\n}\n\nexports.QueryInterface = QueryInterface;","map":{"version":3,"mappings":"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","names":["_","require","Utils","DataTypes","Transaction","QueryTypes","constructor","sequelize","queryGenerator","database","options","sql","createDatabaseQuery","query","dropDatabaseQuery","schema","createSchema","dropSchema","_dialect","supports","schemas","drop","showAllSchemas","Promise","all","map","schemaName","__spreadProps","raw","type","SELECT","showSchemasSql","showSchemasQuery","schemaNames","flatten","value","schema_name","versionQuery","VERSION","tableName","attributes","model","__spreadValues","uniqueKeys","forOwn","uniqueKey","customIndex","mapValues","attribute","normalizeAttribute","ensureEnums","_schema","addSchema","attributesToSQL","table","context","createTableQuery","cascade","force","dropTableQuery","tableNames","skip","includes","dropTable","showAllTables","foreignKeys","getForeignKeysForTables","normalizedTableName","isObject","foreignKey","dropForeignKeyQuery","_dropAllTables","before","after","renameTableQuery","SHOWTABLES","showTablesSql","showTablesQuery","config","schemaDelimiter","describeTableQuery","DESCRIBE","data","isEmpty","Error","e","original","code","key","addColumnQuery","attributeName","removeColumnQuery","dataTypeOrOptions","Object","values","allowNull","quoteIdentifier","identifier2","quoteIdentifiers","identifiers","changeColumnQuery","columnName","description","describeTable","attrNameBefore","attrNameAfter","assertTableHasColumn","_options","defaultValue","renameColumnQuery","rawTablename","Array","isArray","fields","cloneDeep","addIndexQuery","supportsSearchPath","showIndexesQuery","SHOWINDEXES","length","FOREIGNKEYS","results","getForeignKeysQuery","result","forEach","i","r","constraint_name","filter","identity","queryOptions","indexNameOrAttributes","removeIndexQuery","addConstraintQuery","constraintName","showConstraintsQuery","SHOWCONSTRAINTS","removeConstraintQuery","instance","hasTrigger","insertQuery","rawAttributes","INSERT","isNewRecord","insertValues","updateValues","where","UPSERT","updateOnDuplicate","keys","upsertKeys","conflictFields","primaryKeys","item","field","c","indexKeys","_indexes","unique","find","indexKey","intersection","uniq","records","bulkInsertQuery","updateQuery","UPDATE","modelManager","models","BULKUPDATE","cascades","deleteQuery","associations","association","onDelete","toLowerCase","useHooks","push","accessors","get","instances","_instance","destroy","defaults","limit","truncate","truncateTableQuery","identifier","optionsArg","selectQuery","incrementAmountsByField","extraAttributesToBeUpdated","arithmeticQuery","attributeSelector","Model","plain","dataType","DECIMAL","FLOAT","parseFloat","INTEGER","BIGINT","parseInt","DATE","Date","triggerName","timingType","fireOnArray","functionName","functionParams","optionsArray","createTrigger","dropTrigger","oldTriggerName","newTriggerName","renameTrigger","params","returnType","language","body","createFunction","dropFunction","oldFunctionName","newFunctionName","renameFunction","transaction","parent","setIsolationLevelQuery","name","startTransactionQuery","deferConstraintsQuery","completesTransaction","commitTransactionQuery","promise","finished","rollbackTransactionQuery","exports","QueryInterface"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\abstract\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst Transaction = require('../../transaction');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  async showAllSchemas(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async databaseVersion(options) {\n    return await this.sequelize.query(\n      this.queryGenerator.versionQuery(),\n      { ...options, type: QueryTypes.VERSION }\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable' });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options };\n    options.cascade = options.cascade || options.force || false;\n\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options, cascade: true } );\n      }\n    }\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showAllTables(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return this.queryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  /**\n   * Split a list of identifiers by \".\" and quote each part.\n   *\n   * @param {string} identifiers \n   * \n   * @returns {string}\n   */\n  quoteIdentifiers(identifiers) {\n    return this.queryGenerator.quoteIdentifiers(identifiers);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options)\n    );\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options, type: QueryTypes.FOREIGNKEYS };\n\n    const results = await Promise.all(tableNames.map(tableName =>\n      this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n\n    const result = {};\n\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i])\n        ? results[i].map(r => r.constraint_name)\n        : [results[i] && results[i].constraint_name];\n\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   * @param {boolean} [options.concurrently]      Pass CONCURRENTLY so other operations run while the index is created\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @example <caption>Composite Foreign Key</caption>\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                   Table name where you want to add a constraint\n   * @param {object} options                     An object to define the constraint name, type etc\n   * @param {string} options.type                Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields              Array of column names to apply the constraint over\n   * @param {string} [options.name]              Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]      The value for the default constraint\n   * @param {object} [options.where]             Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]        Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table]  Target table name\n   * @param {string} [options.references.field]  Target column name\n   * @param {string} [options.references.fields] Target column names for a composite primary key. Must match the order of fields in options.fields.\n   * @param {string} [options.deferrable]        Sets the constraint to be deferred or immediately checked. See Sequelize.Deferrable. PostgreSQL Only\n   *\n   * @returns {Promise}\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWCONSTRAINTS });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = options.conflictFields || [];\n\n    if (options.upsertKeys.length === 0) {\n      const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n      const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n      const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n      // For fields in updateValues, try to find a constraint or unique index\n      // that includes given field. Only first matching upsert key is used.\n      for (const field of options.updateOnDuplicate) {\n        const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n        if (uniqueKey) {\n          options.upsertKeys = uniqueKey;\n          break;\n        }\n\n        const indexKey = indexKeys.find(fields => fields.includes(field));\n        if (indexKey) {\n          options.upsertKeys = indexKey;\n          break;\n        }\n      }\n\n      // Always use PK, if no constraint available OR update data contains PK\n      if (\n        options.upsertKeys.length === 0\n        || _.intersection(options.updateOnDuplicate, primaryKeys).length\n      ) {\n        options.upsertKeys = primaryKeys;\n      }\n\n      options.upsertKeys = _.uniq(options.upsertKeys);\n    }\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options };\n    options.type = QueryTypes.INSERT;\n\n    const results = await this.sequelize.query(\n      this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    );\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return await this.sequelize.query(\n      this.queryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model };\n\n    return await this.sequelize.query(\n      this.queryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n\nexports.QueryInterface = QueryInterface;\n"]},"metadata":{},"sourceType":"script"}