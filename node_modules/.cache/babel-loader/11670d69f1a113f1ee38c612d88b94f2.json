{"ast":null,"code":"\"use strict\";\n\nconst momentTz = require(\"moment-timezone\");\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html\");\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = void 0;\n      dataType.options.length = void 0;\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n\n  BaseTypes.DATE.types.db2 = [\"TIMESTAMP\"];\n  BaseTypes.STRING.types.db2 = [\"VARCHAR\"];\n  BaseTypes.CHAR.types.db2 = [\"CHAR\"];\n  BaseTypes.TEXT.types.db2 = [\"VARCHAR\", \"CLOB\"];\n  BaseTypes.TINYINT.types.db2 = [\"SMALLINT\"];\n  BaseTypes.SMALLINT.types.db2 = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.db2 = [\"INTEGER\"];\n  BaseTypes.INTEGER.types.db2 = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.db2 = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.db2 = [\"DOUBLE\", \"REAL\", \"FLOAT\"];\n  BaseTypes.TIME.types.db2 = [\"TIME\"];\n  BaseTypes.DATEONLY.types.db2 = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.db2 = [\"BOOLEAN\", \"BOOL\", \"SMALLINT\", \"BIT\"];\n  BaseTypes.BLOB.types.db2 = [\"BLOB\"];\n  BaseTypes.DECIMAL.types.db2 = [\"DECIMAL\"];\n  BaseTypes.UUID.types.db2 = [\"CHAR () FOR BIT DATA\"];\n  BaseTypes.ENUM.types.db2 = [\"VARCHAR\"];\n  BaseTypes.REAL.types.db2 = [\"REAL\"];\n  BaseTypes.DOUBLE.types.db2 = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.db2 = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") {\n          return \"BLOB(255)\";\n        }\n\n        if (this._length.toLowerCase() === \"medium\") {\n          return \"BLOB(16M)\";\n        }\n\n        if (this._length.toLowerCase() === \"long\") {\n          return \"BLOB(2G)\";\n        }\n\n        return `BLOB(${this._length})`;\n      }\n\n      return \"BLOB\";\n    }\n\n    escape(blob) {\n      return `BLOB('${blob.toString().replace(/'/g, \"''\")}')`;\n    }\n\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${value.toString().replace(/'/g, \"''\")}')`;\n      }\n\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n\n      const hex = value.toString(\"hex\");\n      return this._hexify(hex);\n    }\n\n    _hexify(hex) {\n      return `x'${hex}'`;\n    }\n\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        if (this._length <= 4e3) {\n          return `VARCHAR(${this._length})`;\n        }\n\n        return `CLOB(${this._length})`;\n      }\n\n      if (this._length < 255) {\n        return `CHAR(${this._length}) FOR BIT DATA`;\n      }\n\n      if (this._length <= 4e3) {\n        return `VARCHAR(${this._length}) FOR BIT DATA`;\n      }\n\n      return `BLOB(${this._length})`;\n    }\n\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._hexify(value.toString(\"hex\"));\n      }\n\n      return options.escape(value);\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n\n      if (this._length) {\n        switch (this._length.toLowerCase()) {\n          case \"tiny\":\n            len = 256;\n            break;\n\n          case \"medium\":\n            len = 8192;\n            break;\n\n          case \"long\":\n            len = 65536;\n            break;\n        }\n\n        if (isNaN(this._length)) {\n          this._length = 32672;\n        }\n\n        if (len > 0) {\n          this._length = len;\n        }\n      } else {\n        this._length = 32672;\n      }\n\n      if (this._length > 32672) {\n        len = `CLOB(${this._length})`;\n      } else {\n        len = `VARCHAR(${this._length})`;\n      }\n\n      warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);\n      return len;\n    }\n\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n\n    _sanitize(value) {\n      if (value !== null && value !== void 0) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          value = value[0];\n        }\n\n        if (typeof value === \"string\") {\n          value = value === \"true\" ? true : value === \"false\" ? false : value;\n          value = value === \"\u0001\" ? true : value === \"\\0\" ? false : value;\n        } else if (typeof value === \"number\") {\n          value = value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36) FOR BIT DATA\";\n    }\n\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return \"CURRENT TIME\";\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      if (this._length < 0) {\n        this._length = 0;\n      }\n\n      if (this._length > 6) {\n        this._length = 6;\n      }\n\n      return `TIMESTAMP${this._length ? `(${this._length})` : \"\"}`;\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length > 0) {\n        let msec = \".\";\n\n        for (let i = 0; i < this._length && i < 6; i++) {\n          msec += \"S\";\n        }\n\n        return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);\n      }\n\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n\n    static parse(value) {\n      if (typeof value !== \"string\") {\n        value = value.string();\n      }\n\n      if (value === null) {\n        return value;\n      }\n\n      value = new Date(momentTz.utc(value));\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return momentTz(value).format(\"YYYY-MM-DD\");\n    }\n\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"Db2 does not support REAL with options. Plain `REAL` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._decimals) {\n        warn(\"Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n      }\n\n      if (this._unsigned) {\n        warn(\"Db2 does not support Float unsigned. `UNSIGNED` was removed.\");\n        this._unsigned = void 0;\n      }\n\n      if (this._zerofill) {\n        warn(\"Db2 does not support Float zerofill. `ZEROFILL` was removed.\");\n        this._zerofill = void 0;\n      }\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn(\"db2 does not support DOUBLE with options. Plain DOUBLE will be used instead.\");\n        this._length = void 0;\n        this.options.length = void 0;\n        this._unsigned = void 0;\n        this._zerofill = void 0;\n      }\n    }\n\n    toSql() {\n      return \"DOUBLE\";\n    }\n\n  }\n\n  DOUBLE.prototype.key = DOUBLE.key = \"DOUBLE\";\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    DOUBLE,\n    \"DOUBLE PRECISION\": DOUBLE,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};","map":{"version":3,"mappings":"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","names":["momentTz","require","moment","module","exports","BaseTypes","warn","ABSTRACT","bind","dataType","_length","options","length","_unsigned","_zerofill","key","DATE","types","db2","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","toSql","toLowerCase","escape","blob","toString","replace","_stringify","value","Buffer","isBuffer","Array","isArray","from","hex","_hexify","_binary","prototype","_bindParam","bindParam","len","isNaN","_sanitize","parse","NOW","date","isMoment","_applyTimezone","msec","i","format","string","Date","utc","constructor","removeUnsupportedIntegerOptions","decimals","_decimals"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\db2\\data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined,\n    'https://www.ibm.com/support/knowledgecenter/SSEPGG_11.1.0/' +\n    'com.ibm.db2.luw.sql.ref.doc/doc/r0008478.html');\n\n  /**\n   * Removes unsupported Db2 options, i.e., LENGTH, UNSIGNED and ZEROFILL,\n   * for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`Db2 does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see Data types and table columns: https://www.ibm.com/support/knowledgecenter/en/SSEPGG_11.1.0/com.ibm.db2.luw.admin.dbobj.doc/doc/c0055357.html \n   */\n\n  BaseTypes.DATE.types.db2 = ['TIMESTAMP'];\n  BaseTypes.STRING.types.db2 = ['VARCHAR'];\n  BaseTypes.CHAR.types.db2 = ['CHAR'];\n  BaseTypes.TEXT.types.db2 = ['VARCHAR', 'CLOB'];\n  BaseTypes.TINYINT.types.db2 = ['SMALLINT'];\n  BaseTypes.SMALLINT.types.db2 = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.db2 = ['INTEGER'];\n  BaseTypes.INTEGER.types.db2 = ['INTEGER'];\n  BaseTypes.BIGINT.types.db2 = ['BIGINT'];\n  BaseTypes.FLOAT.types.db2 = ['DOUBLE', 'REAL', 'FLOAT'];\n  BaseTypes.TIME.types.db2 = ['TIME'];\n  BaseTypes.DATEONLY.types.db2 = ['DATE'];\n  BaseTypes.BOOLEAN.types.db2 = ['BOOLEAN', 'BOOL', 'SMALLINT', 'BIT'];\n  BaseTypes.BLOB.types.db2 = ['BLOB'];\n  BaseTypes.DECIMAL.types.db2 = ['DECIMAL'];\n  BaseTypes.UUID.types.db2 = ['CHAR () FOR BIT DATA'];\n  BaseTypes.ENUM.types.db2 = ['VARCHAR'];\n  BaseTypes.REAL.types.db2 = ['REAL'];\n  BaseTypes.DOUBLE.types.db2 = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.db2 = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 255 bytes\n          return 'BLOB(255)';\n        }\n        if (this._length.toLowerCase() === 'medium') { // medium = 16M\n          return 'BLOB(16M)';\n        }\n        if (this._length.toLowerCase() === 'long') { // long = 2GB\n          return 'BLOB(2G)';\n        }\n        return `BLOB(${ this._length })`;\n      }\n      return 'BLOB'; // 1MB\n    }\n    escape(blob) {\n      return `BLOB('${ blob.toString().replace(/'/g, \"''\") }')`;\n    }\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${ value.toString().replace(/'/g, \"''\") }')`;\n      }\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n      const hex = value.toString('hex');\n      return this._hexify(hex);\n    }\n    _hexify(hex) {\n      return `x'${ hex }'`;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        if (this._length <= 4000) {\n          return `VARCHAR(${ this._length })`;\n        }\n        return `CLOB(${ this._length })`;\n      }\n      if (this._length < 255) {\n        return `CHAR(${ this._length }) FOR BIT DATA`;\n      }\n      if (this._length <= 4000) {\n        return `VARCHAR(${ this._length }) FOR BIT DATA`;\n      }\n      return `BLOB(${ this._length })`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._hexify(value.toString('hex'));\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n      if (this._length) {\n        switch (this._length.toLowerCase()) {\n          case 'tiny':\n            len = 256; // tiny = 2^8\n            break;\n          case 'medium':\n            len = 8192; // medium = 2^13 = 8k\n            break;\n          case 'long':\n            len = 65536; // long = 64k\n            break;\n        }\n        if ( isNaN(this._length) ) {\n          this._length = 32672;\n        }\n        if (len > 0 ) { this._length = len; }\n      } else { this._length = 32672; }\n      if ( this._length > 32672 )\n      {\n        len = `CLOB(${ this._length })`;\n      }\n      else\n      {\n        len = `VARCHAR(${ this._length })`;\n      }\n      warn(`Db2 does not support TEXT datatype. ${len} will be used instead.`);\n      return len;\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          value = value === 'true' ? true : value === 'false' ? false : value;\n          value = value === '\\u0001' ? true : value === '\\u0000' ? false : value;\n\n        } else if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          value = value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n  }\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) FOR BIT DATA';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'CURRENT TIME';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      if (this._length < 0) { this._length = 0; }\n      if (this._length > 6) { this._length = 6; }\n      return `TIMESTAMP${ this._length ? `(${ this._length })` : ''}`;\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length > 0) {\n        let msec = '.';\n        for ( let i = 0; i < this._length && i < 6; i++ ) {\n          msec += 'S';\n        }\n        return date.format(`YYYY-MM-DD HH:mm:ss${msec}`);\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value) {\n      if (typeof value !== 'string') {\n        value = value.string();\n      }\n      if (value === null) {\n        return value;\n      }\n      value = new Date(momentTz.utc(value));\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return momentTz(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('Db2 does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // Db2 does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('Db2 does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('Db2 does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('Db2 does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // db2 does not support any parameters for double\n      if (this._length || this.options.length ||\n          this._unsigned || this._zerofill)\n      {\n        warn('db2 does not support DOUBLE with options. ' +\n             'Plain DOUBLE will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n    toSql() {\n      return 'DOUBLE';\n    }\n  }\n  DOUBLE.prototype.key = DOUBLE.key = 'DOUBLE';\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    DOUBLE,\n    'DOUBLE PRECISION': DOUBLE,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}