{"ast":null,"code":"\"use strict\";\n\nconst dataTypes = require(\"./data-types\");\n\nconst {\n  logger\n} = require(\"./utils/logger\");\n\nfunction arrayToList(array, timeZone, dialect, format2) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += \", \";\n    }\n\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format2)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format2);\n    }\n\n    return sql;\n  }, \"\");\n}\n\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format2) {\n  let prependN = false;\n\n  if (val === void 0 || val === null) {\n    return \"NULL\";\n  }\n\n  switch (typeof val) {\n    case \"boolean\":\n      if ([\"sqlite\", \"mssql\"].includes(dialect)) {\n        return +!!val;\n      }\n\n      return (!!val).toString();\n\n    case \"number\":\n      return val.toString();\n\n    case \"string\":\n      prependN = dialect === \"mssql\";\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, {\n      timezone: timeZone\n    });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format2);\n\n    if (dialect === \"postgres\" && !format2) {\n      return dataTypes.ARRAY.prototype.stringify(val, {\n        escape: partialEscape\n      });\n    }\n\n    return arrayToList(val, timeZone, dialect, format2);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if ([\"postgres\", \"sqlite\", \"mssql\", \"snowflake\", \"db2\"].includes(dialect)) {\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === \"postgres\") {\n      val = val.replace(/\\0/g, \"\\\\0\");\n    }\n  } else {\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case \"\\0\":\n          return \"\\\\0\";\n\n        case \"\\n\":\n          return \"\\\\n\";\n\n        case \"\\r\":\n          return \"\\\\r\";\n\n        case \"\\b\":\n          return \"\\\\b\";\n\n        case \"\t\":\n          return \"\\\\t\";\n\n        case \"\u001a\":\n          return \"\\\\Z\";\n\n        default:\n          return `\\\\${s}`;\n      }\n    });\n  }\n\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\n\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== \"string\") {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if (dialect === \"postgres\" && value.slice(0, 2) === \"::\") {\n      return value;\n    }\n\n    if (values[key] !== void 0) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\n\nexports.formatNamedParameters = formatNamedParameters;","map":{"version":3,"mappings":"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","names":["dataTypes","require","logger","array","timeZone","dialect","format2","reduce","sql","val","i","Array","isArray","arrayToList","escape","exports","prependN","includes","toString","Date","DATE","prototype","stringify","timezone","Buffer","isBuffer","BLOB","partialEscape","escVal","ARRAY","replace","Error","inspect","s","values","concat","match","length","shift","format","value","key","slice","formatNamedParameters"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\sql-string.js"],"sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (['sqlite', 'mssql'].includes(dialect)) {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (['postgres', 'sqlite', 'mssql', 'snowflake', 'db2'].includes(dialect)) {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"]},"metadata":{},"sourceType":"script"}