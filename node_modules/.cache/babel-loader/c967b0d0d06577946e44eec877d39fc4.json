{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst _ = require(\"lodash\");\n\nconst Utils = require(\"../../utils\");\n\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\n\nconst util = require(\"util\");\n\nconst Op = require(\"../../operators\");\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\"CONSTRAINT_NAME as constraint_name\", \"CONSTRAINT_NAME as constraintName\", \"CONSTRAINT_SCHEMA as constraintSchema\", \"CONSTRAINT_SCHEMA as constraintCatalog\", \"TABLE_NAME as tableName\", \"TABLE_SCHEMA as tableSchema\", \"TABLE_SCHEMA as tableCatalog\", \"COLUMN_NAME as columnName\", \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\", \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\", \"REFERENCED_TABLE_NAME as referencedTableName\", \"REFERENCED_COLUMN_NAME as referencedColumnName\"].join(\",\");\nconst SNOWFLAKE_RESERVED_WORDS = \"account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with\".split(\",\");\nconst typeWithoutDefault = /* @__PURE__ */new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\n\nclass SnowflakeQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n    this.OperatorMap = __spreadProps(__spreadValues({}, this.OperatorMap), {\n      [Op.regexp]: \"REGEXP\",\n      [Op.notRegexp]: \"NOT REGEXP\"\n    });\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      charset: null,\n      collate: null\n    }, options);\n    return Utils.joinSQLFragments([\"CREATE DATABASE IF NOT EXISTS\", this.quoteIdentifier(databaseName), options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`, options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`, \";\"]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return \"SHOW TABLES\";\n  }\n\n  showSchemasQuery() {\n    return \"SHOW TABLES\";\n  }\n\n  versionQuery() {\n    return \"SELECT CURRENT_VERSION()\";\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({\n      charset: null,\n      rowFormat: null\n    }, options);\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes(\"PRIMARY KEY\")) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes(\"REFERENCES\")) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(\"PRIMARY KEY\", \"\")}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(\"PRIMARY KEY\", \"\")}`);\n        }\n      } else if (dataType.includes(\"REFERENCES\")) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(\", \");\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== \"string\") {\n            indexName = `uniq_${tableName}_${columns.fields.join(\"_\")}`;\n          }\n\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\"CREATE TABLE IF NOT EXISTS\", table, `(${attributesClause})`, options.comment && typeof options.comment === \"string\" && `COMMENT ${this.escape(options.comment)}`, options.charset && `DEFAULT CHARSET=${options.charset}`, options.collate && `COLLATE ${options.collate}`, options.rowFormat && `ROW_FORMAT=${options.rowFormat}`, \";\"]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(this.addSchema({\n      tableName,\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter\n    }));\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    return Utils.joinSQLFragments([\"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\", database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : \"AND TABLE_SCHEMA NOT IN ( 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')\", \";\"]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(table), \"ADD\", this.quoteIdentifier(key), this.attributeToSQL(dataType, {\n      context: \"addColumn\",\n      tableName: table,\n      foreignKey: key\n    }), \";\"]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP\", this.quoteIdentifier(attributeName), \";\"]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    var _this = this;\n\n    const query = function () {\n      for (var _len = arguments.length, subQuerys = new Array(_len), _key = 0; _key < _len; _key++) {\n        subQuerys[_key] = arguments[_key];\n      }\n\n      return Utils.joinSQLFragments([\"ALTER TABLE\", _this.quoteTable(tableName), \"ALTER COLUMN\", ...subQuerys, \";\"]);\n    };\n\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      const attrSql = [];\n\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"SET NOT NULL\"));\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"DROP NOT NULL\"));\n      }\n\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"SET DEFAULT\", definition.match(/DEFAULT ([^;]+)/)[1]));\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"DROP DEFAULT\"));\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql.push(query(\"ADD UNIQUE (\", this.quoteIdentifier(attributeName), \")\").replace(\"ALTER COLUMN\", \"\"));\n      }\n\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql.push(query(\"ADD FOREIGN KEY (\", this.quoteIdentifier(attributeName), \")\", definition).replace(\"ALTER COLUMN\", \"\"));\n      } else {\n        attrSql.push(query(this.quoteIdentifier(attributeName), \"TYPE\", definition));\n      }\n\n      sql.push(attrSql.join(\"\"));\n    }\n\n    return sql.join(\"\");\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"RENAME COLUMN\", attrString.join(\" to \"), \";\"]);\n  }\n\n  handleSequelizeMethod(attr, tableName, factory, options, prepend) {\n    if (attr instanceof Utils.Json) {\n      if (attr.conditions) {\n        const conditions = this.parseConditionObject(attr.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n\n      if (attr.path) {\n        let str;\n\n        if (this._checkValidJsonStatement(attr.path)) {\n          str = attr.path;\n        } else {\n          const paths = _.toPath(attr.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (attr.value) {\n          str += util.format(\" = %s\", this.escape(attr.value));\n        }\n\n        return str;\n      }\n    } else if (attr instanceof Utils.Cast) {\n      if (/timestamp/i.test(attr.type)) {\n        attr.type = \"datetime\";\n      } else if (attr.json && /boolean/i.test(attr.type)) {\n        attr.type = \"char\";\n      } else if (/double precision/i.test(attr.type) || /boolean/i.test(attr.type) || /integer/i.test(attr.type)) {\n        attr.type = \"decimal\";\n      } else if (/text/i.test(attr.type)) {\n        attr.type = \"char\";\n      }\n    }\n\n    return super.handleSequelizeMethod(attr, tableName, factory, options, prepend);\n  }\n\n  truncateTableQuery(tableName) {\n    return Utils.joinSQLFragments([\"TRUNCATE\", this.quoteTable(tableName)]);\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit && ` LIMIT ${this.escape(options.limit)}`;\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return Utils.joinSQLFragments([\"DELETE FROM\", table, \"WHERE\", primaryKeys, \"IN (SELECT\", primaryKeysSelection, \"FROM\", table, whereClause, limit, \")\", \";\"]);\n    }\n\n    return Utils.joinSQLFragments([\"DELETE FROM\", table, whereClause, \";\"]);\n  }\n\n  showIndexesQuery() {\n    return \"SELECT '' FROM DUAL\";\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n    return Utils.joinSQLFragments([\"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\", \"CONSTRAINT_NAME AS constraintName,\", \"CONSTRAINT_SCHEMA AS constraintSchema,\", \"CONSTRAINT_TYPE AS constraintType,\", \"TABLE_NAME AS tableName,\", \"TABLE_SCHEMA AS tableSchema\", \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\", `WHERE table_name='${tableName}'`, constraintName && `AND constraint_name = '${constraintName}'`, schemaName && `AND TABLE_SCHEMA = '${schemaName}'`, \";\"]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n\n    return Utils.joinSQLFragments([\"DROP INDEX\", this.quoteIdentifier(indexName), \"ON\", this.quoteTable(tableName), \";\"]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({\n      escape: this.escape.bind(this)\n    });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += \" NOT NULL\";\n    }\n\n    if (attribute.autoIncrement) {\n      template += \" AUTOINCREMENT\";\n    }\n\n    if (!typeWithoutDefault.has(attributeString) && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += \" UNIQUE\";\n    }\n\n    if (attribute.primaryKey) {\n      template += \" PRIMARY KEY\";\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += \" FIRST\";\n    }\n\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n      if (options && options.context === \"addColumn\" && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier(\"id\")})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    return hasJsonFunction;\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n\n    return dataType;\n  }\n\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`, `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\", \";\"]);\n  }\n\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : \"\";\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n    return Utils.joinSQLFragments([\"SELECT\", FOREIGN_KEY_FIELDS, \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\", \"WHERE (\", [`REFERENCED_TABLE_NAME = ${quotedTableName}`, table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`, `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`], \") OR (\", [`TABLE_NAME = ${quotedTableName}`, table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`, `AND COLUMN_NAME = ${quotedColumnName}`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\"], \")\"]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(tableName), \"DROP FOREIGN KEY\", this.quoteIdentifier(foreignKey), \";\"]);\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = [];\n\n    if (options.offset !== null && options.offset !== void 0 && options.offset !== 0) {\n      fragment = fragment.concat([\" LIMIT \", this.escape(options.limit), \" OFFSET \", this.escape(options.offset)]);\n    } else if (options.limit !== null && options.limit !== void 0) {\n      fragment = [\" LIMIT \", this.escape(options.limit)];\n    }\n\n    return fragment.join(\"\");\n  }\n\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || SNOWFLAKE_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n\n    return rawIdentifier;\n  }\n\n}\n\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, \"'\");\n}\n\nmodule.exports = SnowflakeQueryGenerator;","map":{"version":3,"mappings":"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","names":["_","require","Utils","AbstractQueryGenerator","util","Op","JSON_FUNCTION_REGEX","JSON_OPERATOR_REGEX","TOKEN_CAPTURE_REGEX","FOREIGN_KEY_FIELDS","join","SNOWFLAKE_RESERVED_WORDS","split","typeWithoutDefault","Set","constructor","options","OperatorMap","__spreadProps","regexp","notRegexp","createDatabaseQuery","databaseName","__spreadValues","charset","collate","joinSQLFragments","quoteIdentifier","escape","dropDatabaseQuery","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","rowFormat","primaryKeys","foreignKeys","attrStr","attr","Object","prototype","hasOwnProperty","call","dataType","match","includes","push","replace","table","quoteTable","attributesClause","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","comment","describeTableQuery","schema","schemaDelimiter","addSchema","_schema","_schemaDelimiter","showTablesQuery","database","addColumnQuery","key","attributeToSQL","context","foreignKey","removeColumnQuery","attributeName","changeColumnQuery","query","subQuerys","sql","definition","dataTypeMapping","attrSql","trim","renameColumnQuery","attrBefore","attrString","attrName","handleSequelizeMethod","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","_checkValidJsonStatement","paths","toPath","column","shift","format","Cast","test","type","json","truncateTableQuery","deleteQuery","where","model","whereClause","getWhereConditions","limit","primaryKeysSelection","Error","pks","values","primaryKeyAttributes","showIndexesQuery","showConstraintsQuery","constraintName","schemaName","removeIndexQuery","indexNameOrAttributes","underscore","attribute","isPlainObject","attributeString","toString","bind","template","allowNull","autoIncrement","has","_binary","defaultValueSchemable","defaultValue","unique","primaryKey","first","after","references","fkName","onDelete","toUpperCase","onUpdate","attributesToSQL","result","stmt","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","indexOf","operatorMatches","tokenMatches","capturedToken","getForeignKeysQuery","getForeignKeyQuery","columnName","quotedSchemaName","wrapSingleQuote","quotedTableName","quotedColumnName","dropForeignKeyQuery","addLimitAndOffset","fragment","offset","concat","identifier","force","optForceQuote","optQuoteIdentifiers","quoteIdentifiers","rawIdentifier","removeTicks","toLowerCase","addTicks","module","exports","SnowflakeQueryGenerator"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\n/**\n * list of reserved words in Snowflake\n * source: https://docs.snowflake.com/en/sql-reference/reserved-keywords.html\n *\n * @private\n */\nconst SNOWFLAKE_RESERVED_WORDS = 'account,all,alter,and,any,as,between,by,case,cast,check,column,connect,connections,constraint,create,cross,current,current_date,current_time,current_timestamp,current_user,database,delete,distinct,drop,else,exists,false,following,for,from,full,grant,group,gscluster,having,ilike,in,increment,inner,insert,intersect,into,is,issue,join,lateral,left,like,localtime,localtimestamp,minus,natural,not,null,of,on,or,order,organization,qualify,regexp,revoke,right,rlike,row,rows,sample,schema,select,set,some,start,table,tablesample,then,to,trigger,true,try_cast,union,unique,update,using,values,view,when,whenever,where,with'.split(',');\n  \nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass SnowflakeQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT CURRENT_VERSION()';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    return Utils.joinSQLFragments([\n      'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'',\n      database ? `AND TABLE_SCHEMA = ${this.escape(database)}` : 'AND TABLE_SCHEMA NOT IN ( \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\')',\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = (...subQuerys) => Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'ALTER COLUMN',\n      ...subQuerys,\n      ';'\n    ]);\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      const attrSql = [];\n\n      if (definition.includes('NOT NULL')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET NOT NULL'));\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP NOT NULL'));\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'SET DEFAULT', definition.match(/DEFAULT ([^;]+)/)[1]));\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'DROP DEFAULT'));\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql.push(query('ADD UNIQUE (', this.quoteIdentifier(attributeName), ')').replace('ALTER COLUMN', ''));\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql.push(query('ADD FOREIGN KEY (', this.quoteIdentifier(attributeName), ')', definition).replace('ALTER COLUMN', ''));\n      } else {\n        attrSql.push(query(this.quoteIdentifier(attributeName), 'TYPE', definition));\n      }\n\n      sql.push(attrSql.join(''));\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`'${attrBefore}' '${attrName}' ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'RENAME COLUMN',\n      attrString.join(' to '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(attr, tableName, factory, options, prepend) {\n    if (attr instanceof Utils.Json) {\n      // Parse nested object\n      if (attr.conditions) {\n        const conditions = this.parseConditionObject(attr.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (attr.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(attr.path)) {\n          str = attr.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(attr.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (attr.value) {\n          str += util.format(' = %s', this.escape(attr.value));\n        }\n\n        return str;\n      }\n    } else if (attr instanceof Utils.Cast) {\n      if (/timestamp/i.test(attr.type)) {\n        attr.type = 'datetime';\n      } else if (attr.json && /boolean/i.test(attr.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        attr.type = 'char';\n      } else if (/double precision/i.test(attr.type) || /boolean/i.test(attr.type) || /integer/i.test(attr.type)) {\n        attr.type = 'decimal';\n      } else if (/text/i.test(attr.type)) {\n        attr.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(attr, tableName, factory, options, prepend);\n  }\n\n  truncateTableQuery(tableName) {\n    return Utils.joinSQLFragments([\n      'TRUNCATE',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit && ` LIMIT ${this.escape(options.limit)}`;\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return Utils.joinSQLFragments([\n        'DELETE FROM',\n        table,\n        'WHERE',\n        primaryKeys,\n        'IN (SELECT',\n        primaryKeysSelection,\n        'FROM',\n        table,\n        whereClause,\n        limit,\n        ')',\n        ';'\n      ]);\n    }\n    return Utils.joinSQLFragments([\n      'DELETE FROM',\n      table,\n      whereClause,\n      ';'\n    ]);\n  }\n\n  showIndexesQuery() {\n    return 'SELECT \\'\\' FROM DUAL';\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName),\n      ';'\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' AUTOINCREMENT';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = [];\n    if (options.offset !== null && options.offset !== undefined && options.offset !== 0) {\n      fragment = fragment.concat([' LIMIT ', this.escape(options.limit), ' OFFSET ', this.escape(options.offset)]);\n    } else if ( options.limit !== null && options.limit !== undefined ) {\n      fragment = [' LIMIT ', this.escape(options.limit)];\n    }\n    return fragment.join('');\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      SNOWFLAKE_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Snowflake if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = SnowflakeQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}