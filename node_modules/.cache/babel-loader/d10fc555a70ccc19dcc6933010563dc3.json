{"ast":null,"code":"'use strict';\n\nvar common = require('./common'); // get snippet for a single line, respecting maxLength\n\n\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n\n  };\n}\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n  if (!mark.buffer) return null;\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent !== 'number') options.indent = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter !== 'number') options.linesAfter = 2;\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [0];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while (match = re.exec(mark.buffer)) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n  var result = '',\n      i,\n      line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\nmodule.exports = makeSnippet;","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/js-yaml/lib/snippet.js"],"names":["common","require","getLine","buffer","lineStart","lineEnd","position","maxLineLength","head","tail","maxHalfLength","Math","floor","length","str","slice","replace","pos","padStart","string","max","repeat","makeSnippet","mark","options","Object","create","maxLength","indent","linesBefore","linesAfter","re","lineStarts","lineEnds","match","foundLineNo","exec","push","index","result","i","line","lineNoLength","min","toString","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n\nvar common = require('./common');\n\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nmodule.exports = makeSnippet;\n"]},"metadata":{},"sourceType":"script"}