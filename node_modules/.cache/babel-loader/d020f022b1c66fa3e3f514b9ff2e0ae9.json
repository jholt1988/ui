{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nconst Utils = require(\"../../utils\");\n\nconst util = require(\"util\");\n\nconst DataTypes = require(\"../../data-types\");\n\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\n\nconst semver = require(\"semver\");\n\nconst _ = require(\"lodash\");\n\nconst POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      encoding: null,\n      collate: null\n    }, options);\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : \"\",\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : \"\",\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : \"\",\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : \"\"\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return \"SHOW SERVER_VERSION\";\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({}, options);\n\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n\n    const attrStr = [];\n    let comments = \"\";\n    let columnComments = \"\";\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === \"string\") {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf(\"COMMENT \");\n\n      if (i !== -1) {\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n    let attributesClause = attrStr.join(\", \");\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes(\"PRIMARY KEY\")) {\n        acc.push(this.quoteIdentifier(key));\n      }\n\n      return acc;\n    }, []).join(\",\");\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\"}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? \" CASCADE\" : \"\"};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = \"public\";\n    return `SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n\n      if (smth.path) {\n        let str;\n\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, {\n      context: \"addColumn\",\n      table,\n      key\n    });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n\n    const sql = [];\n\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = \"\";\n\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith(\"ENUM(\")) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace(\"ALTER COLUMN\", \"\");\n      }\n\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace(\"ALTER COLUMN\", \"\");\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join(\"\");\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(\", \")};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || \"testfunc\";\n    language = language || \"plpgsql\";\n    returns = returns ? `RETURNS ${returns}` : \"\";\n    parameters = parameters || \"\";\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`TRUNCATE ${this.quoteTable(tableName)}`, options.restartIdentity ? \" RESTART IDENTITY\" : \"\", options.cascade ? \" CASCADE\" : \"\"].join(\"\");\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : \"\";\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = \"\";\n    let schemaWhere = \"\";\n\n    if (typeof tableName !== \"string\") {\n      schemaJoin = \", pg_namespace s\";\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', \"from INFORMATION_SCHEMA.table_constraints\", `WHERE table_name='${tableName}';`].join(\" \");\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n\n    return [\"DROP INDEX\", options && options.concurrently && \"CONCURRENTLY\", `IF EXISTS ${this.quoteIdentifiers(indexName)}`].filter(Boolean).join(\" \");\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n\n    if (options.limit != null) {\n      fragment += \" LIMIT \" + this.escape(options.limit);\n    }\n\n    if (options.offset != null) {\n      fragment += \" OFFSET \" + this.escape(options.offset);\n    }\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(\", \")})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += \"[]\";\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n      sql += \" NOT NULL\";\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n      } else {\n        sql += \" SERIAL\";\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += \" UNIQUE\";\n    }\n\n    if (attribute.primaryKey) {\n      sql += \" PRIMARY KEY\";\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == \"string\") && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier(\"id\");\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = \"ALL\";\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(\", \");\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, \"DEFERRED\");\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, \"IMMEDIATE\");\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({\n        key\n      }, options));\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : \"\"} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n\n    const paramList = this._expandFunctionParamList(params);\n\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error(\"requires functionName\");\n\n    const paramList = this._expandFunctionParamList(params);\n\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === void 0 || !Array.isArray(params)) {\n      throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error(\"function or trigger used with a parameter without any type\");\n      }\n\n      const joined = paramDef.join(\" \");\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(\", \");\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error(\"_expandFunctionVariableList: function variables must be an array\");\n    }\n\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error(\"function variable must have a name and type\");\n      }\n\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n\n      variableDefinition += \";\";\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(\" \");\n  }\n\n  expandOptions(options) {\n    return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      \"after\": \"AFTER\",\n      \"before\": \"BEFORE\",\n      \"instead_of\": \"INSTEAD OF\",\n      \"after_constraint\": \"AFTER\"\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error(\"no table change events specified to trigger on\");\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        \"insert\": \"INSERT\",\n        \"update\": \"UPDATE\",\n        \"delete\": \"DELETE\",\n        \"truncate\": \"TRUNCATE\"\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n\n      if (eventSpec === \"UPDATE\") {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(\", \")}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(\" OR \");\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = \"\";\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\")}`;\n    }\n\n    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(\", \")})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n      sql += \"IF NOT EXISTS \";\n    }\n\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\"));\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n\n    if (dataType.startsWith(\"ENUM(\")) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  getForeignKeysQuery(tableName) {\n    return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  _getForeignKeyReferencesQueryPrefix() {\n    return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n  }\n\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : \"\"}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : \"\"}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : \"\"}`;\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n\n    return rawIdentifier;\n  }\n\n}\n\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"mappings":"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","names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","POSTGRES_RESERVED_WORDS","split","setSearchPath","searchPath","createDatabaseQuery","databaseName","options","__spreadValues","encoding","collate","values","database","quoteTable","escape","collation","ctype","template","dropDatabaseQuery","createSchema","schema","databaseVersion","get","gte","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","attrStr","comments","columnComments","quotedTable","comment","attr","quotedAttr","quoteIdentifier","i","indexOf","escapedCommentText","substring","dataType","dataTypeMapping","push","attributesClause","join","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","key","includes","length","dropTableQuery","cascade","showTablesQuery","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","paths","toPath","column","shift","format","call","addColumnQuery","table","dbDataType","attributeToSQL","context","type","definition","quotedKey","extractTableDetails","query","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","subQuery","sql","attrSql","replace","trim","match","startsWith","pgEnumName","renameColumnQuery","attrBefore","attrString","fn","fnName","parameters","body","returns","language","truncateTableQuery","restartIdentity","deleteQuery","where","model","whereClause","getWhereConditions","limit","primaryKeys","primaryKeysSelection","Object","pk","primaryKeyAttributes","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","concurrently","quoteIdentifiers","filter","Boolean","addLimitAndOffset","fragment","offset","isPlainObject","ARRAY","enumType","Array","isArray","toString","prototype","hasOwnProperty","allowNull","autoIncrement","autoIncrementIdentity","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","addSchema","_schema","referencesKey","onDelete","toUpperCase","onUpdate","deferrable","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","_expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","variableList","variables","_expandFunctionVariableList","expandedOptionsArray","statement","force","dropFunction","renameFunction","oldFunctionName","newFunctionName","pgEscapeAndQuote","val","removeTicks","forEach","curParam","paramDef","direction","name","joined","variableDefinitions","variable","variableDefinition","default","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","pgEnumDrop","pgEnumAdd","sequelize","before","after","fromArray","text","matches","m","slice","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","identifier","optForceQuote","optQuoteIdentifiers","rawIdentifier","toLowerCase","module","exports","PostgresQueryGenerator"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\n    }\n\n    return `CREATE SCHEMA ${schema};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';\";\n  }\n\n  describeTableQuery(tableName, schema) {\n    if (!schema) schema = 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (attribute.references.key) {\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\n      } else {\n        referencesKey = this.quoteIdentifier('id');\n      }\n\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n      if (attribute.onDelete) {\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n\n      if (attribute.references.deferrable) {\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}