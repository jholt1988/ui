{"ast":null,"code":"const {\n  Order,\n  OrderItem,\n  Profile\n} = require('../db');\n\nconst CartItems = require('../Models/Carts/CartItems');\n\nconst Orders = require('../Models/Orders/Orders');\n\nexports.createOrder = (req, res) => {\n  Order.create({}).then(order => {\n    if (order) {\n      res.status(200).send(order);\n    } else {\n      res.send(Error('Cart Not Created'));\n    }\n  });\n};\n\nexports.addItems = async (req, res) => {\n  const orderItem = CartItems.findAll({\n    where: {\n      CartId: req.params.cartId\n    }\n  });\n  OrderItem.create({\n    item\n  }).then(item => {\n    this.Order.items.push(item);\n    res.status(200).send(item);\n  });\n};\n\nexports.getAllOrders = async (req, res) => {\n  const profile = await Profile.findOne({\n    where: {\n      UserId: req.user.id\n    }\n  });\n  await Order.findAll({\n    where: {\n      ProfileId: profile.id\n    }\n  }).then(orders => {\n    if (orders) {\n      res.status(200).send(orders);\n    } else {\n      throw new Error();\n    }\n  });\n};\n\nexports.UpdateOrder = async (req, res) => {\n  const orderId = req.body.orderId;\n  Order.update({\n    status: Order.changeStatus()\n  }, {\n    where: {\n      id: orderId\n    }\n  }).then(num => {\n    if (num === 1) {\n      res.status(200).send(update);\n    } else {\n      res.send(Error());\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Services/OrderService.js"],"names":["Order","OrderItem","Profile","require","CartItems","Orders","exports","createOrder","req","res","create","then","order","status","send","Error","addItems","orderItem","findAll","where","CartId","params","cartId","item","items","push","getAllOrders","profile","findOne","UserId","user","id","ProfileId","orders","UpdateOrder","orderId","body","update","changeStatus","num"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA;AAApB,IAAgCC,OAAO,CAAC,OAAD,CAA7C;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,2BAAD,CAAzB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,yBAAD,CAAtB;;AAEAG,OAAO,CAACC,WAAR,GAAsB,CAACC,GAAD,EAAMC,GAAN,KAAgB;AAClCT,EAAAA,KAAK,CAACU,MAAN,CAAa,EAAb,EAAkBC,IAAlB,CAAuBC,KAAK,IAAI;AAC5B,QAAIA,KAAJ,EAAW;AACPH,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB;AAEC,KAHL,MAKM;AACFH,MAAAA,GAAG,CAACK,IAAJ,CAASC,KAAK,CAAC,kBAAD,CAAd;AACH;AACJ,GATD;AAUH,CAXD;;AAaIT,OAAO,CAACU,QAAR,GAAmB,OAAMR,GAAN,EAAWC,GAAX,KAAmB;AAClC,QAAMQ,SAAS,GAAGb,SAAS,CAACc,OAAV,CAAkB;AAACC,IAAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAEZ,GAAG,CAACa,MAAJ,CAAWC;AAApB;AAAR,GAAlB,CAAlB;AACArB,EAAAA,SAAS,CAACS,MAAV,CAAiB;AAAEa,IAAAA;AAAF,GAAjB,EAA2BZ,IAA3B,CAAgCY,IAAI,IAAI;AACpC,SAAKvB,KAAL,CAAWwB,KAAX,CAAiBC,IAAjB,CAAsBF,IAAtB;AACAd,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,IAArB;AACH,GAHD;AAMP,CARG;;AASJjB,OAAO,CAACoB,YAAR,GAAuB,OAAOlB,GAAP,EAAYC,GAAZ,KAAoB;AACvC,QAAMkB,OAAO,GAAE,MAAMzB,OAAO,CAAC0B,OAAR,CAAgB;AAACT,IAAAA,KAAK,EAAC;AAACU,MAAAA,MAAM,EAAErB,GAAG,CAACsB,IAAJ,CAASC;AAAlB;AAAP,GAAhB,CAArB;AACA,QAAM/B,KAAK,CAACkB,OAAN,CAAc;AAAEC,IAAAA,KAAK,EAAE;AAAEa,MAAAA,SAAS,EAAEL,OAAO,CAACI;AAArB;AAAT,GAAd,EAAoDpB,IAApD,CAAyDsB,MAAM,IAAI;AACrE,QAAIA,MAAJ,EAAY;AACHxB,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBmB,MAArB;AACR,KAFD,MAEO;AACH,YAAM,IAAIlB,KAAJ,EAAN;AACE;AACJ,GANA,CAAN;AAOH,CATD;;AAUAT,OAAO,CAAC4B,WAAR,GAAsB,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAM0B,OAAO,GAAG3B,GAAG,CAAC4B,IAAJ,CAASD,OAAzB;AAEAnC,EAAAA,KAAK,CAACqC,MAAN,CAAa;AAAExB,IAAAA,MAAM,EAAEb,KAAK,CAACsC,YAAN;AAAV,GAAb,EAA+C;AAAEnB,IAAAA,KAAK,EAAE;AAAEY,MAAAA,EAAE,EAAEI;AAAN;AAAT,GAA/C,EAA2ExB,IAA3E,CAAgF4B,GAAG,IAAI;AACnF,QAAIA,GAAG,KAAK,CAAZ,EAAe;AACX9B,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBuB,MAArB;AACH,KAFD,MAEO;AACJ5B,MAAAA,GAAG,CAACK,IAAJ,CAASC,KAAK,EAAd;AACF;AACJ,GAND;AAOH,CAVD","sourcesContent":["const { Order, OrderItem, Profile } = require('../db');\r\nconst CartItems = require('../Models/Carts/CartItems');\r\nconst Orders = require('../Models/Orders/Orders');\r\n\r\nexports.createOrder = (req, res, ) => {\r\n    Order.create({ }).then(order => {\r\n        if (order) {\r\n            res.status(200).send(order)\r\n\r\n            }\r\n            \r\n         else {\r\n            res.send(Error('Cart Not Created'))\r\n        }\r\n    })\r\n}\r\n\r\n    exports.addItems = async(req, res) => {\r\n        const orderItem = CartItems.findAll({where: {CartId: req.params.cartId} })\r\n        OrderItem.create({ item }).then(item => {\r\n            this.Order.items.push(item)\r\n            res.status(200).send(item)\r\n        }\r\n            \r\n        )\r\n}\r\nexports.getAllOrders = async (req, res) => {\r\n    const profile= await Profile.findOne({where:{UserId: req.user.id}})\r\n    await Order.findAll({ where: { ProfileId: profile.id } }).then(orders => {\r\n        if (orders) {\r\n                 res.status(200).send(orders)\r\n        } else {\r\n            throw new Error()\r\n             }\r\n         })\r\n}\r\nexports.UpdateOrder = async (req, res) => {\r\n    const orderId = req.body.orderId\r\n\r\n    Order.update({ status: Order.changeStatus() }, { where: { id: orderId } }).then(num => {\r\n        if (num === 1) {\r\n            res.status(200).send(update)\r\n        } else {\r\n           res.send(Error())\r\n        }\r\n    })\r\n}\r\n    \r\n"]},"metadata":{},"sourceType":"script"}