{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\n\nvar Type = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/js-yaml/lib/type/float.js"],"names":["common","require","Type","YAML_FLOAT_PATTERN","RegExp","resolveYamlFloat","data","test","length","constructYamlFloat","value","sign","replace","toLowerCase","indexOf","slice","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","NaN","parseFloat","SCIENTIFIC_WITHOUT_DOT","representYamlFloat","object","style","res","isNaN","isNegativeZero","toString","isFloat","Object","prototype","call","module","exports","kind","resolve","construct","predicate","represent","defaultStyle"],"mappings":"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","sourcesContent":["'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n"]},"metadata":{},"sourceType":"script"}