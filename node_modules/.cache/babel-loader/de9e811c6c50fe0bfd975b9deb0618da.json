{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst CryptoProvider = require('./CryptoProvider');\n/**\n * `CryptoProvider which uses the Node `crypto` package for its computations.\n */\n\n\nclass NodeCryptoProvider extends CryptoProvider {\n  /** @override */\n  computeHMACSignature(payload, secret) {\n    return crypto.createHmac('sha256', secret).update(payload, 'utf8').digest('hex');\n  }\n  /** @override */\n\n\n  async computeHMACSignatureAsync(payload, secret) {\n    const signature = await this.computeHMACSignature(payload, secret);\n    return signature;\n  }\n\n}\n\nmodule.exports = NodeCryptoProvider;","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/stripe/lib/crypto/NodeCryptoProvider.js"],"names":["crypto","require","CryptoProvider","NodeCryptoProvider","computeHMACSignature","payload","secret","createHmac","update","digest","computeHMACSignatureAsync","signature","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;AACA;AACA;;;AACA,MAAME,kBAAN,SAAiCD,cAAjC,CAAgD;AAC9C;AACAE,EAAAA,oBAAoB,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACpC,WAAON,MAAM,CACVO,UADI,CACO,QADP,EACiBD,MADjB,EAEJE,MAFI,CAEGH,OAFH,EAEY,MAFZ,EAGJI,MAHI,CAGG,KAHH,CAAP;AAID;AAED;;;AAC+B,QAAzBC,yBAAyB,CAACL,OAAD,EAAUC,MAAV,EAAkB;AAC/C,UAAMK,SAAS,GAAG,MAAM,KAAKP,oBAAL,CAA0BC,OAA1B,EAAmCC,MAAnC,CAAxB;AACA,WAAOK,SAAP;AACD;;AAb6C;;AAgBhDC,MAAM,CAACC,OAAP,GAAiBV,kBAAjB","sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\n\nconst CryptoProvider = require('./CryptoProvider');\n\n/**\n * `CryptoProvider which uses the Node `crypto` package for its computations.\n */\nclass NodeCryptoProvider extends CryptoProvider {\n  /** @override */\n  computeHMACSignature(payload, secret) {\n    return crypto\n      .createHmac('sha256', secret)\n      .update(payload, 'utf8')\n      .digest('hex');\n  }\n\n  /** @override */\n  async computeHMACSignatureAsync(payload, secret) {\n    const signature = await this.computeHMACSignature(payload, secret);\n    return signature;\n  }\n}\n\nmodule.exports = NodeCryptoProvider;\n"]},"metadata":{},"sourceType":"script"}