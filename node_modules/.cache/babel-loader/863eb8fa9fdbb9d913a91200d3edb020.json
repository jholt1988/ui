{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").postgres;\n\nconst {\n  PostgresQueryInterface\n} = require(\"./query-interface\");\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nPostgresDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT VALUES\": true,\n  EXCEPTION: true,\n  \"ON DUPLICATE KEY\": false,\n  \"ORDER NULLS\": true,\n  returnValues: {\n    returning: true\n  },\n  bulkDefault: true,\n  schemas: true,\n  lock: true,\n  lockOf: true,\n  lockKey: true,\n  lockOuterJoinFailure: true,\n  skipLocked: true,\n  forShare: \"FOR SHARE\",\n  index: {\n    concurrently: true,\n    using: 2,\n    where: true,\n    functionBased: true,\n    operator: true\n  },\n  inserts: {\n    onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true\n  },\n  NUMERIC: true,\n  ARRAY: true,\n  RANGE: true,\n  GEOMETRY: true,\n  REGEXP: true,\n  GEOGRAPHY: true,\n  JSON: true,\n  JSONB: true,\n  HSTORE: true,\n  TSVECTOR: true,\n  deferrableConstraints: true,\n  searchPath: true\n});\nPostgresDialect.prototype.defaultVersion = \"9.5.0\";\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = \"postgres\";\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;;AACA,MAAME,oBAAoBF,QAAQ,sBAAR,CAA1B;;AACA,MAAMG,QAAQH,QAAQ,SAAR,CAAd;;AACA,MAAMI,iBAAiBJ,QAAQ,mBAAR,CAAvB;;AACA,MAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,QAA9C;;AACA,MAAM;AAAEC;AAAF,IAA6BP,QAAQ,mBAAR,CAAnC;;AAEA,8BAA8BC,eAA9B,CAA8C;AAC5CO,cAAYC,SAAZ,EAAuB;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,IAAIP,cAAJ,CAAmB;AACvCQ,gBAAU,IAD6B;AAEvCH;AAFuC,KAAnB,CAAtB;AAIA,SAAKI,cAAL,GAAsB,IAAIN,sBAAJ,CACpBE,SADoB,EAEpB,KAAKE,cAFe,CAAtB;AAEO;;AAXmC;;AAgB9CG,gBAAgBC,SAAhB,CAA0BC,QAA1B,GAAqCjB,EAAEkB,KAAF,CACnClB,EAAEmB,SAAF,CAAYjB,gBAAgBc,SAAhB,CAA0BC,QAAtC,CADmC,EAEnC;AACE,oBAAkB,IADpB;AAEEG,aAAW,IAFb;AAGE,sBAAoB,KAHtB;AAIE,iBAAe,IAJjB;AAKEC,gBAAc;AACZC,eAAW;AADC,GALhB;AAQEC,eAAa,IARf;AASEC,WAAS,IATX;AAUEC,QAAM,IAVR;AAWEC,UAAQ,IAXV;AAYEC,WAAS,IAZX;AAaEC,wBAAsB,IAbxB;AAcEC,cAAY,IAdd;AAeEC,YAAU,WAfZ;AAgBEC,SAAO;AACLC,kBAAc,IADT;AAELC,WAAO,CAFF;AAGLC,WAAO,IAHF;AAILC,mBAAe,IAJV;AAKLC,cAAU;AALL,GAhBT;AAuBEC,WAAS;AACPC,yBAAqB,yBADd;AAEPC,uBAAmB,4BAFZ;AAGPC,oBAAgB;AAHT,GAvBX;AA4BEC,WAAS,IA5BX;AA6BEC,SAAO,IA7BT;AA8BEC,SAAO,IA9BT;AA+BEC,YAAU,IA/BZ;AAgCEC,UAAQ,IAhCV;AAiCEC,aAAW,IAjCb;AAkCEC,QAAM,IAlCR;AAmCEC,SAAO,IAnCT;AAoCEC,UAAQ,IApCV;AAqCEC,YAAU,IArCZ;AAsCEC,yBAAuB,IAtCzB;AAuCEC,cAAY;AAvCd,CAFmC,CAArC;AA6CArC,gBAAgBC,SAAhB,CAA0BqC,cAA1B,GAA2C,OAA3C;AACAtC,gBAAgBC,SAAhB,CAA0BZ,KAA1B,GAAkCA,KAAlC;AACAW,gBAAgBC,SAAhB,CAA0BV,SAA1B,GAAsCA,SAAtC;AACAS,gBAAgBC,SAAhB,CAA0BsC,IAA1B,GAAiC,UAAjC;AACAvC,gBAAgBC,SAAhB,CAA0BuC,SAA1B,GAAsC,GAAtC;AACAxC,gBAAgBC,SAAhB,CAA0BwC,cAA1B,GAA2CzC,gBAAgBC,SAAhB,CAA0BuC,SAArE;AACAxC,gBAAgBC,SAAhB,CAA0ByC,eAA1B,GAA4C1C,gBAAgBC,SAAhB,CAA0BuC,SAAtE;AAEAG,OAAOC,OAAP,GAAiB5C,eAAjB;AACA2C,OAAOC,OAAP,CAAeC,OAAf,GAAyB7C,eAAzB;AACA2C,OAAOC,OAAP,CAAe5C,eAAf,GAAiCA,eAAjC","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","postgres","PostgresQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","PostgresDialect","prototype","supports","merge","cloneDeep","EXCEPTION","returnValues","returning","bulkDefault","schemas","lock","lockOf","lockKey","lockOuterJoinFailure","skipLocked","forShare","index","concurrently","using","where","functionBased","operator","inserts","onConflictDoNothing","updateOnDuplicate","conflictFields","NUMERIC","ARRAY","RANGE","GEOMETRY","REGEXP","GEOGRAPHY","JSON","JSONB","HSTORE","TSVECTOR","deferrableConstraints","searchPath","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\postgres\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script"}