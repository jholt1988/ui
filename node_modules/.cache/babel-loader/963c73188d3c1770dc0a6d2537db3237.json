{"ast":null,"code":"const {\n  Vendor,\n  Product\n} = require('../../db');\n\nexports.createVendor = (req, res) => {\n  const vendorName = {\n    vendorName: req.body.vendorName\n  };\n  const exists = Vendor.vendorExists(vendorName);\n\n  if (exists) {\n    throw new Error('Vendor Already Exists');\n  } else {\n    Vendor.create(vendorName).then(newVendor => {\n      res.status(201).send(newVendor);\n    });\n  }\n};\n\nexports.createProduct = (req, res) => {\n  const vendorName = req.body.vendorName;\n  const vendor = Vendor.findOne({\n    vendorName\n  });\n  const product = {\n    productName: req.body.productName,\n    description: req.body.description,\n    price: req.body.price,\n    quantity: req.body.quantity,\n    vendorID: vendor.id,\n    category: req.body.category\n  };\n  Product.create(product).then(product => {\n    if (product) {\n      res.status(201).send(product);\n    } else {\n      res.send(Error('Error Adding Product'));\n    }\n  }).catch(err => {\n    res.send(err.message);\n  });\n};\n\nexports.updateProduct = async (req, res, data) => {\n  const productName = req.query.productName;\n  await Product.findOne({\n    productName\n  }).then(async product => {\n    await Product.update(data).then(updatedProduct => {\n      if (updatedProduct) {\n        res.send(200).send(updatedProduct);\n      } else {\n        res.send(Error(\"Error updating product\"));\n      }\n    }).catch(err => {\n      res.send(err.message);\n    });\n  });\n};\n\nexports.getAllProducts = async (req, res) => {\n  Product.findAll().then(products => {\n    res.status(200).send(products);\n  }).catch(err => {\n    res.send(err.message);\n  });\n};\n\nexports.getProduct = async (req, res) => {\n  const productName = req.query.productName;\n  Product.findOne({\n    productName\n  }).then(product => {\n    if (product) {\n      res.status(200).send(product);\n    } else {\n      res.send(Error('Product Not Found'));\n    }\n  });\n};\n\nexports.getVendor = async (req, res) => {\n  const vendorName = req.query;\n  Vendor.findOne({\n    vendorName\n  }).then(vendor => {\n    if (vendor) {\n      res.status(200).send(vendor);\n    } else {\n      res.send(Error('Vendor Not Found'));\n    }\n  });\n};\n\nexports.getVendorProductList = async (req, res) => {\n  const vendorName = req.query;\n  let productList = [];\n  const vendor = await Vendor.findOne({\n    vendorName\n  });\n  await Product.findAll({\n    where: {\n      vendorID: vendor.id\n    }\n  }).then(products => {\n    if (products) {\n      for (let product of products) {\n        productList = productList.push(product);\n      }\n\n      res.status(200).send({\n        vendorName: {\n          productList\n        }\n      });\n    } else {\n      res.send(Error('Error Get Vendor Product List'));\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Services/Store/StoreService.js"],"names":["Vendor","Product","require","exports","createVendor","req","res","vendorName","body","exists","vendorExists","Error","create","then","newVendor","status","send","createProduct","vendor","findOne","product","productName","description","price","quantity","vendorID","id","category","catch","err","message","updateProduct","data","query","update","updatedProduct","getAllProducts","findAll","products","getProduct","getVendor","getVendorProductList","productList","where","push"],"mappings":"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","sourcesContent":["const {Vendor, Product} = require('../../db')\r\n\r\nexports.createVendor = (req, res) => {\r\n   \r\n    const vendorName = { vendorName: req.body.vendorName }\r\n\r\n   \r\n    const exists = Vendor.vendorExists(vendorName)\r\n    if (exists) {\r\n        throw new Error('Vendor Already Exists')\r\n    } else {\r\n        Vendor.create(vendorName).then(newVendor => {\r\n            res.status(201).send(newVendor)\r\n        })\r\n    }\r\n}\r\n    \r\n    exports.createProduct = (req, res) => {\r\n        const  vendorName  = req.body.vendorName\r\n        const vendor = Vendor.findOne({ vendorName })\r\n        const product = {\r\n            productName : req.body.productName,\r\n            description : req.body.description,\r\n            price : req.body.price, \r\n            quantity :req.body.quantity, \r\n            vendorID : vendor.id, \r\n            category : req.body.category\r\n        }\r\n\r\n        Product.create(product)\r\n            .then(product => {\r\n                if (product) {\r\n                    res.status(201).send(product)\r\n                } else {\r\n                    res.send(Error('Error Adding Product'))\r\n                }\r\n            })\r\n            .catch(err => {\r\n                res.send(err.message)\r\n            })\r\n}\r\n            \r\nexports.updateProduct = async (req, res, data) => {\r\nconst productName = req.query.productName\r\n    await Product.findOne({ productName })\r\n        .then(async (product)=> {\r\n           await Product.update(data).then( (updatedProduct) => {\r\n                if (updatedProduct) {\r\n                    res.send(200).send(updatedProduct)\r\n                } else {\r\n                    res.send(Error(\"Error updating product\"))\r\n                }\r\n            })\r\n                .catch(err => {\r\n                res.send(err.message)\r\n            })\r\n                \r\n        })\r\n\r\n}\r\n\r\nexports.getAllProducts = async (req, res) => {\r\n    Product.findAll().then(products => {\r\n        \r\n            \r\n            res.status(200).send(products)\r\n        })\r\n        .catch(err => {\r\n        res.send(err.message)\r\n    })\r\n}\r\n\r\n\r\nexports.getProduct = async (req, res) => {\r\n    const productName = req.query.productName\r\n    Product.findOne({ productName }).then(product => {\r\n        if (product) {\r\n            res.status(200).send(product)\r\n        } else {\r\n            res.send(Error('Product Not Found'))\r\n        }\r\n    })\r\n}\r\n    \r\nexports.getVendor = async (req, res) => {\r\n    const vendorName = req.query\r\n    Vendor.findOne({ vendorName }).then(vendor => {\r\n        if (vendor) {\r\n            res.status(200).send(vendor)\r\n        } else {\r\n            res.send(Error('Vendor Not Found'))\r\n        }\r\n    })\r\n}\r\n\r\nexports.getVendorProductList = async (req, res) => {\r\n    const vendorName = req.query\r\n\r\n    let productList = [];\r\n\r\n    const vendor = await Vendor.findOne({ vendorName })\r\n    \r\n    await Product.findAll({ where: { vendorID: vendor.id } }).then(products => {\r\n        if (products) {\r\n            for (let product of products) {\r\n              productList =  productList.push(product)\r\n            \r\n            }\r\n            res.status(200).send({\r\n                vendorName: {\r\n                    productList\r\n                }\r\n            })\r\n        } else {\r\n            res.send(Error('Error Get Vendor Product List'))\r\n        }\r\n    })\r\n}\r\n    \r\n"]},"metadata":{},"sourceType":"script"}