{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pool = void 0;\n\nconst Deferred_1 = require(\"./Deferred\");\n\nconst AggregateError_1 = require(\"./AggregateError\");\n\nclass Pool {\n  constructor(factory) {\n    this.log = false;\n\n    if (!factory.create) {\n      throw new Error('create function is required');\n    }\n\n    if (!factory.destroy) {\n      throw new Error('destroy function is required');\n    }\n\n    if (!factory.validate) {\n      throw new Error('validate function is required');\n    }\n\n    if (typeof factory.min !== 'number' || factory.min < 0 || factory.min !== Math.round(factory.min)) {\n      throw new Error('min must be an integer >= 0');\n    }\n\n    if (typeof factory.max !== 'number' || factory.max <= 0 || factory.max !== Math.round(factory.max)) {\n      throw new Error('max must be an integer > 0');\n    }\n\n    if (factory.min > factory.max) {\n      throw new Error('max is smaller than min');\n    }\n\n    if (factory.maxUses !== undefined && (typeof factory.maxUses !== 'number' || factory.maxUses < 0)) {\n      throw new Error('maxUses must be an integer >= 0');\n    }\n\n    this.idleTimeoutMillis = factory.idleTimeoutMillis || 30000;\n    this.acquireTimeoutMillis = factory.acquireTimeoutMillis || 30000;\n    this.reapIntervalMillis = factory.reapIntervalMillis || 1000;\n    this.maxUsesPerResource = factory.maxUses || Infinity;\n    this.log = factory.log || false;\n    this._factory = factory;\n    this._count = 0;\n    this._draining = false;\n    this._pendingAcquires = [];\n    this._inUseObjects = [];\n    this._availableObjects = [];\n    this._removeIdleScheduled = false;\n  }\n\n  get size() {\n    return this._count;\n  }\n\n  get name() {\n    return this._factory.name;\n  }\n\n  get available() {\n    return this._availableObjects.length;\n  }\n\n  get using() {\n    return this._inUseObjects.length;\n  }\n\n  get waiting() {\n    return this._pendingAcquires.length;\n  }\n\n  get maxSize() {\n    return this._factory.max;\n  }\n\n  get minSize() {\n    return this._factory.min;\n  }\n\n  _log(message, level) {\n    if (typeof this.log === 'function') {\n      this.log(message, level);\n    } else if (this.log) {\n      console.log(`${level.toUpperCase()} pool ${this.name || ''} - ${message}`);\n    }\n  }\n\n  _removeIdle() {\n    const toRemove = [];\n    const now = Date.now();\n    let i;\n    let available = this._availableObjects.length;\n    const maxRemovable = this.size - this.minSize;\n    let timeout;\n    this._removeIdleScheduled = false;\n\n    for (i = 0; i < available && maxRemovable > toRemove.length; i++) {\n      timeout = this._availableObjects[i].timeout;\n\n      if (now >= timeout) {\n        this._log('removeIdle() destroying obj - now:' + now + ' timeout:' + timeout, 'verbose');\n\n        toRemove.push(this._availableObjects[i].resource);\n      }\n    }\n\n    toRemove.forEach(this.destroy, this);\n    available = this._availableObjects.length;\n\n    if (available > 0) {\n      this._log('this._availableObjects.length=' + available, 'verbose');\n\n      this._scheduleRemoveIdle();\n    } else {\n      this._log('removeIdle() all objects removed', 'verbose');\n    }\n  }\n\n  _scheduleRemoveIdle() {\n    if (!this._removeIdleScheduled) {\n      this._removeIdleScheduled = true;\n      this._removeIdleTimer = setTimeout(() => {\n        this._removeIdle();\n      }, this.reapIntervalMillis);\n    }\n  }\n\n  _dispense() {\n    let wrappedResource = null;\n    const waitingCount = this._pendingAcquires.length;\n\n    this._log(`dispense() clients=${waitingCount} available=${this._availableObjects.length}`, 'info');\n\n    if (waitingCount < 1) {\n      return;\n    }\n\n    while (this._availableObjects.length > 0) {\n      this._log('dispense() - reusing obj', 'verbose');\n\n      wrappedResource = this._availableObjects[this._availableObjects.length - 1];\n\n      if (!this._factory.validate(wrappedResource.resource)) {\n        this.destroy(wrappedResource.resource);\n        continue;\n      }\n\n      this._availableObjects.pop();\n\n      this._addResourceToInUseObjects(wrappedResource.resource, wrappedResource.useCount);\n\n      const deferred = this._pendingAcquires.shift();\n\n      return deferred.resolve(wrappedResource.resource);\n    }\n\n    if (this.size < this.maxSize) {\n      this._createResource();\n    }\n  }\n\n  _createResource() {\n    this._count += 1;\n\n    this._log(`createResource() - creating obj - count=${this.size} min=${this.minSize} max=${this.maxSize}`, 'verbose');\n\n    this._factory.create().then(resource => {\n      const deferred = this._pendingAcquires.shift();\n\n      if (deferred) {\n        this._addResourceToInUseObjects(resource, 0);\n\n        deferred.resolve(resource);\n      } else {\n        this._addResourceToAvailableObjects(resource, 0);\n      }\n    }).catch(error => {\n      const deferred = this._pendingAcquires.shift();\n\n      this._count -= 1;\n      if (this._count < 0) this._count = 0;\n\n      if (deferred) {\n        deferred.reject(error);\n      }\n\n      process.nextTick(() => {\n        this._dispense();\n      });\n    });\n  }\n\n  _addResourceToAvailableObjects(resource, useCount) {\n    const wrappedResource = {\n      resource: resource,\n      useCount: useCount,\n      timeout: Date.now() + this.idleTimeoutMillis\n    };\n\n    this._availableObjects.push(wrappedResource);\n\n    this._dispense();\n\n    this._scheduleRemoveIdle();\n  }\n\n  _addResourceToInUseObjects(resource, useCount) {\n    const wrappedResource = {\n      resource: resource,\n      useCount: useCount\n    };\n\n    this._inUseObjects.push(wrappedResource);\n  }\n\n  _ensureMinimum() {\n    let i, diff;\n\n    if (!this._draining && this.size < this.minSize) {\n      diff = this.minSize - this.size;\n\n      for (i = 0; i < diff; i++) {\n        this._createResource();\n      }\n    }\n  }\n\n  acquire() {\n    if (this._draining) {\n      return Promise.reject(new Error('pool is draining and cannot accept work'));\n    }\n\n    const deferred = new Deferred_1.Deferred();\n    deferred.registerTimeout(this.acquireTimeoutMillis, () => {\n      this._pendingAcquires = this._pendingAcquires.filter(pending => pending !== deferred);\n    });\n\n    this._pendingAcquires.push(deferred);\n\n    this._dispense();\n\n    return deferred.promise();\n  }\n\n  release(resource) {\n    if (this._availableObjects.some(resourceWithTimeout => resourceWithTimeout.resource === resource)) {\n      this._log('release called twice for the same resource: ' + new Error().stack, 'error');\n\n      return;\n    }\n\n    const index = this._inUseObjects.findIndex(wrappedResource => wrappedResource.resource === resource);\n\n    if (index < 0) {\n      this._log('attempt to release an invalid resource: ' + new Error().stack, 'error');\n\n      return;\n    }\n\n    const wrappedResource = this._inUseObjects[index];\n    wrappedResource.useCount += 1;\n\n    if (wrappedResource.useCount >= this.maxUsesPerResource) {\n      this._log('release() destroying obj - useCount:' + wrappedResource.useCount + ' maxUsesPerResource:' + this.maxUsesPerResource, 'verbose');\n\n      this.destroy(wrappedResource.resource);\n\n      this._dispense();\n    } else {\n      this._inUseObjects.splice(index, 1);\n\n      this._addResourceToAvailableObjects(wrappedResource.resource, wrappedResource.useCount);\n    }\n  }\n\n  async destroy(resource) {\n    const available = this._availableObjects.length;\n    const using = this._inUseObjects.length;\n    this._availableObjects = this._availableObjects.filter(object => object.resource !== resource);\n    this._inUseObjects = this._inUseObjects.filter(object => object.resource !== resource);\n\n    if (available === this._availableObjects.length && using === this._inUseObjects.length) {\n      this._ensureMinimum();\n\n      return;\n    }\n\n    this._count -= 1;\n    if (this._count < 0) this._count = 0;\n\n    try {\n      await this._factory.destroy(resource);\n    } finally {\n      this._ensureMinimum();\n\n      if (!this._draining) {\n        process.nextTick(() => {\n          this._dispense();\n        });\n      }\n    }\n  }\n\n  drain() {\n    this._log('draining', 'info');\n\n    this._draining = true;\n\n    const check = callback => {\n      if (this._pendingAcquires.length > 0) {\n        this._dispense();\n\n        setTimeout(() => {\n          check(callback);\n        }, 100);\n        return;\n      }\n\n      if (this._availableObjects.length !== this._count) {\n        setTimeout(() => {\n          check(callback);\n        }, 100);\n        return;\n      }\n\n      callback();\n    };\n\n    return new Promise(resolve => check(resolve));\n  }\n\n  async destroyAllNow() {\n    this._log('force destroying all objects', 'info');\n\n    this._removeIdleScheduled = false;\n    clearTimeout(this._removeIdleTimer);\n\n    const resources = this._availableObjects.map(resource => resource.resource);\n\n    const errors = [];\n\n    for (const resource of resources) {\n      try {\n        await this.destroy(resource);\n      } catch (ex) {\n        this._log('Error destroying resource: ' + ex.stack, 'error');\n\n        errors.push(ex);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new AggregateError_1.AggregateError(errors);\n    }\n  }\n\n}\n\nexports.Pool = Pool;","map":{"version":3,"mappings":"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","names":["Pool","constructor","factory","create","Error","destroy","validate","min","Math","round","max","maxUses","undefined","idleTimeoutMillis","acquireTimeoutMillis","reapIntervalMillis","maxUsesPerResource","Infinity","log","_factory","_count","_draining","_pendingAcquires","_inUseObjects","_availableObjects","_removeIdleScheduled","size","name","available","length","using","waiting","maxSize","minSize","_log","message","level","console","toUpperCase","_removeIdle","toRemove","now","Date","i","maxRemovable","timeout","push","resource","forEach","_scheduleRemoveIdle","_removeIdleTimer","setTimeout","_dispense","wrappedResource","waitingCount","pop","_addResourceToInUseObjects","useCount","deferred","shift","resolve","_createResource","then","_addResourceToAvailableObjects","catch","error","reject","process","nextTick","_ensureMinimum","diff","acquire","Promise","Deferred_1","registerTimeout","filter","pending","promise","release","some","resourceWithTimeout","stack","index","findIndex","splice","object","drain","check","callback","destroyAllNow","clearTimeout","resources","map","errors","ex","AggregateError_1","exports"],"sources":["../src/Pool.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}