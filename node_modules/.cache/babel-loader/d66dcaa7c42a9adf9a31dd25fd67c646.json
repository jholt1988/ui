{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst os = require('os');\n\nfunction log(message) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n}\n\nconst NEWLINE = '\\n';\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|.*?)(\\s+#.*)?$/;\nconst RE_NEWLINES = /\\\\n/g;\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/; // Parses src into an Object\n\nfunction parse(src, options) {\n  const debug = Boolean(options && options.debug);\n  const multiline = Boolean(options && options.multiline);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  const lines = src.toString().split(NEWLINES_MATCH);\n\n  for (let idx = 0; idx < lines.length; idx++) {\n    let line = lines[idx]; // matching \"KEY' and 'VAL' in 'KEY=VAL'\n\n    const keyValueArr = line.match(RE_INI_KEY_VAL); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let val = keyValueArr[2] || '';\n      let end = val.length - 1;\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"';\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\";\n      const isMultilineDoubleQuoted = val[0] === '\"' && val[end] !== '\"';\n      const isMultilineSingleQuoted = val[0] === \"'\" && val[end] !== \"'\"; // if parsing line breaks and the value starts with a quote\n\n      if (multiline && (isMultilineDoubleQuoted || isMultilineSingleQuoted)) {\n        const quoteChar = isMultilineDoubleQuoted ? '\"' : \"'\";\n        val = val.substring(1);\n\n        while (idx++ < lines.length - 1) {\n          line = lines[idx];\n          end = line.length - 1;\n\n          if (line[end] === quoteChar) {\n            val += NEWLINE + line.substring(0, end);\n            break;\n          }\n\n          val += NEWLINE + line;\n        } // if single or double quoted, remove quotes\n\n      } else if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end); // if double quoted, expand newlines\n\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE);\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim();\n      }\n\n      obj[key] = val;\n    } else if (debug) {\n      const trimmedLine = line.trim(); // ignore empty and commented lines\n\n      if (trimmedLine.length && trimmedLine[0] !== '#') {\n        log(`Failed to match key and value when parsing line ${idx + 1}: ${line}`);\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n} // Populates process.env from .env file\n\n\nfunction config(options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding = 'utf8';\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n  const multiline = Boolean(options && options.multiline);\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path);\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug,\n      multiline\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key];\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key];\n        }\n\n        if (debug) {\n          if (override === true) {\n            log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`);\n          } else {\n            log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`);\n          }\n        }\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    if (debug) {\n      log(`Failed to load ${dotenvPath} ${e.message}`);\n    }\n\n    return {\n      error: e\n    };\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n};\nmodule.exports.config = DotenvModule.config;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports = DotenvModule;","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","os","log","message","console","NEWLINE","RE_INI_KEY_VAL","RE_NEWLINES","NEWLINES_MATCH","parse","src","options","debug","Boolean","multiline","obj","lines","toString","split","idx","length","line","keyValueArr","match","key","val","end","isDoubleQuoted","isSingleQuoted","isMultilineDoubleQuoted","isMultilineSingleQuoted","quoteChar","substring","replace","trim","trimmedLine","resolveHome","envPath","join","homedir","slice","config","dotenvPath","resolve","process","cwd","encoding","override","parsed","DotenvModule","readFileSync","Object","keys","forEach","prototype","hasOwnProperty","call","env","e","error","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nfunction log (message) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|.*?)(\\s+#.*)?$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src, options) {\n  const debug = Boolean(options && options.debug)\n  const multiline = Boolean(options && options.multiline)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  const lines = src.toString().split(NEWLINES_MATCH)\n\n  for (let idx = 0; idx < lines.length; idx++) {\n    let line = lines[idx]\n\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      let end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      const isMultilineDoubleQuoted = val[0] === '\"' && val[end] !== '\"'\n      const isMultilineSingleQuoted = val[0] === \"'\" && val[end] !== \"'\"\n\n      // if parsing line breaks and the value starts with a quote\n      if (multiline && (isMultilineDoubleQuoted || isMultilineSingleQuoted)) {\n        const quoteChar = isMultilineDoubleQuoted ? '\"' : \"'\"\n\n        val = val.substring(1)\n\n        while (idx++ < lines.length - 1) {\n          line = lines[idx]\n          end = line.length - 1\n          if (line[end] === quoteChar) {\n            val += NEWLINE + line.substring(0, end)\n            break\n          }\n          val += NEWLINE + line\n        }\n      // if single or double quoted, remove quotes\n      } else if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      const trimmedLine = line.trim()\n\n      // ignore empty and commented lines\n      if (trimmedLine.length && trimmedLine[0] !== '#') {\n        log(`Failed to match key and value when parsing line ${idx + 1}: ${line}`)\n      }\n    }\n  }\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n  const multiline = Boolean(options && options.multiline)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }), { debug, multiline })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n"]},"metadata":{},"sourceType":"script"}