{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\n__export(exports, {\n  ValidationErrorItem: () => ValidationErrorItem,\n  ValidationErrorItemOrigin: () => ValidationErrorItemOrigin,\n  ValidationErrorItemType: () => ValidationErrorItemType,\n  default: () => validation_error_default\n});\n\nvar import_base_error = __toModule(require(\"./base-error\"));\n\nvar ValidationErrorItemType = /* @__PURE__ */(ValidationErrorItemType2 => {\n  ValidationErrorItemType2[\"notnull violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"string violation\"] = \"CORE\";\n  ValidationErrorItemType2[\"unique violation\"] = \"DB\";\n  ValidationErrorItemType2[\"validation error\"] = \"FUNCTION\";\n  return ValidationErrorItemType2;\n})(ValidationErrorItemType || {});\n\nvar ValidationErrorItemOrigin = /* @__PURE__ */(ValidationErrorItemOrigin2 => {\n  ValidationErrorItemOrigin2[\"CORE\"] = \"CORE\";\n  ValidationErrorItemOrigin2[\"DB\"] = \"DB\";\n  ValidationErrorItemOrigin2[\"FUNCTION\"] = \"FUNCTION\";\n  return ValidationErrorItemOrigin2;\n})(ValidationErrorItemOrigin || {});\n\nclass ValidationErrorItem {\n  constructor(message, type, path, value, instance, validatorKey, fnName, fnArgs) {\n    __publicField(this, \"message\");\n\n    __publicField(this, \"type\");\n\n    __publicField(this, \"path\");\n\n    __publicField(this, \"value\");\n\n    __publicField(this, \"origin\");\n\n    __publicField(this, \"instance\");\n\n    __publicField(this, \"validatorKey\");\n\n    __publicField(this, \"validatorName\");\n\n    __publicField(this, \"validatorArgs\");\n\n    this.message = message || \"\";\n    this.type = null;\n    this.path = path || null;\n    this.value = value !== void 0 ? value : null;\n    this.origin = null;\n    this.instance = instance || null;\n    this.validatorKey = validatorKey || null;\n    this.validatorName = fnName || null;\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n  }\n\n  isValidationErrorItemOrigin(origin) {\n    return ValidationErrorItemOrigin[origin] !== void 0;\n  }\n\n  normalizeString(str) {\n    return str.toLowerCase().trim();\n  }\n\n  getValidatorKey(useTypeAsNS, NSSeparator) {\n    const useTANS = useTypeAsNS === void 0 || !!useTypeAsNS;\n    const NSSep = NSSeparator === void 0 ? \".\" : NSSeparator;\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== \"string\" || !NSSep.length)) {\n      throw new Error(\"Invalid namespace separator given, must be a non-empty string\");\n    }\n\n    if (!(typeof key === \"string\" && key.length)) {\n      return \"\";\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n\n}\n\n__publicField(ValidationErrorItem, \"TypeStringMap\", ValidationErrorItemType);\n\n__publicField(ValidationErrorItem, \"Origins\", ValidationErrorItemOrigin);\n\nclass ValidationError extends import_base_error.default {\n  constructor(message, errors) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(message);\n\n    __publicField(this, \"errors\");\n\n    this.name = \"SequelizeValidationError\";\n    this.message = \"Validation Error\";\n    this.errors = errors || [];\n\n    if (message) {\n      this.message = message;\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors.map(err => `${err.type || err.origin}: ${err.message}`).join(\",\\n\");\n    }\n\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  get(path) {\n    return this.errors.reduce((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n\n      return reduced;\n    }, []);\n  }\n\n}\n\nvar validation_error_default = ValidationError;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;;AAEA,wBAAsBC,mCAAtB;;AAOO,IAAKF,0BAAL,gBAAKG,wBAAL;AACLA,kDAAsB,MAAtB;AACAA,iDAAqB,MAArB;AACAA,iDAAqB,IAArB;AACAA,iDAAqB,UAArB;AAJU;AAAA,CAAL,EAAKH,6BAAL;;AAUA,IAAKD,4BAAL,gBAAKK,0BAAL;AAILA,uCAAO,MAAP;AAKAA,qCAAK,IAAL;AAKAA,2CAAW,UAAX;AAdU;AAAA,CAAL,EAAKL,+BAAL;;AAqBA,0BAA0B;AAiE/BM,cACEC,OADF,EAEEC,IAFF,EAKEC,IALF,EAMEC,KANF,EAOEC,QAPF,EAQEC,YARF,EASEC,MATF,EAUEC,MAVF,EAWE;AA9DOC;;AAKAA;;AAKAA;;AAKAA;;AAEAA;;AAKAA;;AAKAA;;AAKAA;;AAKAA;;AA0BP,SAAKR,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,IAAL,GAAYA,QAAQ,IAApB;AAEA,SAAKC,KAAL,GAAaA,UAAU,MAAV,GAAsBA,KAAtB,GAA8B,IAA3C;AAEA,SAAKM,MAAL,GAAc,IAAd;AAEA,SAAKL,QAAL,GAAgBA,YAAY,IAA5B;AAEA,SAAKC,YAAL,GAAoBA,gBAAgB,IAApC;AAEA,SAAKK,aAAL,GAAqBJ,UAAU,IAA/B;AAEA,SAAKK,aAAL,GAAqBJ,UAAU,EAA/B;;AAEA,QAAIN,IAAJ,EAAU;AACR,UAAI,KAAKW,2BAAL,CAAiCX,IAAjC,CAAJ,EAA4C;AAC1C,aAAKQ,MAAL,GAAcR,IAAd;AAAc,OADhB,MAEO;AACL,cAAMY,gBAAgB,KAAKC,eAAL,CAAqBb,IAArB,CAAtB;AACA,cAAMc,WAAWrB,wBAAwBmB,aAAxB,CAAjB;;AAEA,YAAIE,YAAYtB,0BAA0BsB,QAA1B,CAAhB,EAAqD;AACnD,eAAKN,MAAL,GAAcM,QAAd;AACA,eAAKd,IAAL,GAAYA,IAAZ;AAAY;AAAA;AAAA;AAAA;;AAQZW,8BACNH,MADM,EAI4C;AAClD,WACEhB,0BACEgB,MADF,MAEM,MAHR;AAGQ;;AAIFK,kBAAkCE,GAAlC,EAA6C;AACnD,WAAOA,IAAIC,WAAJ,GAAkBC,IAAlB,EAAP;AAAyB;;AAc3BC,kBAAgBC,WAAhB,EAAsCC,WAAtC,EAAmE;AACjE,UAAMC,UAAUF,gBAAgB,MAAhB,IAA6B,CAAC,CAACA,WAA/C;AACA,UAAMG,QAAQF,gBAAgB,MAAhB,GAA4B,GAA5B,GAAkCA,WAAhD;AAEA,UAAMpB,OAAO,KAAKQ,MAAlB;AACA,UAAMe,MAAM,KAAKnB,YAAL,IAAqB,KAAKK,aAAtC;AACA,UAAMe,QAAQH,WAAWrB,IAAX,IAAmBR,0BAA0BQ,IAA1B,CAAjC;;AAEA,QAAIwB,UAAU,OAAOF,KAAP,KAAiB,QAAjB,IAA6B,CAACA,MAAMG,MAA9C,CAAJ,EAA2D;AACzD,YAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AAAgB;;AAGlB,QAAI,EAAE,OAAOH,GAAP,KAAe,QAAf,IAA2BA,IAAIE,MAAjC,CAAJ,EAA8C;AAC5C,aAAO,EAAP;AAAO;;AAGT,WAAQ,SAAQ,CAAC,KAAKjB,MAAN,EAAce,GAAd,EAAmBI,IAAnB,CAAwBL,KAAxB,CAAR,GAAyCC,GAAzC,EAA8CP,WAA9C,GAA4DC,IAA5D,EAAR;AAAoE;;AAzJvC;;AAIxBV,cAJFhB,mBAIE,mBAAgBE,uBAAhB;;AAKAc,cATFhB,mBASE,aAAUC,yBAAV;;AA2JT,8BAA8BoC,yBAA9B,CAAwC;AAItC9B,cACEC,OADF,EAEE8B,MAFF,EAIE;AAAA,QADAC,OACA,uEADwB,EACxB;AACA,UAAM/B,OAAN;;AAPOQ;;AAQP,SAAKwB,IAAL,GAAY,0BAAZ;AACA,SAAKhC,OAAL,GAAe,kBAAf;AACA,SAAK8B,MAAL,GAAcA,UAAU,EAAxB;;AAGA,QAAI9B,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAeA,OAAf;AAAe,KADjB,MACiB,IAGN,KAAK8B,MAAL,CAAYJ,MAAZ,GAAqB,CAArB,IAA0B,KAAKI,MAAL,CAAY,CAAZ,EAAe9B,OAHnC,EAG4C;AAC3D,WAAKA,OAAL,GAAe,KAAK8B,MAAL,CACZG,GADY,CAEVC,GAAD,IACE,GAAGA,IAAIjC,IAAJ,IAAYiC,IAAIzB,WAAWyB,IAAIlC,SAHzB,EAKZ4B,IALY,CAKP,KALO,CAAf;AAKQ;;AAIV,QAAIG,QAAQI,KAAZ,EAAmB;AACjB,WAAKA,KAAL,GAAaJ,QAAQI,KAArB;AAAqB;AAAA;;AAWzBC,MAAIlC,IAAJ,EAAyC;AACvC,WAAO,KAAK4B,MAAL,CAAYO,MAAZ,CAA0C,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACnE,UAAIA,MAAMrC,IAAN,KAAeA,IAAnB,EAAyB;AACvBoC,gBAAQE,IAAR,CAAaD,KAAb;AAAa;;AAEf,aAAOD,OAAP;AAAO,KAJF,EAKJ,EALI,CAAP;AAKG;;AA/CiC;;AAmDxC,IAAOG,2BAAQC,eAAf","names":["__export","ValidationErrorItem","ValidationErrorItemOrigin","ValidationErrorItemType","default","__toModule","ValidationErrorItemType2","ValidationErrorItemOrigin2","constructor","message","type","path","value","instance","validatorKey","fnName","fnArgs","__publicField","origin","validatorName","validatorArgs","isValidationErrorItemOrigin","lowercaseType","normalizeString","realType","str","toLowerCase","trim","getValidatorKey","useTypeAsNS","NSSeparator","useTANS","NSSep","key","useNS","length","Error","join","import_base_error","errors","options","name","map","err","stack","get","reduce","reduced","error","push","validation_error_default","ValidationError"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\errors\\validation-error.ts"],"sourcesContent":["import type { Model } from '..';\nimport type { ErrorOptions } from './base-error';\nimport BaseError from './base-error';\n\n/**\n * An enum that is used internally by the `ValidationErrorItem` class\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\n * our new `origin` values.\n */\nexport enum ValidationErrorItemType {\n  'notnull violation' = 'CORE',\n  'string violation' = 'CORE',\n  'unique violation' = 'DB',\n  'validation error' = 'FUNCTION',\n}\n\n/**\n * An enum that defines valid ValidationErrorItem `origin` values\n */\nexport enum ValidationErrorItemOrigin {\n  /**\n   * specifies errors that originate from the sequelize \"core\"\n   */\n  CORE = 'CORE',\n\n  /**\n   * specifies validation errors that originate from the storage engine\n   */\n  DB = 'DB',\n\n  /**\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\n   */\n  FUNCTION = 'FUNCTION',\n}\n\n/**\n * Validation Error Item\n * Instances of this class are included in the `ValidationError.errors` property.\n */\nexport class ValidationErrorItem {\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static TypeStringMap = ValidationErrorItemType;\n\n  /**\n   * @deprecated Will be removed in v7\n   */\n  static Origins = ValidationErrorItemOrigin;\n\n  /**\n   * An error message\n   */\n  readonly message: string;\n\n  /**\n   * The type/origin of the validation error\n   */\n  readonly type: keyof typeof ValidationErrorItemType | null;\n\n  /**\n   * The field that triggered the validation error\n   */\n  readonly path: string | null;\n\n  /**\n   * The value that generated the error\n   */\n  readonly value: string | null;\n\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\n\n  /**\n   * The DAO instance that caused the validation error\n   */\n  readonly instance: Model | null;\n\n  /**\n   * A validation \"key\", used for identification\n   */\n  readonly validatorKey: string | null;\n\n  /**\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   */\n  readonly validatorName: string | null;\n\n  /**\n   * Parameters used with the BUILT-IN validator function, if applicable\n   */\n  readonly validatorArgs: unknown[];\n\n  /**\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\n   *\n   * @param message An error message\n   * @param type The type/origin of the validation error\n   * @param path The field that triggered the validation error\n   * @param value The value that generated the error\n   * @param instance the DAO instance that caused the validation error\n   * @param validatorKey a validation \"key\", used for identification\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\n   */\n  constructor(\n    message: string,\n    type:\n      | keyof typeof ValidationErrorItemType\n      | keyof typeof ValidationErrorItemOrigin,\n    path: string,\n    value: string,\n    instance: Model,\n    validatorKey: string,\n    fnName: string,\n    fnArgs: unknown[]\n  ) {\n    this.message = message || '';\n    this.type = null;\n    this.path = path || null;\n\n    this.value = value !== undefined ? value : null;\n\n    this.origin = null;\n\n    this.instance = instance || null;\n\n    this.validatorKey = validatorKey || null;\n\n    this.validatorName = fnName || null;\n\n    this.validatorArgs = fnArgs || [];\n\n    if (type) {\n      if (this.isValidationErrorItemOrigin(type)) {\n        this.origin = type;\n      } else {\n        const lowercaseType = this.normalizeString(type);\n        const realType = ValidationErrorItemType[lowercaseType];\n\n        if (realType && ValidationErrorItemOrigin[realType]) {\n          this.origin = realType;\n          this.type = type;\n        }\n      }\n    }\n\n    // This doesn't need captureStackTrace because it's not a subclass of Error\n  }\n\n  private isValidationErrorItemOrigin(\n    origin:\n      | keyof typeof ValidationErrorItemOrigin\n      | keyof typeof ValidationErrorItemType\n  ): origin is keyof typeof ValidationErrorItemOrigin {\n    return (\n      ValidationErrorItemOrigin[\n        origin as keyof typeof ValidationErrorItemOrigin\n      ] !== undefined\n    );\n  }\n\n  private normalizeString<T extends string>(str: T): T {\n    return str.toLowerCase().trim() as T;\n  }\n\n  /**\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\n   *\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\n   *\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\n   */\n  getValidatorKey(useTypeAsNS: boolean, NSSeparator: string): string {\n    const useTANS = useTypeAsNS === undefined || !!useTypeAsNS;\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\n\n    const type = this.origin;\n    const key = this.validatorKey || this.validatorName;\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\n\n    if (useNS && (typeof NSSep !== 'string' || !NSSep.length)) {\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\n    }\n\n    if (!(typeof key === 'string' && key.length)) {\n      return '';\n    }\n\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\n  }\n}\n\n/**\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\n *\n * @param message Error message\n * @param errors Array of ValidationErrorItem objects describing the validation errors\n */\nclass ValidationError extends BaseError {\n  /** Array of ValidationErrorItem objects describing the validation errors */\n  readonly errors: ValidationErrorItem[];\n\n  constructor(\n    message: string,\n    errors: ValidationErrorItem[],\n    options: ErrorOptions = {}\n  ) {\n    super(message);\n    this.name = 'SequelizeValidationError';\n    this.message = 'Validation Error';\n    this.errors = errors || [];\n\n    // Use provided error message if available...\n    if (message) {\n      this.message = message;\n\n      // ... otherwise create a concatenated message out of existing errors.\n    } else if (this.errors.length > 0 && this.errors[0].message) {\n      this.message = this.errors\n        .map(\n          (err: ValidationErrorItem) =>\n            `${err.type || err.origin}: ${err.message}`\n        )\n        .join(',\\n');\n    }\n\n    // Allow overriding the stack if the original stacktrace is uninformative\n    if (options.stack) {\n      this.stack = options.stack;\n    }\n  }\n\n  /**\n   * Gets all validation error items for the path / field specified.\n   *\n   * @param {string} path The path to be checked for error items\n   *\n   * @returns {Array<ValidationErrorItem>} Validation error items for the specified path\n   */\n  get(path: string): ValidationErrorItem[] {\n    return this.errors.reduce<ValidationErrorItem[]>((reduced, error) => {\n      if (error.path === path) {\n        reduced.push(error);\n      }\n      return reduced;\n    }, []);\n  }\n}\n\nexport default ValidationError;\n"]},"metadata":{},"sourceType":"script"}