{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst AbstractDialect = require(\"../abstract\");\n\nconst ConnectionManager = require(\"./connection-manager\");\n\nconst Query = require(\"./query\");\n\nconst QueryGenerator = require(\"./query-generator\");\n\nconst DataTypes = require(\"../../data-types\").snowflake;\n\nconst {\n  SnowflakeQueryInterface\n} = require(\"./query-interface\");\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"VALUES ()\": true,\n  \"LIMIT ON UPDATE\": true,\n  lock: true,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\nSnowflakeDialect.prototype.defaultVersion = \"5.7.0\";\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = \"snowflake\";\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\nmodule.exports = SnowflakeDialect;","map":{"version":3,"mappings":";;AAEA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AACA,MAAMC,kBAAkBD,QAAQ,aAAR,CAAxB;;AACA,MAAME,oBAAoBF,QAAQ,sBAAR,CAA1B;;AACA,MAAMG,QAAQH,QAAQ,SAAR,CAAd;;AACA,MAAMI,iBAAiBJ,QAAQ,mBAAR,CAAvB;;AACA,MAAMK,YAAYL,QAAQ,kBAAR,EAA4BM,SAA9C;;AACA,MAAM;AAAEC;AAAF,IAA8BP,QAAQ,mBAAR,CAApC;;AAEA,+BAA+BC,eAA/B,CAA+C;AAC7CO,cAAYC,SAAZ,EAAuB;AACrB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;AACA,SAAKE,cAAL,GAAsB,IAAIP,cAAJ,CAAmB;AACvCQ,gBAAU,IAD6B;AAEvCH;AAFuC,KAAnB,CAAtB;AAIA,SAAKI,cAAL,GAAsB,IAAIN,uBAAJ,CAA4BE,SAA5B,EAAuC,KAAKE,cAA5C,CAAtB;AAAkE;;AATvB;;AAa/CG,iBAAiBC,SAAjB,CAA2BC,QAA3B,GAAsCjB,EAAEkB,KAAF,CAAQlB,EAAEmB,SAAF,CAAYjB,gBAAgBc,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;AAC7F,eAAa,IADgF;AAE7F,qBAAmB,IAF0E;AAG7FG,QAAM,IAHuF;AAI7FC,YAAU,oBAJmF;AAK7FC,0CAAwC,KALqD;AAM7FC,WAAS;AACPC,sBAAkB,SADX;AAIPC,uBAAmB;AAJZ,GANoF;AAY7FC,SAAO;AACLC,aAAS,KADJ;AAELC,YAAQ,IAFH;AAGLC,YAAQ,IAHH;AAILC,UAAM,IAJD;AAKLC,WAAO;AALF,GAZsF;AAmB7FC,eAAa;AACXC,oBAAgB,KADL;AAEXC,WAAO;AAFI,GAnBgF;AAuB7FC,iBAAe,IAvB8E;AAwB7FC,cAAY,IAxBiF;AAyB7FC,WAAS,IAzBoF;AA2B7FC,YAAU,KA3BmF;AA4B7FC,QAAM,KA5BuF;AA6B7FC,UAAQ,IA7BqF;AA8B7FC,WAAS;AA9BoF,CAAzD,CAAtC;AAiCA1B,iBAAiBC,SAAjB,CAA2B0B,cAA3B,GAA4C,OAA5C;AACA3B,iBAAiBC,SAAjB,CAA2BZ,KAA3B,GAAmCA,KAAnC;AACAW,iBAAiBC,SAAjB,CAA2BX,cAA3B,GAA4CA,cAA5C;AACAU,iBAAiBC,SAAjB,CAA2BV,SAA3B,GAAuCA,SAAvC;AACAS,iBAAiBC,SAAjB,CAA2B2B,IAA3B,GAAkC,WAAlC;AACA5B,iBAAiBC,SAAjB,CAA2B4B,SAA3B,GAAuC,GAAvC;AACA7B,iBAAiBC,SAAjB,CAA2B6B,cAA3B,GAA4C9B,iBAAiBC,SAAjB,CAA2B4B,SAAvE;AACA7B,iBAAiBC,SAAjB,CAA2B8B,eAA3B,GAA6C/B,iBAAiBC,SAAjB,CAA2B4B,SAAxE;AAEAG,OAAOC,OAAP,GAAiBjC,gBAAjB","names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","snowflake","SnowflakeQueryInterface","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","SnowflakeDialect","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","schemas","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').snowflake;\nconst { SnowflakeQueryInterface } = require('./query-interface');\n\nclass SnowflakeDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nSnowflakeDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    // disable for now, but could be enable by approach below\n    // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\n    updateOnDuplicate: false\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  // disable for now, need more work to enable the GEOGRAPHY MAPPING\n  GEOMETRY: false,\n  JSON: false,\n  REGEXP: true,\n  schemas: true\n});\n\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\nSnowflakeDialect.prototype.Query = Query;\nSnowflakeDialect.prototype.QueryGenerator = QueryGenerator;\nSnowflakeDialect.prototype.DataTypes = DataTypes;\nSnowflakeDialect.prototype.name = 'snowflake';\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\n\nmodule.exports = SnowflakeDialect;\n"]},"metadata":{},"sourceType":"script"}