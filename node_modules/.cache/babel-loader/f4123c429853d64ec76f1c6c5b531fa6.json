{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst DataTypes = require(\"../../data-types\");\n\nconst QueryTypes = require(\"../../query-types\");\n\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\n\nconst Utils = require(\"../../utils\");\n\nclass PostgresQueryInterface extends QueryInterface {\n  async ensureEnums(tableName, attributes, options, model) {\n    var _this = this;\n\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = \"\";\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          plain: true,\n          raw: true,\n          type: QueryTypes.SELECT\n        })));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    const addEnumValue = function (field, value, relativeValue) {\n      let position = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"before\";\n      let spliceStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : promises.length;\n\n      const valueOptions = __spreadValues({}, options);\n\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case \"after\":\n          valueOptions.after = relativeValue;\n          break;\n\n        case \"before\":\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return _this.sequelize.query(_this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {\n              raw: true\n            }));\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n            }\n\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n\n    return result;\n  }\n\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n\n  async dropEnum(enumName, options) {\n    options = options || {};\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }));\n  }\n\n  async dropAllEnums(options) {\n    options = options || {};\n    const enums = await this.pgListEnums(null, options);\n    return await Promise.all(enums.map(result => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }))));\n  }\n\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n      attribute: \"tableName\"\n    });\n\n    if (!instanceTable) {\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          raw: true\n        })));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":{"version":3,"mappings":"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","names":["DataTypes","require","QueryTypes","QueryInterface","Utils","tableName","attributes","options","model","keys","Object","keyLen","length","sql","promises","i","attribute","type","ENUM","ARRAY","queryGenerator","pgListEnums","field","push","sequelize","query","__spreadProps","plain","raw","SELECT","results","Promise","all","enumIdx","addEnumValue","value","relativeValue","position","spliceStart","valueOptions","__spreadValues","before","after","splice","pgEnumAdd","enumType","pgEnum","enumVals","fromArray","enum_value","vals","values","lastOldEnumValue","rightestPosition","oldIndex","enumVal","newIdx","indexOf","newValuesBefore","slice","promisesLength","reverseIdx","remainingEnumValues","result","reduce","promise","asyncFunction","resolve","dialect","connectionManager","_refreshDynamicOIDs","table","queryOptions","FOREIGNKEYS","getForeignKeyReferencesQuery","config","database","map","camelizeObjectKeys","enumName","pgEnumDrop","pgEscapeAndQuote","enums","enum_name","dropTable","instanceTable","modelManager","getModel","getTableName","schema","rawAttributes","supportsSearchPath","exports","PostgresQueryInterface"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\postgres\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"]},"metadata":{},"sourceType":"script"}