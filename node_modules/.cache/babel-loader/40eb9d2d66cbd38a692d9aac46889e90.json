{"ast":null,"code":"\"use strict\";\n\nconst wkx = require(\"wkx\");\n\nconst _ = require(\"lodash\");\n\nconst momentTz = require(\"moment-timezone\");\n\nconst moment = require(\"moment\");\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.mysql.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.mysql = [\"DATETIME\"];\n  BaseTypes.STRING.types.mysql = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.mysql = [\"STRING\"];\n  BaseTypes.TEXT.types.mysql = [\"BLOB\"];\n  BaseTypes.TINYINT.types.mysql = [\"TINY\"];\n  BaseTypes.SMALLINT.types.mysql = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.mysql = [\"INT24\"];\n  BaseTypes.INTEGER.types.mysql = [\"LONG\"];\n  BaseTypes.BIGINT.types.mysql = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.mysql = [\"FLOAT\"];\n  BaseTypes.TIME.types.mysql = [\"TIME\"];\n  BaseTypes.DATEONLY.types.mysql = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.mysql = [\"TINY\"];\n  BaseTypes.BLOB.types.mysql = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.mysql = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.mysql = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.mysql = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.mysql = [\"JSON\"];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n\n      if (this._unsigned) {\n        definition += \" UNSIGNED\";\n      }\n\n      if (this._zerofill) {\n        definition += \" ZEROFILL\";\n      }\n\n      return definition;\n    }\n\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : \"DATETIME\";\n    }\n\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n\n    static parse(value, options) {\n      value = value.string();\n\n      if (value === null) {\n        return value;\n      }\n\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n\n      return value;\n    }\n\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"CHAR(36) BINARY\";\n    }\n\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = [\"POINT\", \"LINESTRING\", \"POLYGON\"];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(\", \")}`);\n    }\n\n    static parse(value) {\n      value = value.buffer();\n\n      if (!value || value.length === 0) {\n        return null;\n      }\n\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({\n        shortCrs: true\n      });\n    }\n\n    toSql() {\n      return this.sqlType;\n    }\n\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(\", \")})`;\n    }\n\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"mappings":"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","names":["wkx","require","_","momentTz","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","mysql","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","definition","_unsigned","_zerofill","_length","_stringify","date","options","isMoment","_applyTimezone","format","value","string","tz","zone","timezone","toDate","Date","SUPPORTED_GEOMETRY_TYPES","constructor","type","srid","isEmpty","sqlType","key","includes","Error","join","buffer","length","slice","Geometry","parse","toGeoJSON","shortCrs","values","map","escape","operation","stringify","JSONTYPE"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\mysql\\data-types.js"],"sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.mysql.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.mysql.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.mysql = ['DATETIME'];\n  BaseTypes.STRING.types.mysql = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mysql = ['STRING'];\n  BaseTypes.TEXT.types.mysql = ['BLOB'];\n  BaseTypes.TINYINT.types.mysql = ['TINY'];\n  BaseTypes.SMALLINT.types.mysql = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mysql = ['INT24'];\n  BaseTypes.INTEGER.types.mysql = ['LONG'];\n  BaseTypes.BIGINT.types.mysql = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mysql = ['FLOAT'];\n  BaseTypes.TIME.types.mysql = ['TIME'];\n  BaseTypes.DATEONLY.types.mysql = ['DATE'];\n  BaseTypes.BOOLEAN.types.mysql = ['TINY'];\n  BaseTypes.BLOB.types.mysql = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mysql = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mysql = false;\n  BaseTypes.ENUM.types.mysql = false;\n  BaseTypes.REAL.types.mysql = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mysql = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mysql = ['GEOMETRY'];\n  BaseTypes.JSON.types.mysql = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      // Fractional DATETIMEs only supported on MySQL 5.6.4+\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  const SUPPORTED_GEOMETRY_TYPES = ['POINT', 'LINESTRING', 'POLYGON'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n        return;\n      }\n      if (SUPPORTED_GEOMETRY_TYPES.includes(this.type)) {\n        this.sqlType = this.type;\n        return;\n      }\n      throw new Error(`Supported geometry types are: ${SUPPORTED_GEOMETRY_TYPES.join(', ')}`);\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}