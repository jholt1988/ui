{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"./utils/logger\");\n\nconst debug = logger.debugContext(\"hooks\");\nconst hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: [\"beforeUpdate\", \"beforeCreate\"]\n  },\n  afterSave: {\n    params: 2,\n    proxies: [\"afterUpdate\", \"afterCreate\"]\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: true\n  },\n  afterAssociate: {\n    params: 2,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: true\n  },\n  afterConnect: {\n    params: 2,\n    noModel: true\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\nexports.hooks = hookTypes;\n\nconst getProxiedHooks = hookType => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks) {\n    if (!hooks) throw new Error(\"runHooks requires at least 1 argument\");\n    let hookType;\n\n    if (typeof hooks === \"string\") {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    for (var _len = arguments.length, hookArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      hookArgs[_key - 1] = arguments[_key];\n    }\n\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === \"object\") {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n\n      return;\n    }\n\n    for (let hook of hooks) {\n      if (typeof hook === \"object\") {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  addHook(hookType, name, fn) {\n    if (typeof name === \"function\") {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? {\n        name,\n        fn\n      } : fn);\n      this.options.hooks[type] = hooks;\n    });\n    return this;\n  },\n\n  removeHook(hookType, name) {\n    const isReference = typeof name === \"function\" ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === \"function\") {\n          return hook !== name;\n        }\n\n        if (!isReference && typeof hook === \"object\") {\n          return hook.name !== name;\n        }\n\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n\n};\nHooks.hasHooks = Hooks.hasHook;\n\nfunction applyTo(target) {\n  let isModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\n\nexports.applyTo = applyTo;","map":{"version":3,"mappings":"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","names":["_","require","logger","debug","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","noModel","afterDefine","beforeInit","afterInit","beforeAssociate","afterAssociate","beforeConnect","afterConnect","beforeDisconnect","afterDisconnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","beforeQuery","afterQuery","exports","hooks","getProxiedHooks","hookType","concat","hooked","options","Hooks","_setupHooks","map","hooksArray","hookName","Array","isArray","forEach","hookFn","addHook","runHooks","Error","getHooks","sequelize","hookArgs","hook","fn","apply","name","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","target","isModel","mixin","Object","keys","callback","applyTo"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\hooks.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    for (let hook of hooks) {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"]},"metadata":{},"sourceType":"script"}