{"ast":null,"code":"const express = require('express');\n\nconst {\n  isAuthenticated\n} = require('../Loaders/authenticate');\n\nconst {\n  User\n} = require('../db');\n\nconst router = express.Router();\n\nconst Auth = require('../Services/AuthService');\n\nmodule.exports = (app, passport) => {\n  app.use('/auth', router);\n  router.post('/authenticate', passport.authenticate('local'), Auth.login);\n  router.get('/', isAuthenticated, (req, res, done) => {\n    res.redirect(`../users/${req.user.id}`);\n  });\n  router.get('/profile', isAuthenticated, (req, res, done) => {\n    const username = req.body.username;\n    const password = req.body.password;\n    const user = Auth.login(username, password);\n\n    if (user) {\n      return res.status(200).send(user);\n    }\n  }); // async (req, res, done) => {\n  // //     try {\n  //         const username = req.body.username\n  //         const password = req.body.password\n  //         const user = await AuthServiceInstance.login( username,  password  )\n  //         if (user) {\n  //             res.status(200).send(user)\n  //         } else {\n  //             res.status(404).send('Username or password invalid. Verify credentials and try again')\n  //         }\n  //     } catch (err) {\n  //         done(Error(err.message))\n  //     }\n  // })\n\n  router.post('/register', async (req, res, done) => {\n    const newUser = {\n      username: req.body.username,\n      password: req.body.password,\n      email: req.body.email,\n      role: req.body.role\n    };\n    const userProfile = {\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      DOB: req.body.DOB,\n      phoneNumber: req.body.phoneNumber\n    };\n    const userInfo = {\n      User: newUser,\n      Profile: userProfile\n    };\n    console.log(userInfo);\n    await Auth.register(userInfo).then(data => {\n      if (data) {\n        return res.status(200).send(data);\n      }\n    }).catch(err => {\n      done(err);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Routes/Auth.js"],"names":["express","require","isAuthenticated","User","router","Router","Auth","module","exports","app","passport","use","post","authenticate","login","get","req","res","done","redirect","user","id","username","body","password","status","send","newUser","email","role","userProfile","firstName","lastName","DOB","phoneNumber","userInfo","Profile","console","log","register","then","data","catch","err"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAoBD,OAAO,CAAC,yBAAD,CAAjC;;AACA,MAAM;AAACE,EAAAA;AAAD,IAASF,OAAO,CAAC,OAAD,CAAtB;;AACA,MAAMG,MAAM,GAAGJ,OAAO,CAACK,MAAR,EAAf;;AAEA,MAAMC,IAAI,GAAEL,OAAO,CAAC,yBAAD,CAAnB;;AAKAM,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAChCD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,OAAR,EAAiBP,MAAjB;AAGAA,EAAAA,MAAM,CAACQ,IAAP,CAAY,eAAZ,EACIF,QAAQ,CAACG,YAAT,CAAsB,OAAtB,CADJ,EACoCP,IAAI,CAACQ,KADzC;AAGAV,EAAAA,MAAM,CAACW,GAAP,CAAW,GAAX,EAAgBb,eAAhB,EAAiC,CAACc,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACjDD,IAAAA,GAAG,CAACE,QAAJ,CAAc,YAAWH,GAAG,CAACI,IAAJ,CAASC,EAAG,EAArC;AACH,GAFD;AAKAjB,EAAAA,MAAM,CAACW,GAAP,CAAW,UAAX,EAAuBb,eAAvB,EAAwC,CAACc,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACxD,UAAMI,QAAQ,GAAGN,GAAG,CAACO,IAAJ,CAASD,QAA1B;AACA,UAAME,QAAQ,GAAGR,GAAG,CAACO,IAAJ,CAASC,QAA1B;AAEA,UAAMJ,IAAI,GAAGd,IAAI,CAACQ,KAAL,CAAWQ,QAAX,EAAqBE,QAArB,CAAb;;AAEA,QAAIJ,IAAJ,EAAU;AACP,aAAOH,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,IAArB,CAAP;AACF;AACJ,GATD,EAZgC,CAsBhC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhB,EAAAA,MAAM,CAACQ,IAAP,CAAY,WAAZ,EAAyB,OAAOI,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAG/C,UAAMS,OAAO,GAAG;AACZL,MAAAA,QAAQ,EAAEN,GAAG,CAACO,IAAJ,CAASD,QADP;AAEZE,MAAAA,QAAQ,EAAER,GAAG,CAACO,IAAJ,CAASC,QAFP;AAGZI,MAAAA,KAAK,EAAEZ,GAAG,CAACO,IAAJ,CAASK,KAHJ;AAIZC,MAAAA,IAAI,EAAEb,GAAG,CAACO,IAAJ,CAASM;AAJH,KAAhB;AAOA,UAAMC,WAAW,GAAG;AAChBC,MAAAA,SAAS,EAAEf,GAAG,CAACO,IAAJ,CAASQ,SADJ;AAEhBC,MAAAA,QAAQ,EAAEhB,GAAG,CAACO,IAAJ,CAASS,QAFH;AAGhBC,MAAAA,GAAG,EAAEjB,GAAG,CAACO,IAAJ,CAASU,GAHE;AAIhBC,MAAAA,WAAW,EAAElB,GAAG,CAACO,IAAJ,CAASW;AAJN,KAApB;AAMA,UAAMC,QAAQ,GAAG;AACbhC,MAAAA,IAAI,EAAEwB,OADO;AAEbS,MAAAA,OAAO,EAAEN;AAFI,KAAjB;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,UAAM7B,IAAI,CAACiC,QAAL,CAAcJ,QAAd,EACDK,IADC,CACIC,IAAI,IAAI;AACV,UAAIA,IAAJ,EAAU;AAEN,eAAOxB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBe,IAArB,CAAP;AACH;AAEJ,KAPC,EAUDC,KAVC,CAUKC,GAAG,IAAI;AACVzB,MAAAA,IAAI,CAACyB,GAAD,CAAJ;AACH,KAZC,CAAN;AAaH,GAnCD;AAoCH,CA1ED","sourcesContent":["const express = require('express');\r\nconst {isAuthenticated} = require('../Loaders/authenticate');\r\nconst {User} = require('../db');\r\nconst router = express.Router();\r\n\r\nconst Auth= require('../Services/AuthService');\r\n\r\n\r\n\r\n\r\nmodule.exports = (app, passport) => {\r\n    app.use('/auth', router);\r\n\r\n\r\n    router.post('/authenticate',\r\n        passport.authenticate('local'), Auth.login)\r\n       \r\n    router.get('/', isAuthenticated, (req, res, done) => {\r\n        res.redirect(`../users/${req.user.id}`)\r\n    })\r\n   \r\n    \r\n    router.get('/profile', isAuthenticated, (req, res, done) => {\r\n        const username = req.body.username\r\n        const password = req.body.password\r\n\r\n        const user = Auth.login(username, password)\r\n\r\n        if (user) {\r\n           return res.status(200).send(user)\r\n        }\r\n    })\r\n    // async (req, res, done) => {\r\n    // //     try {\r\n    //         const username = req.body.username\r\n    //         const password = req.body.password\r\n        \r\n    //         const user = await AuthServiceInstance.login( username,  password  )\r\n    //         if (user) {\r\n    //             res.status(200).send(user)\r\n    //         } else {\r\n    //             res.status(404).send('Username or password invalid. Verify credentials and try again')\r\n    //         }\r\n    //     } catch (err) {\r\n    //         done(Error(err.message))\r\n    //     }\r\n    // })\r\n\r\n    router.post('/register', async (req, res, done) => {\r\n\r\n           \r\n        const newUser = {\r\n            username: req.body.username,\r\n            password: req.body.password,\r\n            email: req.body.email,\r\n            role: req.body.role\r\n\r\n        }\r\n        const userProfile = {\r\n            firstName: req.body.firstName,\r\n            lastName: req.body.lastName,\r\n            DOB: req.body.DOB,\r\n            phoneNumber: req.body.phoneNumber\r\n        }\r\n        const userInfo = {\r\n            User: newUser,\r\n            Profile: userProfile\r\n        }\r\n\r\n        console.log(userInfo)\r\n        await Auth.register(userInfo)\r\n            .then(data => {\r\n                if (data) {\r\n                    \r\n                    return res.status(200).send(data)\r\n                }\r\n            \r\n            }\r\n            )\r\n                \r\n            .catch(err => {\r\n                done(err)\r\n            })\r\n    })\r\n}           "]},"metadata":{},"sourceType":"script"}