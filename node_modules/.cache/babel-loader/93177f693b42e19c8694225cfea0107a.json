{"ast":null,"code":"\"use strict\";\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(`Naming collision between attribute '${association.as}' and association '${association.as}' on model ${association.source.name}. To remedy this, change either foreignKey or as in your association definition`);\n  }\n}\n\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    const primaryKeys = Object.keys(source.primaryKeys).map(primaryKeyAttribute => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\n\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function () {\n        return association[realMethod](this, ...Array.from(arguments));\n      };\n    }\n  }\n}\n\nexports.mixinMethods = mixinMethods;","map":{"version":3,"mappings":";;AAEA,8BAA8BA,WAA9B,EAA2C;AACzC,MAAIC,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,YAAYK,MAAZ,CAAmBC,aAAxD,EAAuEN,YAAYO,EAAnF,CAAJ,EAA4F;AAC1F,UAAM,IAAIC,KAAJ,CACJ,uCAAuCR,YAAYO,wBAC9BP,YAAYO,gBAAgBP,YAAYK,MAAZ,CAAmBI,qFAFhE,CAAN;AAEsE;AAAA;;AAK1EC,QAAQC,oBAAR,GAA+BA,oBAA/B;;AAEA,kCAAkCC,YAAlC,EAAgDP,MAAhD,EAAwDQ,MAAxD,EAAgEC,OAAhE,EAAyEC,GAAzE,EAA8E;AAI5E,MAAID,QAAQE,oBAAR,IAAgCF,QAAQG,QAAxC,IAAoDH,QAAQI,QAAhE,EAA0E;AAExE,UAAMC,cAAclB,OAAOmB,IAAP,CAAYf,OAAOc,WAAnB,EACjBE,GADiB,CACbC,uBAAuBjB,OAAOC,aAAP,CAAqBgB,mBAArB,EAA0CC,KAA1C,IAAmDD,mBAD7D,CAApB;;AAGA,QAAIH,YAAYK,MAAZ,KAAuB,CAAvB,IAA4B,CAACL,YAAYM,QAAZ,CAAqBV,GAArB,CAAjC,EAA4D;AAC1DH,mBAAac,UAAb,GAA0B;AACxBC,eAAOtB,OAAOuB,YAAP,EADiB;AAExBb,aAAKA,OAAOI,YAAY,CAAZ;AAFY,OAA1B;AAKAP,mBAAaK,QAAb,GAAwBH,QAAQG,QAAhC;AACAL,mBAAaM,QAAb,GAAwBJ,QAAQI,QAAhC;AAAgC;AAAA;AAAA;;AAItCR,QAAQmB,wBAAR,GAAmCA,wBAAnC;;AAaA,sBAAsB7B,WAAtB,EAAmC8B,GAAnC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;AACxDA,YAAUA,WAAW,EAArB;;AAEA,aAAWC,MAAX,IAAqBF,OAArB,EAA8B;AAE5B,QAAI,CAAC9B,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC0B,GAArC,EAA0C9B,YAAYkC,SAAZ,CAAsBD,MAAtB,CAA1C,CAAL,EAA+E;AAC7E,YAAME,aAAaH,QAAQC,MAAR,KAAmBA,MAAtC;;AAEAH,UAAI9B,YAAYkC,SAAZ,CAAsBD,MAAtB,CAAJ,IAAqC,YAAW;AAC9C,eAAOjC,YAAYmC,UAAZ,EAAwB,IAAxB,EAA8B,GAAGC,MAAMC,IAAN,CAAWC,SAAX,CAAjC,CAAP;AAAmD,OADrD;AACqD;AAAA;AAAA;;AAK3D5B,QAAQ6B,YAAR,GAAuBA,YAAvB","names":["association","Object","prototype","hasOwnProperty","call","source","rawAttributes","as","Error","name","exports","checkNamingCollision","newAttribute","target","options","key","foreignKeyConstraint","onDelete","onUpdate","primaryKeys","keys","map","primaryKeyAttribute","field","length","includes","references","model","getTableName","addForeignKeyConstraints","obj","methods","aliases","method","accessors","realMethod","Array","from","arguments","mixinMethods"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\associations\\helpers.js"],"sourcesContent":["'use strict';\n\nfunction checkNamingCollision(association) {\n  if (Object.prototype.hasOwnProperty.call(association.source.rawAttributes, association.as)) {\n    throw new Error(\n      `Naming collision between attribute '${association.as}'` +\n      ` and association '${association.as}' on model ${association.source.name}` +\n      '. To remedy this, change either foreignKey or as in your association definition'\n    );\n  }\n}\nexports.checkNamingCollision = checkNamingCollision;\n\nfunction addForeignKeyConstraints(newAttribute, source, target, options, key) {\n  // FK constraints are opt-in: users must either set `foreignKeyConstraints`\n  // on the association, or request an `onDelete` or `onUpdate` behavior\n\n  if (options.foreignKeyConstraint || options.onDelete || options.onUpdate) {\n    // Find primary keys: composite keys not supported with this approach\n    const primaryKeys = Object.keys(source.primaryKeys)\n      .map(primaryKeyAttribute => source.rawAttributes[primaryKeyAttribute].field || primaryKeyAttribute);\n\n    if (primaryKeys.length === 1 || !primaryKeys.includes(key)) {\n      newAttribute.references = {\n        model: source.getTableName(),\n        key: key || primaryKeys[0]\n      };\n\n      newAttribute.onDelete = options.onDelete;\n      newAttribute.onUpdate = options.onUpdate;\n    }\n  }\n}\nexports.addForeignKeyConstraints = addForeignKeyConstraints;\n\n/**\n * Mixin (inject) association methods to model prototype\n *\n * @private\n *\n * @param {object} association instance\n * @param {object} obj Model prototype\n * @param {Array} methods Method names to inject\n * @param {object} aliases Mapping between model and association method names\n *\n */\nfunction mixinMethods(association, obj, methods, aliases) {\n  aliases = aliases || {};\n\n  for (const method of methods) {\n    // don't override custom methods\n    if (!Object.prototype.hasOwnProperty.call(obj, association.accessors[method])) {\n      const realMethod = aliases[method] || method;\n\n      obj[association.accessors[method]] = function() {\n        return association[realMethod](this, ...Array.from(arguments));\n      };\n    }\n  }\n}\nexports.mixinMethods = mixinMethods;\n"]},"metadata":{},"sourceType":"script"}