{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nconst Utils = require(\"../../utils\");\n\nconst Transaction = require(\"../../transaction\");\n\nconst _ = require(\"lodash\");\n\nconst MySqlQueryGenerator = require(\"../mysql/query-generator\");\n\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return \"SELECT sqlite_version() as `version`\";\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes(\"PRIMARY KEY\")).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes(\"AUTOINCREMENT\");\n        let dataTypeString = dataType;\n\n        if (dataType.includes(\"PRIMARY KEY\")) {\n          if (dataType.includes(\"INT\")) {\n            dataTypeString = containsAutoIncrement ? \"INTEGER PRIMARY KEY AUTOINCREMENT\" : \"INTEGER PRIMARY KEY\";\n\n            if (dataType.includes(\" REFERENCES\")) {\n              dataTypeString += dataType.substr(dataType.indexOf(\" REFERENCES\"));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n\n            if (dataType.includes(\"NOT NULL\")) {\n              dataTypeString = dataType.replace(\" PRIMARY KEY\", \"\");\n            } else {\n              dataTypeString = dataType.replace(\"PRIMARY KEY\", \"NOT NULL\");\n            }\n          }\n        }\n\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(\", \");\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(\", \");\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    return hasJsonFunction;\n  }\n\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n\n    return value;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = \"datetime\";\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, {\n      context: \"addColumn\"\n    });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || void 0, {\n          context: \"UPDATE\"\n        }, bindParam)}`);\n      }\n    }\n\n    let query;\n\n    const whereOptions = __spreadProps(__spreadValues({}, options), {\n      bindParam\n    });\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(\",\")} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return {\n      query,\n      bind\n    };\n  }\n\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`DELETE FROM ${this.quoteTable(tableName)}`, options.restartIdentity ? `; DELETE FROM ${this.quoteTable(\"sqlite_sequence\")} WHERE ${this.quoteIdentifier(\"name\")} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), \"`\"), \"'\")};` : \"\"].join(\"\");\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, \"allowNull\") && !dataType.allowNull) {\n          sql += \" NOT NULL\";\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += \" UNIQUE\";\n        }\n\n        if (dataType.primaryKey) {\n          sql += \" PRIMARY KEY\";\n\n          if (dataType.autoIncrement) {\n            sql += \" AUTOINCREMENT\";\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n          let referencesKey;\n\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier(\"id\");\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n    attributes = this.attributesToSQL(attributes);\n    let backupTableName;\n\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`).replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};DROP TABLE ${quotedTableName};ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === \"object\") {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(\", \");\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(\", \");\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return \"-- SQLite is not able to choose the isolation level REPEATABLE READ.\";\n\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return \"PRAGMA read_uncommitted = ON;\";\n\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return \"PRAGMA read_uncommitted = OFF;\";\n\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, \"DEFAULT 0\").replace(/DEFAULT '?true'?/g, \"DEFAULT 1\");\n  }\n\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, \"`\"), \"`\");\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;","map":{"version":3,"mappings":"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","names":["Utils","require","Transaction","_","MySqlQueryGenerator","AbstractQueryGenerator","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","options","primaryKeys","needsMultiplePrimaryKeys","Object","values","filter","definition","includes","length","attrArray","attr","prototype","hasOwnProperty","call","dataType","containsAutoIncrement","dataTypeString","substr","indexOf","push","replace","quoteIdentifier","table","quoteTable","attrStr","join","pkString","map","pk","uniqueKeys","each","columns","customIndex","fields","field","sql","replaceBooleanDefaults","booleanValue","value","_checkValidJsonStatement","stmt","jsonFunctionRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","functionMatches","exec","tokenMatches","capturedToken","Error","_toJSONValue","Date","toISOString","Array","isArray","val","handleSequelizeMethod","smth","factory","prepend","Json","Cast","test","type","addColumnQuery","key","attributesToSQL","context","attribute","showTablesQuery","updateQuery","attrValueHash","where","defaults","removeNullValuesFromHash","omitNull","modelAttributeMap","bind","bindParam","SequelizeMethod","escape","format","query","whereOptions","__spreadProps","limit","whereQuery","truncateTableQuery","restartIdentity","addTicks","removeTicks","deleteQuery","model","whereClause","getWhereConditions","result","name","fieldName","isObject","toString","allowNull","defaultValueSchemable","defaultValue","unique","primaryKey","autoIncrement","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","showIndexesQuery","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","indexName","underscore","describeTableQuery","schema","schemaDelimiter","_schema","_schemaDelimiter","addSchema","describeCreateTableQuery","removeColumnQuery","backupTableName","quotedTableName","quotedBackupTableName","attributeNames","keys","_alterConstraintQuery","createTableSql","renameColumnQuery","attrNameBefore","attrNameAfter","attributeNamesImport","attributeNamesExport","startTransactionQuery","transaction","parent","setIsolationLevelQuery","ISOLATION_LEVELS","REPEATABLE_READ","READ_UNCOMMITTED","READ_COMMITTED","SERIALIZABLE","getForeignKeysQuery","identifier","force","module","exports","SQLiteQueryGenerator"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\sqlite\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}