{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:snowflake\");\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n\n        options.transaction.finished = \"rollback\";\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n\n    return this.formatResults(results);\n  }\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data2 => _.reduce(data2, (prev, value, key) => {\n          if (value !== void 0 && sfAttrMap[key]) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n\n          return prev;\n        }, data2));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => {\n        return k.toUpperCase();\n      });\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0][\"number of rows updated\"];\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","sql","values","dialect","bindParam","replacementFunc","_match","key","values_","push","formatBindParameters","length","parameters","connection","options","showWarnings","sequelize","complete","_logQuery","results","Promise","resolve","reject","execute","sqlText","binds","err","_stmt","rows","error","transaction","errno","rollback","error_","finished","formatError","warningStatus","logWarnings","formatResults","data","result","instance","isInsertQuery","handleInsertQuery","constructor","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","raw","quoteIdentifiers","sfAttrMap","reduce","m","v","k","toUpperCase","map","data2","prev","value","fieldMap","mapKeys","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","run","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","errCode","code","match","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","Query","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\snowflake\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:snowflake');\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // ignore errors\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      // Snowflake will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data => _.reduce(data, (prev, value, key) => {\n          if ( value !== undefined && sfAttrMap[key] ) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => { return k.toUpperCase(); });\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0]['number of rows updated'];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}