{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\n\nconst sequelizeErrors = require(\"../../errors\");\n\nconst parserStore = require(\"../parserStore\")(\"mssql\");\n\nconst _ = require(\"lodash\");\n\nconst {\n  logger\n} = require(\"../../utils/logger\");\n\nconst debug = logger.debugContext(\"sql:mssql\");\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === \"number\") {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        paramType.typeOptions = {\n          precision: 30,\n          scale: getScale(value)\n        };\n      }\n    } else if (typeof value === \"boolean\") {\n      paramType.type = TYPES.Bit;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const {\n      options\n    } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      if (sql.startsWith(\"BEGIN TRANSACTION\")) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n\n      if (sql.startsWith(\"COMMIT TRANSACTION\")) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n\n      if (sql.startsWith(\"ROLLBACK TRANSACTION\")) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      if (sql.startsWith(\"SAVE TRANSACTION\")) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows2 = [];\n      const request = new connection.lib.Request(sql, (err, rowCount2) => err ? reject(err) : resolve([rows2, rowCount2]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on(\"row\", columns => {\n        rows2.push(columns);\n      });\n      connection.execSql(request);\n    });\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return `@${key}`;\n      }\n\n      return void 0;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      const result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"YES\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === \"PRIMARY KEY\",\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (result[_result.Name].type.includes(\"CHAR\") && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += \"(MAX)\";\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n\n      return result;\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isUpsertQuery()) {\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === \"INSERT\"];\n    }\n\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = \"Validation error\";\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[3]) {\n        const values = match[3].split(\",\").map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : void 0;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n  }\n\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(\",\").forEach(column => {\n        let columnName = column.trim();\n\n        if (columnName.includes(\"(-)\")) {\n          columnName = columnName.replace(\"(-)\", \"\");\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: void 0,\n          order: column.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n          collate: void 0\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith(\"pk\"),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: void 0,\n      unique: item.index_description.toLowerCase().includes(\"unique\"),\n      type: void 0\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"mappings":"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","names":["AbstractQuery","require","sequelizeErrors","parserStore","_","logger","debug","debugContext","aNum","Number","isFinite","e","Math","round","log10","getInsertIdField","getSQLTypeFromJsType","value","TYPES","paramType","type","VarChar","typeOptions","NVarChar","isInteger","Int","BigInt","Numeric","precision","scale","getScale","Bit","Buffer","isBuffer","VarBinary","connection","sql","parameters","errStack","options","complete","_logQuery","query","Promise","resolve","reject","startsWith","beginTransaction","error","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","rows2","request","Request","err","rowCount2","forOwn","key","addParameter","on","columns","push","execSql","rows","rowCount","formatError","Array","isArray","map","row","column","typeid","metadata","id","parse","get","colName","formatResults","run","errForStack","Error","queue","enqueue","_run","stack","values","dialect","bindParam","replacementFunc","match","values2","formatBindParameters","data","isInsertQuery","handleInsertQuery","instance","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","result","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","returning","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","length","$action","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","results","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","fields","uniqueKey","model","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","Object","prototype","hasOwnProperty","call","rawAttributes","dataValues","record","attr","find","fieldName","module","exports","Query","default"],"sources":["C:\\Users\\jorda\\OneDrive\\Desktop\\berecoapp\\node_modules\\sequelize\\src\\dialects\\mssql\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\n      // return the current instance and mark it as an \"not an insert\".\n      if (data && data.length === 0) {\n        return [this.instance || data, false];\n      }\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}