{"ast":null,"code":"const {\n  User,\n  Profile\n} = require('../db');\n\nconst bcrypt = require('bcrypt');\n/** User Login- Authenticate User Credentials {username,password}\r\n * And Authorize User To Use API\r\n* \r\n* @param {Object} data {username: username, password: password}\r\n* @return {Object|null} Profile of User Logged In\r\n*\r\n* */\n\n\nexports.login = async (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password; // const user = User.authenticate(username, password)\n\n  await User.findOne({\n    where: {\n      username: username\n    }\n  }).then(user => {\n    user.getProfile({\n      where: {\n        UserId: user.id\n      }\n    }).then(profile => {\n      res.status(202).send({\n        user,\n        profile\n      });\n    });\n  }).catch(err => {\n    throw new Error(err.message);\n  });\n};\n/** User Register- Create A New User Record And A NeW User Profile\r\n * \r\n* \r\n* @param {Object} data {user: ...userInfo, profile: ...userProfile}\r\n* @return {Object|null} new user record and profile\r\n*\r\n* */\n\n\nexports.register = async data => {\n  const {\n    User: userData,\n    Profile: userProfileData\n  } = data;\n  let isReg; // check to see if user exists)\n\n  User.userExist(userData.username, userData.email).then(bool => {\n    isReg = bool;\n    console.log(isReg);\n    return isReg;\n  });\n\n  if (isReg === false) {\n    throw new Error('User already Exists. Please Login');\n  } else {\n    const newUser = await User.create(userData);\n    const newProfile = await newUser.createProfile(userProfileData);\n    const result = {\n      User: newUser,\n      Profile: newProfile\n    };\n    return result;\n  }\n}; //     const register = (req, res) => {\n//         const username = req.body.username\n//         const password = req.body.password\n//         const user = {\n//             username: username,\n//             password: password,\n//             email: req.body.email,\n//             role: req.body.role\n//         }\n//         const profile = {\n//             userId: user.Id,\n//             firstName: req.body.firstName,\n//             lastName: req.body.lastName,\n//             DOB: req.body.DOB,\n//             phoneNumber: req.body.phoneNumber\n//         }\n//         User.create(user)\n//             .then(async (result) => {\n//                 const newProfile = await result.createProfile(profile)\n//                 const newUser = result\n//                 return { newUser, newProfile }\n//             })\n//             .then((data) => {\n//                 if (data) {\n//                     res.send(data)\n//                 }\n//             })\n//             .catch((err) => {\n//                 res.send({ message: err + '  Error User Not Created' })\n//             })\n//     }\n//     exports = {\n//         login,\n//         register\n//     }\n// }","map":{"version":3,"sources":["C:/Users/jorda/OneDrive/Desktop/berecoapp/node_modules/berecoapi2.0/Services/AuthService.js"],"names":["User","Profile","require","bcrypt","exports","login","req","res","username","body","password","findOne","where","then","user","getProfile","UserId","id","profile","status","send","catch","err","Error","message","register","data","userData","userProfileData","isReg","userExist","email","bool","console","log","newUser","create","newProfile","createProfile","result"],"mappings":"AAAA,MAAO;AAACA,EAAAA,IAAD;AAAOC,EAAAA;AAAP,IAAmBC,OAAO,CAAC,OAAD,CAAjC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;AAOI;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEAE,OAAO,CAACC,KAAR,GAAgB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChC,QAAMC,QAAQ,GAAGF,GAAG,CAACG,IAAJ,CAASD,QAA1B;AACA,QAAME,QAAQ,GAAGJ,GAAG,CAACG,IAAJ,CAASC,QAA1B,CAFgC,CAGhC;;AAEA,QAAOV,IAAI,CAACW,OAAL,CAAa;AAChBC,IAAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAQ,EAAEA;AAAZ;AADS,GAAb,EAEJK,IAFI,CAECC,IAAI,IAAI;AACZA,IAAAA,IAAI,CAACC,UAAL,CAAgB;AAEZH,MAAAA,KAAK,EAAE;AAAEI,QAAAA,MAAM,EAAEF,IAAI,CAACG;AAAf;AAFK,KAAhB,EAKKJ,IALL,CAKUK,OAAO,IAAI;AACbX,MAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,QAAAA,IAAF;AAAQI,QAAAA;AAAR,OAArB;AACH,KAPL;AASH,GAZM,EAcFG,KAdE,CAcIC,GAAG,IAAI;AACV,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACE,OAAd,CAAN;AACH,GAhBE,CAAP;AAoBC,CAzBL;AAmCI;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAGIpB,OAAO,CAACqB,QAAR,GAAoB,MAAOC,IAAP,IAAgB;AAChC,QAAM;AAAE1B,IAAAA,IAAI,EAAE2B,QAAR;AAAkB1B,IAAAA,OAAO,EAAE2B;AAA3B,MAA+CF,IAArD;AACA,MAAIG,KAAJ,CAFgC,CAIhC;;AACC7B,EAAAA,IAAI,CAAC8B,SAAL,CAAeH,QAAQ,CAACnB,QAAxB,EAAkCmB,QAAQ,CAACI,KAA3C,EACIlB,IADJ,CACSmB,IAAI,IAAI;AACVH,IAAAA,KAAK,GAAGG,IAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,WAAOA,KAAP;AACH,GALJ;;AAMD,MAAIA,KAAK,KAAK,KAAd,EAAqB;AACjB,UAAM,IAAIN,KAAJ,CAAU,mCAAV,CAAN;AACH,GAFD,MAEO;AACH,UAAMY,OAAO,GAAG,MAAMnC,IAAI,CAACoC,MAAL,CAAYT,QAAZ,CAAtB;AACA,UAAMU,UAAU,GAAG,MAAMF,OAAO,CAACG,aAAR,CAAsBV,eAAtB,CAAzB;AACA,UAAMW,MAAM,GAAG;AAAEvC,MAAAA,IAAI,EAAEmC,OAAR;AAAiBlC,MAAAA,OAAO,EAAEoC;AAA1B,KAAf;AAEA,WAAOE,MAAP;AAIH;AAIR,CA1BG,C,CA+BJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["const  {User, Profile}  = require('../db');\r\nconst bcrypt = require('bcrypt'); \r\n\r\n\r\n\r\n\r\n    \r\n\r\n    /** User Login- Authenticate User Credentials {username,password}\r\n     * And Authorize User To Use API\r\n    * \r\n    * @param {Object} data {username: username, password: password}\r\n    * @return {Object|null} Profile of User Logged In\r\n    *\r\n    * */\r\n\r\nexports.login = async (req, res) => {\r\n    const username = req.body.username;\r\n    const password = req.body.password;\r\n    // const user = User.authenticate(username, password)\r\n        \r\n    await  User.findOne({\r\n        where: { username: username }\r\n    }).then(user => {\r\n        user.getProfile({\r\n                       \r\n            where: { UserId: user.id }\r\n        }\r\n        )\r\n            .then(profile => {\r\n                res.status(202).send({ user, profile })\r\n            })\r\n            \r\n    })\r\n                \r\n        .catch(err => {\r\n            throw new Error(err.message);\r\n        })\r\n    \r\n        \r\n\r\n    }\r\n\r\n\r\n    \r\n    \r\n               \r\n                \r\n        \r\n    \r\n\r\n    /** User Register- Create A New User Record And A NeW User Profile\r\n     * \r\n    * \r\n    * @param {Object} data {user: ...userInfo, profile: ...userProfile}\r\n    * @return {Object|null} new user record and profile\r\n    *\r\n    * */\r\n    \r\n\r\n    exports.register =  async (data) => {\r\n        const { User: userData, Profile: userProfileData } = data\r\n        let isReg;\r\n        \r\n        // check to see if user exists)\r\n         User.userExist(userData.username, userData.email)\r\n            .then(bool => {\r\n                isReg = bool\r\n                console.log(isReg)\r\n                return isReg\r\n            })\r\n        if (isReg === false) {\r\n            throw new Error('User already Exists. Please Login')\r\n        } else {\r\n            const newUser = await User.create(userData)\r\n            const newProfile = await newUser.createProfile(userProfileData)\r\n            const result = { User: newUser, Profile: newProfile }\r\n                \r\n            return result\r\n            \r\n    \r\n            \r\n        }\r\n \r\n\r\n    \r\n}\r\n    \r\n\r\n\r\n\r\n//     const register = (req, res) => {\r\n//         const username = req.body.username\r\n//         const password = req.body.password\r\n//         const user = {\r\n//             username: username,\r\n//             password: password,\r\n//             email: req.body.email,\r\n//             role: req.body.role\r\n//         }\r\n\r\n//         const profile = {\r\n//             userId: user.Id,\r\n//             firstName: req.body.firstName,\r\n//             lastName: req.body.lastName,\r\n//             DOB: req.body.DOB,\r\n//             phoneNumber: req.body.phoneNumber\r\n//         }\r\n\r\n\r\n//         User.create(user)\r\n//             .then(async (result) => {\r\n//                 const newProfile = await result.createProfile(profile)\r\n//                 const newUser = result\r\n//                 return { newUser, newProfile }\r\n//             })\r\n//             .then((data) => {\r\n//                 if (data) {\r\n\r\n//                     res.send(data)\r\n//                 }\r\n//             })\r\n//             .catch((err) => {\r\n//                 res.send({ message: err + '  Error User Not Created' })\r\n//             })\r\n\r\n//     }\r\n//     exports = {\r\n//         login,\r\n//         register\r\n//     }\r\n\r\n// }\r\n\r\n"]},"metadata":{},"sourceType":"script"}